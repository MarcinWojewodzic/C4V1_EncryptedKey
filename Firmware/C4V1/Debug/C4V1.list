
C4V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e430  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800e610  0800e610  0001e610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eadc  0800eadc  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800eadc  0800eadc  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eadc  0800eadc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eadc  0800eadc  0001eadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eae0  0800eae0  0001eae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800eae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dd4  20000200  0800ece4  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00002e04  20004fd4  0800ece4  00024fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213db  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058a6  00000000  00000000  0004160b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00046eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e0  00000000  00000000  00048a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000165e0  00000000  00000000  0004a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007a81  00000000  00000000  00060940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000683c1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007284  00000000  00000000  00068414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e5f8 	.word	0x0800e5f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800e5f8 	.word	0x0800e5f8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t *RoundKey, uint8_t *Key)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b089      	sub	sp, #36	; 0x24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
   unsigned i, j, k;
   uint8_t tempa[4]; // Used for the column/row operations

   // The first round key is the key itself.
   for(i = 0; i < Nk; ++i)
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
 80002ce:	e030      	b.n	8000332 <KeyExpansion+0x72>
   {
      RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	441a      	add	r2, r3
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	6879      	ldr	r1, [r7, #4]
 80002de:	440b      	add	r3, r1
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	701a      	strb	r2, [r3, #0]
      RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	3301      	adds	r3, #1
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	441a      	add	r2, r3
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	3301      	adds	r3, #1
 80002f4:	6879      	ldr	r1, [r7, #4]
 80002f6:	440b      	add	r3, r1
 80002f8:	7812      	ldrb	r2, [r2, #0]
 80002fa:	701a      	strb	r2, [r3, #0]
      RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	3302      	adds	r3, #2
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	441a      	add	r2, r3
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	3302      	adds	r3, #2
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	440b      	add	r3, r1
 8000310:	7812      	ldrb	r2, [r2, #0]
 8000312:	701a      	strb	r2, [r3, #0]
      RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	3303      	adds	r3, #3
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	441a      	add	r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	3303      	adds	r3, #3
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	440b      	add	r3, r1
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < Nk; ++i)
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	3301      	adds	r3, #1
 8000330:	61fb      	str	r3, [r7, #28]
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	2b03      	cmp	r3, #3
 8000336:	d9cb      	bls.n	80002d0 <KeyExpansion+0x10>
   }

   // All other round keys are found from the previous round keys.
   for(i = Nk; i < Nb * (Nr + 1); ++i)
 8000338:	2304      	movs	r3, #4
 800033a:	61fb      	str	r3, [r7, #28]
 800033c:	e081      	b.n	8000442 <KeyExpansion+0x182>
   {
      {
         k        = (i - 1) * 4;
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3b01      	subs	r3, #1
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
         tempa[0] = RoundKey[k + 0];
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	733b      	strb	r3, [r7, #12]
         tempa[1] = RoundKey[k + 1];
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	3301      	adds	r3, #1
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	737b      	strb	r3, [r7, #13]
         tempa[2] = RoundKey[k + 2];
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	3302      	adds	r3, #2
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	73bb      	strb	r3, [r7, #14]
         tempa[3] = RoundKey[k + 3];
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	3303      	adds	r3, #3
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	4413      	add	r3, r2
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	73fb      	strb	r3, [r7, #15]
      }

      if(i % Nk == 0)
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	f003 0303 	and.w	r3, r3, #3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d125      	bne.n	80003ca <KeyExpansion+0x10a>
         // This function shifts the 4 bytes in a word to the left once.
         // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

         // Function RotWord()
         {
            const uint8_t u8tmp = tempa[0];
 800037e:	7b3b      	ldrb	r3, [r7, #12]
 8000380:	75fb      	strb	r3, [r7, #23]
            tempa[0]            = tempa[1];
 8000382:	7b7b      	ldrb	r3, [r7, #13]
 8000384:	733b      	strb	r3, [r7, #12]
            tempa[1]            = tempa[2];
 8000386:	7bbb      	ldrb	r3, [r7, #14]
 8000388:	737b      	strb	r3, [r7, #13]
            tempa[2]            = tempa[3];
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	73bb      	strb	r3, [r7, #14]
            tempa[3]            = u8tmp;
 800038e:	7dfb      	ldrb	r3, [r7, #23]
 8000390:	73fb      	strb	r3, [r7, #15]
         // SubWord() is a function that takes a four-byte input word and
         // applies the S-box to each of the four bytes to produce an output word.

         // Function Subword()
         {
            tempa[0] = getSBoxValue(tempa[0]);
 8000392:	7b3b      	ldrb	r3, [r7, #12]
 8000394:	461a      	mov	r2, r3
 8000396:	4b30      	ldr	r3, [pc, #192]	; (8000458 <KeyExpansion+0x198>)
 8000398:	5c9b      	ldrb	r3, [r3, r2]
 800039a:	733b      	strb	r3, [r7, #12]
            tempa[1] = getSBoxValue(tempa[1]);
 800039c:	7b7b      	ldrb	r3, [r7, #13]
 800039e:	461a      	mov	r2, r3
 80003a0:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <KeyExpansion+0x198>)
 80003a2:	5c9b      	ldrb	r3, [r3, r2]
 80003a4:	737b      	strb	r3, [r7, #13]
            tempa[2] = getSBoxValue(tempa[2]);
 80003a6:	7bbb      	ldrb	r3, [r7, #14]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <KeyExpansion+0x198>)
 80003ac:	5c9b      	ldrb	r3, [r3, r2]
 80003ae:	73bb      	strb	r3, [r7, #14]
            tempa[3] = getSBoxValue(tempa[3]);
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <KeyExpansion+0x198>)
 80003b6:	5c9b      	ldrb	r3, [r3, r2]
 80003b8:	73fb      	strb	r3, [r7, #15]
         }

         tempa[0] = tempa[0] ^ Rcon[i / Nk];
 80003ba:	7b3a      	ldrb	r2, [r7, #12]
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	089b      	lsrs	r3, r3, #2
 80003c0:	4926      	ldr	r1, [pc, #152]	; (800045c <KeyExpansion+0x19c>)
 80003c2:	5ccb      	ldrb	r3, [r1, r3]
 80003c4:	4053      	eors	r3, r2
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	733b      	strb	r3, [r7, #12]
            tempa[2] = getSBoxValue(tempa[2]);
            tempa[3] = getSBoxValue(tempa[3]);
         }
      }
#endif
      j               = i * 4;
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	613b      	str	r3, [r7, #16]
      k               = (i - Nk) * 4;
 80003d0:	69fb      	ldr	r3, [r7, #28]
 80003d2:	3b04      	subs	r3, #4
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	61bb      	str	r3, [r7, #24]
      RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	69bb      	ldr	r3, [r7, #24]
 80003dc:	4413      	add	r3, r2
 80003de:	7819      	ldrb	r1, [r3, #0]
 80003e0:	7b3a      	ldrb	r2, [r7, #12]
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	4403      	add	r3, r0
 80003e8:	404a      	eors	r2, r1
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	701a      	strb	r2, [r3, #0]
      RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	3301      	adds	r3, #1
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	7819      	ldrb	r1, [r3, #0]
 80003f8:	7b7a      	ldrb	r2, [r7, #13]
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	3301      	adds	r3, #1
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	4403      	add	r3, r0
 8000402:	404a      	eors	r2, r1
 8000404:	b2d2      	uxtb	r2, r2
 8000406:	701a      	strb	r2, [r3, #0]
      RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	3302      	adds	r3, #2
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	4413      	add	r3, r2
 8000410:	7819      	ldrb	r1, [r3, #0]
 8000412:	7bba      	ldrb	r2, [r7, #14]
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	3302      	adds	r3, #2
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	4403      	add	r3, r0
 800041c:	404a      	eors	r2, r1
 800041e:	b2d2      	uxtb	r2, r2
 8000420:	701a      	strb	r2, [r3, #0]
      RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	3303      	adds	r3, #3
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	7819      	ldrb	r1, [r3, #0]
 800042c:	7bfa      	ldrb	r2, [r7, #15]
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	3303      	adds	r3, #3
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	4403      	add	r3, r0
 8000436:	404a      	eors	r2, r1
 8000438:	b2d2      	uxtb	r2, r2
 800043a:	701a      	strb	r2, [r3, #0]
   for(i = Nk; i < Nb * (Nr + 1); ++i)
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	3301      	adds	r3, #1
 8000440:	61fb      	str	r3, [r7, #28]
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	2b2b      	cmp	r3, #43	; 0x2b
 8000446:	f67f af7a 	bls.w	800033e <KeyExpansion+0x7e>
   }
}
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	3724      	adds	r7, #36	; 0x24
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	0800e670 	.word	0x0800e670
 800045c:	0800e870 	.word	0x0800e870

08000460 <AES_init_ctx>:

void AES_init_ctx(AES_ctx *ctx, uint8_t *key)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
   KeyExpansion(ctx->RoundKey, key);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6839      	ldr	r1, [r7, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff26 	bl	80002c0 <KeyExpansion>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t *state, uint8_t *RoundKey)
{
 800047c:	b480      	push	{r7}
 800047e:	b087      	sub	sp, #28
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	73fb      	strb	r3, [r7, #15]
   uint8_t i, j;
   for(i = 0; i < 4; ++i)
 800048a:	2300      	movs	r3, #0
 800048c:	75fb      	strb	r3, [r7, #23]
 800048e:	e027      	b.n	80004e0 <AddRoundKey+0x64>
   {
      for(j = 0; j < 4; ++j)
 8000490:	2300      	movs	r3, #0
 8000492:	75bb      	strb	r3, [r7, #22]
 8000494:	e01e      	b.n	80004d4 <AddRoundKey+0x58>
      {
         (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000496:	7dfa      	ldrb	r2, [r7, #23]
 8000498:	7dbb      	ldrb	r3, [r7, #22]
 800049a:	68b9      	ldr	r1, [r7, #8]
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	440a      	add	r2, r1
 80004a0:	4413      	add	r3, r2
 80004a2:	7818      	ldrb	r0, [r3, #0]
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	009a      	lsls	r2, r3, #2
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	4413      	add	r3, r2
 80004ac:	009a      	lsls	r2, r3, #2
 80004ae:	7dbb      	ldrb	r3, [r7, #22]
 80004b0:	4413      	add	r3, r2
 80004b2:	461a      	mov	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4413      	add	r3, r2
 80004b8:	7819      	ldrb	r1, [r3, #0]
 80004ba:	7dfa      	ldrb	r2, [r7, #23]
 80004bc:	7dbb      	ldrb	r3, [r7, #22]
 80004be:	4041      	eors	r1, r0
 80004c0:	b2c8      	uxtb	r0, r1
 80004c2:	68b9      	ldr	r1, [r7, #8]
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	440a      	add	r2, r1
 80004c8:	4413      	add	r3, r2
 80004ca:	4602      	mov	r2, r0
 80004cc:	701a      	strb	r2, [r3, #0]
      for(j = 0; j < 4; ++j)
 80004ce:	7dbb      	ldrb	r3, [r7, #22]
 80004d0:	3301      	adds	r3, #1
 80004d2:	75bb      	strb	r3, [r7, #22]
 80004d4:	7dbb      	ldrb	r3, [r7, #22]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d9dd      	bls.n	8000496 <AddRoundKey+0x1a>
   for(i = 0; i < 4; ++i)
 80004da:	7dfb      	ldrb	r3, [r7, #23]
 80004dc:	3301      	adds	r3, #1
 80004de:	75fb      	strb	r3, [r7, #23]
 80004e0:	7dfb      	ldrb	r3, [r7, #23]
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	d9d4      	bls.n	8000490 <AddRoundKey+0x14>
      }
   }
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	371c      	adds	r7, #28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t *state)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
   uint8_t i, j;
   for(i = 0; i < 4; ++i)
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]
 8000500:	e01d      	b.n	800053e <SubBytes+0x4a>
   {
      for(j = 0; j < 4; ++j)
 8000502:	2300      	movs	r3, #0
 8000504:	73bb      	strb	r3, [r7, #14]
 8000506:	e014      	b.n	8000532 <SubBytes+0x3e>
      {
         (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8000508:	7bba      	ldrb	r2, [r7, #14]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	6879      	ldr	r1, [r7, #4]
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	440a      	add	r2, r1
 8000512:	4413      	add	r3, r2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	7bba      	ldrb	r2, [r7, #14]
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	490d      	ldr	r1, [pc, #52]	; (8000554 <SubBytes+0x60>)
 800051e:	5c08      	ldrb	r0, [r1, r0]
 8000520:	6879      	ldr	r1, [r7, #4]
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	440a      	add	r2, r1
 8000526:	4413      	add	r3, r2
 8000528:	4602      	mov	r2, r0
 800052a:	701a      	strb	r2, [r3, #0]
      for(j = 0; j < 4; ++j)
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	3301      	adds	r3, #1
 8000530:	73bb      	strb	r3, [r7, #14]
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d9e7      	bls.n	8000508 <SubBytes+0x14>
   for(i = 0; i < 4; ++i)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3301      	adds	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d9de      	bls.n	8000502 <SubBytes+0xe>
      }
   }
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	0800e670 	.word	0x0800e670

08000558 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t *state)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
   uint8_t temp;

   // Rotate first row 1 columns to left
   temp           = (*state)[0][1];
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	73fb      	strb	r3, [r7, #15]
   (*state)[0][1] = (*state)[1][1];
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	795a      	ldrb	r2, [r3, #5]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	705a      	strb	r2, [r3, #1]
   (*state)[1][1] = (*state)[2][1];
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a5a      	ldrb	r2, [r3, #9]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	715a      	strb	r2, [r3, #5]
   (*state)[2][1] = (*state)[3][1];
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7b5a      	ldrb	r2, [r3, #13]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	725a      	strb	r2, [r3, #9]
   (*state)[3][1] = temp;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7bfa      	ldrb	r2, [r7, #15]
 8000582:	735a      	strb	r2, [r3, #13]

   // Rotate second row 2 columns to left
   temp           = (*state)[0][2];
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	73fb      	strb	r3, [r7, #15]
   (*state)[0][2] = (*state)[2][2];
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7a9a      	ldrb	r2, [r3, #10]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	709a      	strb	r2, [r3, #2]
   (*state)[2][2] = temp;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7bfa      	ldrb	r2, [r7, #15]
 8000596:	729a      	strb	r2, [r3, #10]

   temp           = (*state)[1][2];
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	799b      	ldrb	r3, [r3, #6]
 800059c:	73fb      	strb	r3, [r7, #15]
   (*state)[1][2] = (*state)[3][2];
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7b9a      	ldrb	r2, [r3, #14]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	719a      	strb	r2, [r3, #6]
   (*state)[3][2] = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7bfa      	ldrb	r2, [r7, #15]
 80005aa:	739a      	strb	r2, [r3, #14]

   // Rotate third row 3 columns to left
   temp           = (*state)[0][3];
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	73fb      	strb	r3, [r7, #15]
   (*state)[0][3] = (*state)[3][3];
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7bda      	ldrb	r2, [r3, #15]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	70da      	strb	r2, [r3, #3]
   (*state)[3][3] = (*state)[2][3];
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7ada      	ldrb	r2, [r3, #11]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	73da      	strb	r2, [r3, #15]
   (*state)[2][3] = (*state)[1][3];
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	79da      	ldrb	r2, [r3, #7]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	72da      	strb	r2, [r3, #11]
   (*state)[1][3] = temp;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	71da      	strb	r2, [r3, #7]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <xtime>:

static uint8_t xtime(uint8_t x)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
   return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b25a      	sxtb	r2, r3
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	09db      	lsrs	r3, r3, #7
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	0049      	lsls	r1, r1, #1
 80005f6:	440b      	add	r3, r1
 80005f8:	4619      	mov	r1, r3
 80005fa:	00c8      	lsls	r0, r1, #3
 80005fc:	4619      	mov	r1, r3
 80005fe:	4603      	mov	r3, r0
 8000600:	440b      	add	r3, r1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	b25b      	sxtb	r3, r3
 8000606:	4053      	eors	r3, r2
 8000608:	b25b      	sxtb	r3, r3
 800060a:	b2db      	uxtb	r3, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t *state)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
   uint8_t i;
   uint8_t Tmp, Tm, t;
   for(i = 0; i < 4; ++i)
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e0a4      	b.n	8000770 <MixColumns+0x158>
   {
      t   = (*state)[i][0];
 8000626:	7bfa      	ldrb	r2, [r7, #15]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800062e:	73bb      	strb	r3, [r7, #14]
      Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	440b      	add	r3, r1
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	4053      	eors	r3, r2
 8000644:	b2da      	uxtb	r2, r3
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	4053      	eors	r3, r2
 8000652:	b2da      	uxtb	r2, r3
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	78db      	ldrb	r3, [r3, #3]
 800065e:	4053      	eors	r3, r2
 8000660:	737b      	strb	r3, [r7, #13]
      Tm  = (*state)[i][0] ^ (*state)[i][1];
 8000662:	7bfa      	ldrb	r2, [r7, #15]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	4053      	eors	r3, r2
 8000676:	733b      	strb	r3, [r7, #12]
      Tm  = xtime(Tm);
 8000678:	7b3b      	ldrb	r3, [r7, #12]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffae 	bl	80005dc <xtime>
 8000680:	4603      	mov	r3, r0
 8000682:	733b      	strb	r3, [r7, #12]
      (*state)[i][0] ^= Tm ^ Tmp;
 8000684:	7bfa      	ldrb	r2, [r7, #15]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800068c:	7b3a      	ldrb	r2, [r7, #12]
 800068e:	7b7b      	ldrb	r3, [r7, #13]
 8000690:	4053      	eors	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	404b      	eors	r3, r1
 8000698:	b2d9      	uxtb	r1, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
      Tm = (*state)[i][1] ^ (*state)[i][2];
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	4053      	eors	r3, r2
 80006b6:	733b      	strb	r3, [r7, #12]
      Tm = xtime(Tm);
 80006b8:	7b3b      	ldrb	r3, [r7, #12]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff8e 	bl	80005dc <xtime>
 80006c0:	4603      	mov	r3, r0
 80006c2:	733b      	strb	r3, [r7, #12]
      (*state)[i][1] ^= Tm ^ Tmp;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	7859      	ldrb	r1, [r3, #1]
 80006ce:	7b3a      	ldrb	r2, [r7, #12]
 80006d0:	7b7b      	ldrb	r3, [r7, #13]
 80006d2:	4053      	eors	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	404a      	eors	r2, r1
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	460a      	mov	r2, r1
 80006e4:	705a      	strb	r2, [r3, #1]
      Tm = (*state)[i][2] ^ (*state)[i][3];
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	789a      	ldrb	r2, [r3, #2]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	4053      	eors	r3, r2
 80006fc:	733b      	strb	r3, [r7, #12]
      Tm = xtime(Tm);
 80006fe:	7b3b      	ldrb	r3, [r7, #12]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff6b 	bl	80005dc <xtime>
 8000706:	4603      	mov	r3, r0
 8000708:	733b      	strb	r3, [r7, #12]
      (*state)[i][2] ^= Tm ^ Tmp;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	7899      	ldrb	r1, [r3, #2]
 8000714:	7b3a      	ldrb	r2, [r7, #12]
 8000716:	7b7b      	ldrb	r3, [r7, #13]
 8000718:	4053      	eors	r3, r2
 800071a:	b2da      	uxtb	r2, r3
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	404a      	eors	r2, r1
 8000720:	b2d1      	uxtb	r1, r2
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	460a      	mov	r2, r1
 800072a:	709a      	strb	r2, [r3, #2]
      Tm = (*state)[i][3] ^ t;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	78da      	ldrb	r2, [r3, #3]
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	4053      	eors	r3, r2
 800073a:	733b      	strb	r3, [r7, #12]
      Tm = xtime(Tm);
 800073c:	7b3b      	ldrb	r3, [r7, #12]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff4c 	bl	80005dc <xtime>
 8000744:	4603      	mov	r3, r0
 8000746:	733b      	strb	r3, [r7, #12]
      (*state)[i][3] ^= Tm ^ Tmp;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	78d9      	ldrb	r1, [r3, #3]
 8000752:	7b3a      	ldrb	r2, [r7, #12]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	4053      	eors	r3, r2
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	404a      	eors	r2, r1
 800075e:	b2d1      	uxtb	r1, r2
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	70da      	strb	r2, [r3, #3]
   for(i = 0; i < 4; ++i)
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	3301      	adds	r3, #1
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	2b03      	cmp	r3, #3
 8000774:	f67f af57 	bls.w	8000626 <MixColumns+0xe>
   }
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t *state)
{
 8000782:	b5b0      	push	{r4, r5, r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t a, b, c, d;
   for(i = 0; i < 4; ++i)
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e33b      	b.n	8000e08 <InvMixColumns+0x686>
   {
      a = (*state)[i][0];
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000798:	72fb      	strb	r3, [r7, #11]
      b = (*state)[i][1];
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	785b      	ldrb	r3, [r3, #1]
 80007a4:	72bb      	strb	r3, [r7, #10]
      c = (*state)[i][2];
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	727b      	strb	r3, [r7, #9]
      d = (*state)[i][3];
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	78db      	ldrb	r3, [r3, #3]
 80007bc:	723b      	strb	r3, [r7, #8]

      (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff0b 	bl	80005dc <xtime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff07 	bl	80005dc <xtime>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff03 	bl	80005dc <xtime>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff feff 	bl	80005dc <xtime>
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fefb 	bl	80005dc <xtime>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fef7 	bl	80005dc <xtime>
 80007ee:	7abb      	ldrb	r3, [r7, #10]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fef3 	bl	80005dc <xtime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff feef 	bl	80005dc <xtime>
 80007fe:	4603      	mov	r3, r0
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff feeb 	bl	80005dc <xtime>
 8000806:	4603      	mov	r3, r0
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee7 	bl	80005dc <xtime>
 800080e:	7a7b      	ldrb	r3, [r7, #9]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fee3 	bl	80005dc <xtime>
 8000816:	7a7b      	ldrb	r3, [r7, #9]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fedf 	bl	80005dc <xtime>
 800081e:	4603      	mov	r3, r0
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fedb 	bl	80005dc <xtime>
 8000826:	4603      	mov	r3, r0
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fed7 	bl	80005dc <xtime>
 800082e:	4603      	mov	r3, r0
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fed3 	bl	80005dc <xtime>
 8000836:	7a3b      	ldrb	r3, [r7, #8]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fecf 	bl	80005dc <xtime>
 800083e:	7a3b      	ldrb	r3, [r7, #8]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fecb 	bl	80005dc <xtime>
 8000846:	4603      	mov	r3, r0
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fec7 	bl	80005dc <xtime>
 800084e:	7a3b      	ldrb	r3, [r7, #8]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fec3 	bl	80005dc <xtime>
 8000856:	4603      	mov	r3, r0
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff febf 	bl	80005dc <xtime>
 800085e:	4603      	mov	r3, r0
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff febb 	bl	80005dc <xtime>
 8000866:	4603      	mov	r3, r0
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff feb7 	bl	80005dc <xtime>
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff feb3 	bl	80005dc <xtime>
 8000876:	4603      	mov	r3, r0
 8000878:	461c      	mov	r4, r3
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fead 	bl	80005dc <xtime>
 8000882:	4603      	mov	r3, r0
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fea9 	bl	80005dc <xtime>
 800088a:	4603      	mov	r3, r0
 800088c:	4063      	eors	r3, r4
 800088e:	b2dc      	uxtb	r4, r3
 8000890:	7afb      	ldrb	r3, [r7, #11]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fea2 	bl	80005dc <xtime>
 8000898:	4603      	mov	r3, r0
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe9e 	bl	80005dc <xtime>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe9a 	bl	80005dc <xtime>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4063      	eors	r3, r4
 80008ac:	b2dc      	uxtb	r4, r3
 80008ae:	7abb      	ldrb	r3, [r7, #10]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe93 	bl	80005dc <xtime>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	7abb      	ldrb	r3, [r7, #10]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2dd      	uxtb	r5, r3
 80008c0:	7abb      	ldrb	r3, [r7, #10]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe8a 	bl	80005dc <xtime>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe86 	bl	80005dc <xtime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe82 	bl	80005dc <xtime>
 80008d8:	4603      	mov	r3, r0
 80008da:	406b      	eors	r3, r5
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4063      	eors	r3, r4
 80008e0:	b2dc      	uxtb	r4, r3
 80008e2:	7a7b      	ldrb	r3, [r7, #9]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe79 	bl	80005dc <xtime>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe75 	bl	80005dc <xtime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	7a7b      	ldrb	r3, [r7, #9]
 80008f8:	4053      	eors	r3, r2
 80008fa:	b2dd      	uxtb	r5, r3
 80008fc:	7a7b      	ldrb	r3, [r7, #9]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe6c 	bl	80005dc <xtime>
 8000904:	4603      	mov	r3, r0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe68 	bl	80005dc <xtime>
 800090c:	4603      	mov	r3, r0
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe64 	bl	80005dc <xtime>
 8000914:	4603      	mov	r3, r0
 8000916:	406b      	eors	r3, r5
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4063      	eors	r3, r4
 800091c:	b2dc      	uxtb	r4, r3
 800091e:	7a3b      	ldrb	r3, [r7, #8]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe5b 	bl	80005dc <xtime>
 8000926:	4603      	mov	r3, r0
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe57 	bl	80005dc <xtime>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe53 	bl	80005dc <xtime>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	7a3b      	ldrb	r3, [r7, #8]
 800093c:	4053      	eors	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4063      	eors	r3, r4
 8000942:	b2d9      	uxtb	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
      (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800094c:	7afb      	ldrb	r3, [r7, #11]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe44 	bl	80005dc <xtime>
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe40 	bl	80005dc <xtime>
 800095c:	4603      	mov	r3, r0
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe3c 	bl	80005dc <xtime>
 8000964:	7afb      	ldrb	r3, [r7, #11]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe38 	bl	80005dc <xtime>
 800096c:	4603      	mov	r3, r0
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fe34 	bl	80005dc <xtime>
 8000974:	4603      	mov	r3, r0
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe30 	bl	80005dc <xtime>
 800097c:	4603      	mov	r3, r0
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe2c 	bl	80005dc <xtime>
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe28 	bl	80005dc <xtime>
 800098c:	4603      	mov	r3, r0
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe24 	bl	80005dc <xtime>
 8000994:	4603      	mov	r3, r0
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe20 	bl	80005dc <xtime>
 800099c:	4603      	mov	r3, r0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe1c 	bl	80005dc <xtime>
 80009a4:	7a7b      	ldrb	r3, [r7, #9]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe18 	bl	80005dc <xtime>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe14 	bl	80005dc <xtime>
 80009b4:	7a7b      	ldrb	r3, [r7, #9]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe10 	bl	80005dc <xtime>
 80009bc:	4603      	mov	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe0c 	bl	80005dc <xtime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fe08 	bl	80005dc <xtime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe04 	bl	80005dc <xtime>
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe00 	bl	80005dc <xtime>
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fdfc 	bl	80005dc <xtime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fdf8 	bl	80005dc <xtime>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fdf4 	bl	80005dc <xtime>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdf0 	bl	80005dc <xtime>
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdec 	bl	80005dc <xtime>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fde8 	bl	80005dc <xtime>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fde4 	bl	80005dc <xtime>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	4053      	eors	r3, r2
 8000a1c:	b2dc      	uxtb	r4, r3
 8000a1e:	7abb      	ldrb	r3, [r7, #10]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fddb 	bl	80005dc <xtime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461d      	mov	r5, r3
 8000a2a:	7abb      	ldrb	r3, [r7, #10]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fdd5 	bl	80005dc <xtime>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fdd1 	bl	80005dc <xtime>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	406b      	eors	r3, r5
 8000a3e:	b2dd      	uxtb	r5, r3
 8000a40:	7abb      	ldrb	r3, [r7, #10]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdca 	bl	80005dc <xtime>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fdc6 	bl	80005dc <xtime>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fdc2 	bl	80005dc <xtime>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	406b      	eors	r3, r5
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4063      	eors	r3, r4
 8000a60:	b2dc      	uxtb	r4, r3
 8000a62:	7a7b      	ldrb	r3, [r7, #9]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdb9 	bl	80005dc <xtime>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	7a7b      	ldrb	r3, [r7, #9]
 8000a70:	4053      	eors	r3, r2
 8000a72:	b2dd      	uxtb	r5, r3
 8000a74:	7a7b      	ldrb	r3, [r7, #9]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdb0 	bl	80005dc <xtime>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdac 	bl	80005dc <xtime>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fda8 	bl	80005dc <xtime>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	406b      	eors	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4063      	eors	r3, r4
 8000a94:	b2dc      	uxtb	r4, r3
 8000a96:	7a3b      	ldrb	r3, [r7, #8]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fd9f 	bl	80005dc <xtime>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fd9b 	bl	80005dc <xtime>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	7a3b      	ldrb	r3, [r7, #8]
 8000aac:	4053      	eors	r3, r2
 8000aae:	b2dd      	uxtb	r5, r3
 8000ab0:	7a3b      	ldrb	r3, [r7, #8]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd92 	bl	80005dc <xtime>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fd8e 	bl	80005dc <xtime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd8a 	bl	80005dc <xtime>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	406b      	eors	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4063      	eors	r3, r4
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	460a      	mov	r2, r1
 8000adc:	705a      	strb	r2, [r3, #1]
      (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000ade:	7afb      	ldrb	r3, [r7, #11]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd7b 	bl	80005dc <xtime>
 8000ae6:	7afb      	ldrb	r3, [r7, #11]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd77 	bl	80005dc <xtime>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fd73 	bl	80005dc <xtime>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd6f 	bl	80005dc <xtime>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fd6b 	bl	80005dc <xtime>
 8000b06:	7abb      	ldrb	r3, [r7, #10]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fd67 	bl	80005dc <xtime>
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fd63 	bl	80005dc <xtime>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd5f 	bl	80005dc <xtime>
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd5b 	bl	80005dc <xtime>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fd57 	bl	80005dc <xtime>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd53 	bl	80005dc <xtime>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd4f 	bl	80005dc <xtime>
 8000b3e:	7a7b      	ldrb	r3, [r7, #9]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd4b 	bl	80005dc <xtime>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fd47 	bl	80005dc <xtime>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd43 	bl	80005dc <xtime>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd3f 	bl	80005dc <xtime>
 8000b5e:	7a3b      	ldrb	r3, [r7, #8]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd3b 	bl	80005dc <xtime>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fd37 	bl	80005dc <xtime>
 8000b6e:	7a3b      	ldrb	r3, [r7, #8]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd33 	bl	80005dc <xtime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fd2f 	bl	80005dc <xtime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd2b 	bl	80005dc <xtime>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd27 	bl	80005dc <xtime>
 8000b8e:	7afb      	ldrb	r3, [r7, #11]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fd23 	bl	80005dc <xtime>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd1f 	bl	80005dc <xtime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	7afb      	ldrb	r3, [r7, #11]
 8000ba4:	4053      	eors	r3, r2
 8000ba6:	b2dc      	uxtb	r4, r3
 8000ba8:	7afb      	ldrb	r3, [r7, #11]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd16 	bl	80005dc <xtime>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd12 	bl	80005dc <xtime>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd0e 	bl	80005dc <xtime>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4063      	eors	r3, r4
 8000bc4:	b2dc      	uxtb	r4, r3
 8000bc6:	7abb      	ldrb	r3, [r7, #10]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd07 	bl	80005dc <xtime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd03 	bl	80005dc <xtime>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fcff 	bl	80005dc <xtime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	7abb      	ldrb	r3, [r7, #10]
 8000be4:	4053      	eors	r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4063      	eors	r3, r4
 8000bea:	b2dc      	uxtb	r4, r3
 8000bec:	7a7b      	ldrb	r3, [r7, #9]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcf4 	bl	80005dc <xtime>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	7a7b      	ldrb	r3, [r7, #9]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fcee 	bl	80005dc <xtime>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fcea 	bl	80005dc <xtime>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	406b      	eors	r3, r5
 8000c0c:	b2dd      	uxtb	r5, r3
 8000c0e:	7a7b      	ldrb	r3, [r7, #9]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fce3 	bl	80005dc <xtime>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fcdf 	bl	80005dc <xtime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fcdb 	bl	80005dc <xtime>
 8000c26:	4603      	mov	r3, r0
 8000c28:	406b      	eors	r3, r5
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4063      	eors	r3, r4
 8000c2e:	b2dc      	uxtb	r4, r3
 8000c30:	7a3b      	ldrb	r3, [r7, #8]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fcd2 	bl	80005dc <xtime>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	7a3b      	ldrb	r3, [r7, #8]
 8000c3e:	4053      	eors	r3, r2
 8000c40:	b2dd      	uxtb	r5, r3
 8000c42:	7a3b      	ldrb	r3, [r7, #8]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcc9 	bl	80005dc <xtime>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fcc5 	bl	80005dc <xtime>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fcc1 	bl	80005dc <xtime>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	406b      	eors	r3, r5
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4063      	eors	r3, r4
 8000c62:	b2d9      	uxtb	r1, r3
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	709a      	strb	r2, [r3, #2]
      (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fcb2 	bl	80005dc <xtime>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fcae 	bl	80005dc <xtime>
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fcaa 	bl	80005dc <xtime>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fca6 	bl	80005dc <xtime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fca2 	bl	80005dc <xtime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fc9e 	bl	80005dc <xtime>
 8000ca0:	7abb      	ldrb	r3, [r7, #10]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc9a 	bl	80005dc <xtime>
 8000ca8:	7abb      	ldrb	r3, [r7, #10]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc96 	bl	80005dc <xtime>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fc92 	bl	80005dc <xtime>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc8e 	bl	80005dc <xtime>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fc8a 	bl	80005dc <xtime>
 8000cc8:	7a7b      	ldrb	r3, [r7, #9]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fc86 	bl	80005dc <xtime>
 8000cd0:	7a7b      	ldrb	r3, [r7, #9]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fc82 	bl	80005dc <xtime>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fc7e 	bl	80005dc <xtime>
 8000ce0:	7a7b      	ldrb	r3, [r7, #9]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc7a 	bl	80005dc <xtime>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc76 	bl	80005dc <xtime>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc72 	bl	80005dc <xtime>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc6e 	bl	80005dc <xtime>
 8000d00:	7a3b      	ldrb	r3, [r7, #8]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc6a 	bl	80005dc <xtime>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fc66 	bl	80005dc <xtime>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fc62 	bl	80005dc <xtime>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc5e 	bl	80005dc <xtime>
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fc5a 	bl	80005dc <xtime>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4053      	eors	r3, r2
 8000d30:	b2dc      	uxtb	r4, r3
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fc51 	bl	80005dc <xtime>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fc4d 	bl	80005dc <xtime>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fc49 	bl	80005dc <xtime>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4063      	eors	r3, r4
 8000d4e:	b2dc      	uxtb	r4, r3
 8000d50:	7abb      	ldrb	r3, [r7, #10]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fc42 	bl	80005dc <xtime>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fc3e 	bl	80005dc <xtime>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	4053      	eors	r3, r2
 8000d68:	b2dd      	uxtb	r5, r3
 8000d6a:	7abb      	ldrb	r3, [r7, #10]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fc35 	bl	80005dc <xtime>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fc31 	bl	80005dc <xtime>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fc2d 	bl	80005dc <xtime>
 8000d82:	4603      	mov	r3, r0
 8000d84:	406b      	eors	r3, r5
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4063      	eors	r3, r4
 8000d8a:	b2dc      	uxtb	r4, r3
 8000d8c:	7a7b      	ldrb	r3, [r7, #9]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fc24 	bl	80005dc <xtime>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fc20 	bl	80005dc <xtime>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc1c 	bl	80005dc <xtime>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	7a7b      	ldrb	r3, [r7, #9]
 8000daa:	4053      	eors	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4063      	eors	r3, r4
 8000db0:	b2dc      	uxtb	r4, r3
 8000db2:	7a3b      	ldrb	r3, [r7, #8]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc11 	bl	80005dc <xtime>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	7a3b      	ldrb	r3, [r7, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fc0b 	bl	80005dc <xtime>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fc07 	bl	80005dc <xtime>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	406b      	eors	r3, r5
 8000dd2:	b2dd      	uxtb	r5, r3
 8000dd4:	7a3b      	ldrb	r3, [r7, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc00 	bl	80005dc <xtime>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fbfc 	bl	80005dc <xtime>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbf8 	bl	80005dc <xtime>
 8000dec:	4603      	mov	r3, r0
 8000dee:	406b      	eors	r3, r5
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4063      	eors	r3, r4
 8000df4:	b2d9      	uxtb	r1, r3
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	460a      	mov	r2, r1
 8000e00:	70da      	strb	r2, [r3, #3]
   for(i = 0; i < 4; ++i)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	f77f acc0 	ble.w	8000790 <InvMixColumns+0xe>
   }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e1c <InvSubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t *state)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
   uint8_t i, j;
   for(i = 0; i < 4; ++i)
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e01d      	b.n	8000e66 <InvSubBytes+0x4a>
   {
      for(j = 0; j < 4; ++j)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73bb      	strb	r3, [r7, #14]
 8000e2e:	e014      	b.n	8000e5a <InvSubBytes+0x3e>
      {
         (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000e30:	7bba      	ldrb	r2, [r7, #14]
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	440a      	add	r2, r1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	7bba      	ldrb	r2, [r7, #14]
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	490d      	ldr	r1, [pc, #52]	; (8000e7c <InvSubBytes+0x60>)
 8000e46:	5c08      	ldrb	r0, [r1, r0]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	440a      	add	r2, r1
 8000e4e:	4413      	add	r3, r2
 8000e50:	4602      	mov	r2, r0
 8000e52:	701a      	strb	r2, [r3, #0]
      for(j = 0; j < 4; ++j)
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73bb      	strb	r3, [r7, #14]
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d9e7      	bls.n	8000e30 <InvSubBytes+0x14>
   for(i = 0; i < 4; ++i)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d9de      	bls.n	8000e2a <InvSubBytes+0xe>
      }
   }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	0800e770 	.word	0x0800e770

08000e80 <InvShiftRows>:

static void InvShiftRows(state_t *state)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
   uint8_t temp;

   // Rotate first row 1 columns to right
   temp           = (*state)[3][1];
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7b5b      	ldrb	r3, [r3, #13]
 8000e8c:	73fb      	strb	r3, [r7, #15]
   (*state)[3][1] = (*state)[2][1];
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a5a      	ldrb	r2, [r3, #9]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	735a      	strb	r2, [r3, #13]
   (*state)[2][1] = (*state)[1][1];
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795a      	ldrb	r2, [r3, #5]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	725a      	strb	r2, [r3, #9]
   (*state)[1][1] = (*state)[0][1];
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	785a      	ldrb	r2, [r3, #1]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	715a      	strb	r2, [r3, #5]
   (*state)[0][1] = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	705a      	strb	r2, [r3, #1]

   // Rotate second row 2 columns to right
   temp           = (*state)[0][2];
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	73fb      	strb	r3, [r7, #15]
   (*state)[0][2] = (*state)[2][2];
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7a9a      	ldrb	r2, [r3, #10]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	709a      	strb	r2, [r3, #2]
   (*state)[2][2] = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	729a      	strb	r2, [r3, #10]

   temp           = (*state)[1][2];
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	799b      	ldrb	r3, [r3, #6]
 8000ec4:	73fb      	strb	r3, [r7, #15]
   (*state)[1][2] = (*state)[3][2];
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b9a      	ldrb	r2, [r3, #14]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	719a      	strb	r2, [r3, #6]
   (*state)[3][2] = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	739a      	strb	r2, [r3, #14]

   // Rotate third row 3 columns to right
   temp           = (*state)[0][3];
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	78db      	ldrb	r3, [r3, #3]
 8000ed8:	73fb      	strb	r3, [r7, #15]
   (*state)[0][3] = (*state)[1][3];
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	79da      	ldrb	r2, [r3, #7]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	70da      	strb	r2, [r3, #3]
   (*state)[1][3] = (*state)[2][3];
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7ada      	ldrb	r2, [r3, #11]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	71da      	strb	r2, [r3, #7]
   (*state)[2][3] = (*state)[3][3];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7bda      	ldrb	r2, [r3, #15]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	72da      	strb	r2, [r3, #11]
   (*state)[3][3] = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	73da      	strb	r2, [r3, #15]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t *state, uint8_t *RoundKey)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
   uint8_t round = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]

   // Add the First round key to the state before starting the rounds.
   AddRoundKey(0, state, RoundKey);
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fab0 	bl	800047c <AddRoundKey>

   // There will be Nr rounds.
   // The first Nr-1 rounds are identical.
   // These Nr rounds are executed in the loop below.
   // Last one without MixColumns()
   for(round = 1;; ++round)
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
   {
      SubBytes(state);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fae7 	bl	80004f4 <SubBytes>
      ShiftRows(state);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fb16 	bl	8000558 <ShiftRows>
      if(round == Nr)
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d00c      	beq.n	8000f4c <Cipher+0x48>
      {
         break;
      }
      MixColumns(state);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fb70 	bl	8000618 <MixColumns>
      AddRoundKey(round, state, RoundKey);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa9c 	bl	800047c <AddRoundKey>
   for(round = 1;; ++round)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
      SubBytes(state);
 8000f4a:	e7e9      	b.n	8000f20 <Cipher+0x1c>
         break;
 8000f4c:	bf00      	nop
   }
   // Add round key to last round
   AddRoundKey(Nr, state, RoundKey);
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	200a      	movs	r0, #10
 8000f54:	f7ff fa92 	bl	800047c <AddRoundKey>
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <InvCipher>:

#if(defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t *state, uint8_t *RoundKey)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
   uint8_t round = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]

   // Add the First round key to the state before starting the rounds.
   AddRoundKey(Nr, state, RoundKey);
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	200a      	movs	r0, #10
 8000f74:	f7ff fa82 	bl	800047c <AddRoundKey>

   // There will be Nr rounds.
   // The first Nr-1 rounds are identical.
   // These Nr rounds are executed in the loop below.
   // Last one without InvMixColumn()
   for(round = (Nr - 1);; --round)
 8000f78:	2309      	movs	r3, #9
 8000f7a:	73fb      	strb	r3, [r7, #15]
   {
      InvShiftRows(state);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff7f 	bl	8000e80 <InvShiftRows>
      InvSubBytes(state);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff4a 	bl	8000e1c <InvSubBytes>
      AddRoundKey(round, state, RoundKey);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa74 	bl	800047c <AddRoundKey>
      if(round == 0)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <InvCipher+0x48>
      {
         break;
      }
      InvMixColumns(state);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fbf1 	bl	8000782 <InvMixColumns>
   for(round = (Nr - 1);; --round)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
      InvShiftRows(state);
 8000fa6:	e7e9      	b.n	8000f7c <InvCipher+0x1c>
         break;
 8000fa8:	bf00      	nop
   }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <AES_ECB_encrypt>:
/* Public functions:                                                         */
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)

void AES_ECB_encrypt(AES_ctx *ctx, uint8_t *buf)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
   // The next function call encrypts the PlainText with the Key using AES algorithm.
   Cipher((state_t *)buf, ctx->RoundKey);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f7ff ff9f 	bl	8000f04 <Cipher>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <AES_ECB_decrypt>:

void AES_ECB_decrypt(AES_ctx *ctx, uint8_t *buf)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
   // The next function call decrypts the PlainText with the Key using AES algorithm.
   InvCipher((state_t *)buf, ctx->RoundKey);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f7ff ffbf 	bl	8000f60 <InvCipher>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <BUT_Handle>:
                                                    { BUT_STATE_PRESS, BUT_STATE_IDLE, BUT_EVENT_END_PRESS },
                                                    { BUT_STATE_DEBOUNCE, BUT_STATE_IDLE, BUT_EVENT_ERROR } };
BUTFunction_TypeDef BUTFunctionsTable[]         = { { BUT_IdleFunction }, { BUT_DebounceFunction }, { BUT_PressFunction } };

void BUT_Handle(BUT_TypeDef *Button)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
   BUT_ChangeState(Button);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f881 	bl	80010fc <BUT_ChangeState>
   if(BUTFunctionsTable[Button->State].BUTFunction != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <BUT_Handle+0x38>)
 8001002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <BUT_Handle+0x2e>
   {
      BUTFunctionsTable[Button->State].BUTFunction(Button);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <BUT_Handle+0x38>)
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	4798      	blx	r3
   }
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c

08001028 <BUT_RegisterCallback>:
void BUT_RegisterCallback(BUT_TypeDef *Button, void *Callback)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
   if(Callback != NULL)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <BUT_RegisterCallback+0x16>
   {
      Button->ButtonCallback = Callback;
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	615a      	str	r2, [r3, #20]
   }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <BUT_IdleFunction>:
static void BUT_IdleFunction(BUT_TypeDef *Button)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   if(HAL_GPIO_ReadPin(Button->GPIO, Button->Pin) == GPIO_PIN_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	899b      	ldrh	r3, [r3, #12]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f003 f935 	bl	80042cc <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <BUT_IdleFunction+0x2a>
   {
      Button->Cnt      = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
      Button->NewEvent = BUT_EVENT_DEBOUNCE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	705a      	strb	r2, [r3, #1]
   }
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <BUT_DebounceFunction>:
static void BUT_DebounceFunction(BUT_TypeDef *Button)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
   Button->Cnt++;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	605a      	str	r2, [r3, #4]
   if(Button->Cnt > BUTTON_DEBOUNCE_TIME)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b05      	cmp	r3, #5
 8001094:	d911      	bls.n	80010ba <BUT_DebounceFunction+0x3e>
   {
      if(HAL_GPIO_ReadPin(Button->GPIO, Button->Pin) == GPIO_PIN_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	899b      	ldrh	r3, [r3, #12]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f003 f913 	bl	80042cc <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <BUT_DebounceFunction+0x38>
      {
         Button->NewEvent = BUT_EVENT_PRESS;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	705a      	strb	r2, [r3, #1]
      else
      {
         Button->NewEvent = BUT_EVENT_ERROR;
      }
   }
}
 80010b2:	e002      	b.n	80010ba <BUT_DebounceFunction+0x3e>
         Button->NewEvent = BUT_EVENT_ERROR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	705a      	strb	r2, [r3, #1]
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <BUT_PressFunction>:
static void BUT_PressFunction(BUT_TypeDef *Button)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   if(HAL_GPIO_ReadPin(Button->GPIO, Button->Pin) == GPIO_PIN_SET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	899b      	ldrh	r3, [r3, #12]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f003 f8f9 	bl	80042cc <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d109      	bne.n	80010f4 <BUT_PressFunction+0x32>
   {
      if(Button->ButtonCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <BUT_PressFunction+0x2c>
      {
         Button->ButtonCallback();
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4798      	blx	r3
      }
      Button->NewEvent = BUT_EVENT_END_PRESS;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	705a      	strb	r2, [r3, #1]
   }
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <BUT_ChangeState>:
static void BUT_ChangeState(BUT_TypeDef *Button)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
   for(int i = 0; i < BUT_TRANSITION_TABLE_SIZE; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e027      	b.n	800115a <BUT_ChangeState+0x5e>
   {
      if(BUTTransitionTable[i].Source == Button->State && BUTTransitionTable[i].Event == Button->NewEvent)
 800110a:	4919      	ldr	r1, [pc, #100]	; (8001170 <BUT_ChangeState+0x74>)
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	440b      	add	r3, r1
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d119      	bne.n	8001154 <BUT_ChangeState+0x58>
 8001120:	4913      	ldr	r1, [pc, #76]	; (8001170 <BUT_ChangeState+0x74>)
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	440b      	add	r3, r1
 800112c:	3302      	adds	r3, #2
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	429a      	cmp	r2, r3
 8001136:	d10d      	bne.n	8001154 <BUT_ChangeState+0x58>
      {
         Button->State    = BUTTransitionTable[i].Destination;
 8001138:	490d      	ldr	r1, [pc, #52]	; (8001170 <BUT_ChangeState+0x74>)
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	3301      	adds	r3, #1
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	701a      	strb	r2, [r3, #0]
         Button->NewEvent = BUT_EVENT_NOTHING;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	705a      	strb	r2, [r3, #1]
         return;
 8001152:	e008      	b.n	8001166 <BUT_ChangeState+0x6a>
   for(int i = 0; i < BUT_TRANSITION_TABLE_SIZE; i++)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d9d4      	bls.n	800110a <BUT_ChangeState+0xe>
      }
   }
   Button->NewEvent = BUT_EVENT_NOTHING;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	705a      	strb	r2, [r3, #1]
}
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	20000000 	.word	0x20000000

08001174 <ButtonsConfig>:

#include "Data.h"
#include "stdio.h"

void ButtonsConfig(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
   DATA_GetButPtr(BUTTON_UP)->ButtonCallback = NULL;
 8001178:	2000      	movs	r0, #0
 800117a:	f000 f91b 	bl	80013b4 <DATA_GetButPtr>
 800117e:	4603      	mov	r3, r0
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_UP)->Cnt            = 0;
 8001184:	2000      	movs	r0, #0
 8001186:	f000 f915 	bl	80013b4 <DATA_GetButPtr>
 800118a:	4603      	mov	r3, r0
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_UP)->GPIO           = BUTTON_UP_GPIO_Port;
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f90f 	bl	80013b4 <DATA_GetButPtr>
 8001196:	4603      	mov	r3, r0
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <ButtonsConfig+0x170>)
 800119a:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_UP)->NewEvent       = BUT_EVENT_NOTHING;
 800119c:	2000      	movs	r0, #0
 800119e:	f000 f909 	bl	80013b4 <DATA_GetButPtr>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2200      	movs	r2, #0
 80011a6:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_UP)->Pin            = BUTTON_UP_Pin;
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f903 	bl	80013b4 <DATA_GetButPtr>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2208      	movs	r2, #8
 80011b2:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_UP)->State          = BUT_STATE_IDLE;
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f8fd 	bl	80013b4 <DATA_GetButPtr>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_LEFT)->ButtonCallback = NULL;
 80011c0:	2001      	movs	r0, #1
 80011c2:	f000 f8f7 	bl	80013b4 <DATA_GetButPtr>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_LEFT)->Cnt            = 0;
 80011cc:	2001      	movs	r0, #1
 80011ce:	f000 f8f1 	bl	80013b4 <DATA_GetButPtr>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_LEFT)->GPIO           = BUTTON_LEFT_GPIO_Port;
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 f8eb 	bl	80013b4 <DATA_GetButPtr>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a40      	ldr	r2, [pc, #256]	; (80012e4 <ButtonsConfig+0x170>)
 80011e2:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_LEFT)->NewEvent       = BUT_EVENT_NOTHING;
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 f8e5 	bl	80013b4 <DATA_GetButPtr>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_LEFT)->Pin            = BUTTON_LEFT_Pin;
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 f8df 	bl	80013b4 <DATA_GetButPtr>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_LEFT)->State          = BUT_STATE_IDLE;
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 f8d9 	bl	80013b4 <DATA_GetButPtr>
 8001202:	4603      	mov	r3, r0
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_RIGHT)->ButtonCallback = NULL;
 8001208:	2002      	movs	r0, #2
 800120a:	f000 f8d3 	bl	80013b4 <DATA_GetButPtr>
 800120e:	4603      	mov	r3, r0
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_RIGHT)->Cnt            = 0;
 8001214:	2002      	movs	r0, #2
 8001216:	f000 f8cd 	bl	80013b4 <DATA_GetButPtr>
 800121a:	4603      	mov	r3, r0
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_RIGHT)->GPIO           = BUTTON_RIGHT_GPIO_Port;
 8001220:	2002      	movs	r0, #2
 8001222:	f000 f8c7 	bl	80013b4 <DATA_GetButPtr>
 8001226:	4603      	mov	r3, r0
 8001228:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <ButtonsConfig+0x170>)
 800122a:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_RIGHT)->NewEvent       = BUT_EVENT_NOTHING;
 800122c:	2002      	movs	r0, #2
 800122e:	f000 f8c1 	bl	80013b4 <DATA_GetButPtr>
 8001232:	4603      	mov	r3, r0
 8001234:	2200      	movs	r2, #0
 8001236:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_RIGHT)->Pin            = BUTTON_RIGHT_Pin;
 8001238:	2002      	movs	r0, #2
 800123a:	f000 f8bb 	bl	80013b4 <DATA_GetButPtr>
 800123e:	4603      	mov	r3, r0
 8001240:	2210      	movs	r2, #16
 8001242:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_RIGHT)->State          = BUT_STATE_IDLE;
 8001244:	2002      	movs	r0, #2
 8001246:	f000 f8b5 	bl	80013b4 <DATA_GetButPtr>
 800124a:	4603      	mov	r3, r0
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_DOWN)->ButtonCallback = NULL;
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8af 	bl	80013b4 <DATA_GetButPtr>
 8001256:	4603      	mov	r3, r0
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_DOWN)->Cnt            = 0;
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f8a9 	bl	80013b4 <DATA_GetButPtr>
 8001262:	4603      	mov	r3, r0
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_DOWN)->GPIO           = BUTTON_DOWN_GPIO_Port;
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f8a3 	bl	80013b4 <DATA_GetButPtr>
 800126e:	4603      	mov	r3, r0
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <ButtonsConfig+0x170>)
 8001272:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_DOWN)->NewEvent       = BUT_EVENT_NOTHING;
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f89d 	bl	80013b4 <DATA_GetButPtr>
 800127a:	4603      	mov	r3, r0
 800127c:	2200      	movs	r2, #0
 800127e:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_DOWN)->Pin            = BUTTON_DOWN_Pin;
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f897 	bl	80013b4 <DATA_GetButPtr>
 8001286:	4603      	mov	r3, r0
 8001288:	2220      	movs	r2, #32
 800128a:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_DOWN)->State          = BUT_STATE_IDLE;
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f891 	bl	80013b4 <DATA_GetButPtr>
 8001292:	4603      	mov	r3, r0
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_OK)->ButtonCallback = NULL;
 8001298:	2004      	movs	r0, #4
 800129a:	f000 f88b 	bl	80013b4 <DATA_GetButPtr>
 800129e:	4603      	mov	r3, r0
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_OK)->Cnt            = 0;
 80012a4:	2004      	movs	r0, #4
 80012a6:	f000 f885 	bl	80013b4 <DATA_GetButPtr>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_OK)->GPIO           = BUTTON_OK_GPIO_Port;
 80012b0:	2004      	movs	r0, #4
 80012b2:	f000 f87f 	bl	80013b4 <DATA_GetButPtr>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <ButtonsConfig+0x170>)
 80012ba:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_OK)->NewEvent       = BUT_EVENT_NOTHING;
 80012bc:	2004      	movs	r0, #4
 80012be:	f000 f879 	bl	80013b4 <DATA_GetButPtr>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_OK)->Pin            = BUTTON_OK_Pin;
 80012c8:	2004      	movs	r0, #4
 80012ca:	f000 f873 	bl	80013b4 <DATA_GetButPtr>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_OK)->State          = BUT_STATE_IDLE;
 80012d4:	2004      	movs	r0, #4
 80012d6:	f000 f86d 	bl	80013b4 <DATA_GetButPtr>
 80012da:	4603      	mov	r3, r0
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	48000400 	.word	0x48000400

080012e8 <Crc>:
 */
#include "crc.h"
#include "main.h"
const uint32_t RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
   uint8_t k = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	77fb      	strb	r3, [r7, #31]
   PreviuseCRC ^= data[0];
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4053      	eors	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e038      	b.n	800137c <Crc+0x94>
   {
      uint32_t temp = data[i];
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]
      if(temp == 0x00000000)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d112      	bne.n	8001340 <Crc+0x58>
      {
         temp = RandomNumber[k % 12];
 800131a:	7ffa      	ldrb	r2, [r7, #31]
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <Crc+0xac>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <Crc+0xb0>)
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	617b      	str	r3, [r7, #20]
         k++;
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	3301      	adds	r3, #1
 800133e:	77fb      	strb	r3, [r7, #31]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4053      	eors	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
      for(uint8_t BitIndex = 0; BitIndex < 32; BitIndex++)
 8001350:	2300      	movs	r3, #0
 8001352:	74fb      	strb	r3, [r7, #19]
 8001354:	e00c      	b.n	8001370 <Crc+0x88>
      {
         if(PreviuseCRC & 0x80000000)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da03      	bge.n	8001364 <Crc+0x7c>
         {
            PreviuseCRC ^= 0x0BC245C2;
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <Crc+0xb4>)
 8001360:	4053      	eors	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
         }
         PreviuseCRC <<= 1;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
      for(uint8_t BitIndex = 0; BitIndex < 32; BitIndex++)
 800136a:	7cfb      	ldrb	r3, [r7, #19]
 800136c:	3301      	adds	r3, #1
 800136e:	74fb      	strb	r3, [r7, #19]
 8001370:	7cfb      	ldrb	r3, [r7, #19]
 8001372:	2b1f      	cmp	r3, #31
 8001374:	d9ef      	bls.n	8001356 <Crc+0x6e>
   for(uint32_t i = 1; i < DataLength; i++)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3301      	adds	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3c2      	bcc.n	800130a <Crc+0x22>
      }
   }
   return PreviuseCRC;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	aaaaaaab 	.word	0xaaaaaaab
 8001398:	0800e87c 	.word	0x0800e87c
 800139c:	0bc245c2 	.word	0x0bc245c2

080013a0 <DATA_GetSmPtr>:
#include "Buttons.h"
#include "SM.h"
SM_TypeDef Sm                    = { 0 };
BUT_TypeDef But[BUTTONS_QUATITY] = { 0 };
SM_TypeDef *DATA_GetSmPtr(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
   return &Sm;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <DATA_GetSmPtr+0x10>)
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	2000021c 	.word	0x2000021c

080013b4 <DATA_GetButPtr>:
BUT_TypeDef *DATA_GetButPtr(uint8_t ButtonNumber)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
   return &But[ButtonNumber];
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <DATA_GetButPtr+0x24>)
 80013ca:	4413      	add	r3, r2
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20000228 	.word	0x20000228

080013dc <LED_BlinkPoll>:
#include "tim.h"
#include "Supp.h"
#include "SM.h"
#include "WS2812b.h"
void LED_BlinkPoll(uint8_t R, uint8_t G, uint8_t B, uint32_t Quatity, uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	460b      	mov	r3, r1
 80013ea:	71bb      	strb	r3, [r7, #6]
 80013ec:	4613      	mov	r3, r2
 80013ee:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<Quatity;i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e013      	b.n	800141e <LED_BlinkPoll+0x42>
	{
		WS2812_SetPixel(R, G, B);
 80013f6:	797a      	ldrb	r2, [r7, #5]
 80013f8:	79b9      	ldrb	r1, [r7, #6]
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fe93 	bl	8002128 <WS2812_SetPixel>
		HAL_Delay(Delay);
 8001402:	69b8      	ldr	r0, [r7, #24]
 8001404:	f002 f8f0 	bl	80035e8 <HAL_Delay>
		WS2812_SetPixel(0, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2000      	movs	r0, #0
 800140e:	f000 fe8b 	bl	8002128 <WS2812_SetPixel>
		HAL_Delay(Delay);
 8001412:	69b8      	ldr	r0, [r7, #24]
 8001414:	f002 f8e8 	bl	80035e8 <HAL_Delay>
	for(int i=0;i<Quatity;i++)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3301      	adds	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d8e7      	bhi.n	80013f6 <LED_BlinkPoll+0x1a>
	}
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <SM_Handle>:
flash_t Flash                                 = { 0 };
fram_t Fram                                   = { 0 };
extern USBD_HandleTypeDef hUsbDeviceFS;
extern uint8_t UsbHidKeyboardReportBuffer[8];
void SM_Handle(void)
{
 8001430:	b598      	push	{r3, r4, r7, lr}
 8001432:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - DATA_GetSmPtr()->LastTick > 10)
 8001434:	f002 f8cc 	bl	80035d0 <HAL_GetTick>
 8001438:	4604      	mov	r4, r0
 800143a:	f7ff ffb1 	bl	80013a0 <DATA_GetSmPtr>
 800143e:	4603      	mov	r3, r0
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	1ae3      	subs	r3, r4, r3
 8001444:	2b0a      	cmp	r3, #10
 8001446:	d91b      	bls.n	8001480 <SM_Handle+0x50>
   {
      SM_ChangeState();
 8001448:	f000 f8b2 	bl	80015b0 <SM_ChangeState>
      DATA_GetSmPtr()->LastTick = HAL_GetTick();
 800144c:	f7ff ffa8 	bl	80013a0 <DATA_GetSmPtr>
 8001450:	4604      	mov	r4, r0
 8001452:	f002 f8bd 	bl	80035d0 <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	60a3      	str	r3, [r4, #8]
      if(SMFunctionsTable[DATA_GetSmPtr()->State].SMFunction != NULL)
 800145a:	f7ff ffa1 	bl	80013a0 <DATA_GetSmPtr>
 800145e:	4603      	mov	r3, r0
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <SM_Handle+0x54>)
 8001466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <SM_Handle+0x50>
      {
         SMFunctionsTable[DATA_GetSmPtr()->State].SMFunction();
 800146e:	f7ff ff97 	bl	80013a0 <DATA_GetSmPtr>
 8001472:	4603      	mov	r3, r0
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <SM_Handle+0x54>)
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	4798      	blx	r3
      }
   }
}
 8001480:	bf00      	nop
 8001482:	bd98      	pop	{r3, r4, r7, pc}
 8001484:	20000024 	.word	0x20000024

08001488 <SM_InitializeFunction>:
void SM_InitializeFunction(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af04      	add	r7, sp, #16
   ssd1331_init(&hspi1);
 800148e:	482d      	ldr	r0, [pc, #180]	; (8001544 <SM_InitializeFunction+0xbc>)
 8001490:	f000 fa38 	bl	8001904 <ssd1331_init>
   GFX_SetFont(font_8x5);
 8001494:	482c      	ldr	r0, [pc, #176]	; (8001548 <SM_InitializeFunction+0xc0>)
 8001496:	f000 ff99 	bl	80023cc <GFX_SetFont>
   ButtonsConfig();
 800149a:	f7ff fe6b 	bl	8001174 <ButtonsConfig>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_UP), BUT_ButtonUpCallback);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff ff88 	bl	80013b4 <DATA_GetButPtr>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4929      	ldr	r1, [pc, #164]	; (800154c <SM_InitializeFunction+0xc4>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fdbd 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_RIGHT), BUT_ButtonRightCallback);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f7ff ff80 	bl	80013b4 <DATA_GetButPtr>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4926      	ldr	r1, [pc, #152]	; (8001550 <SM_InitializeFunction+0xc8>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fdb5 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_LEFT), BUT_ButtonLeftCallback);
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff ff78 	bl	80013b4 <DATA_GetButPtr>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4923      	ldr	r1, [pc, #140]	; (8001554 <SM_InitializeFunction+0xcc>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fdad 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_DOWN), BUT_ButtonDownCallback);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f7ff ff70 	bl	80013b4 <DATA_GetButPtr>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4920      	ldr	r1, [pc, #128]	; (8001558 <SM_InitializeFunction+0xd0>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fda5 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_OK), BUT_ButtonOkCallback);
 80014de:	2004      	movs	r0, #4
 80014e0:	f7ff ff68 	bl	80013b4 <DATA_GetButPtr>
 80014e4:	4603      	mov	r3, r0
 80014e6:	491d      	ldr	r1, [pc, #116]	; (800155c <SM_InitializeFunction+0xd4>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fd9d 	bl	8001028 <BUT_RegisterCallback>
   flash_Init(&Flash, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS);
 80014ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014f6:	4913      	ldr	r1, [pc, #76]	; (8001544 <SM_InitializeFunction+0xbc>)
 80014f8:	4819      	ldr	r0, [pc, #100]	; (8001560 <SM_InitializeFunction+0xd8>)
 80014fa:	f001 f9e7 	bl	80028cc <flash_Init>
   fram_Init(&Fram, &hspi1, NULL, FRAM_CS_GPIO_Port, NULL, 0, FRAM_CS_Pin, 0);
 80014fe:	2300      	movs	r3, #0
 8001500:	9303      	str	r3, [sp, #12]
 8001502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	2300      	movs	r3, #0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001514:	2200      	movs	r2, #0
 8001516:	490b      	ldr	r1, [pc, #44]	; (8001544 <SM_InitializeFunction+0xbc>)
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <SM_InitializeFunction+0xdc>)
 800151a:	f001 fb63 	bl	8002be4 <fram_Init>
   SUPP_AES_Init();
 800151e:	f000 fc03 	bl	8001d28 <SUPP_AES_Init>
   LED_BlinkPoll(10, 150, 15, 5, 100);
 8001522:	2364      	movs	r3, #100	; 0x64
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2305      	movs	r3, #5
 8001528:	220f      	movs	r2, #15
 800152a:	2196      	movs	r1, #150	; 0x96
 800152c:	200a      	movs	r0, #10
 800152e:	f7ff ff55 	bl	80013dc <LED_BlinkPoll>
   DATA_GetSmPtr()->NewEvent = SM_EVENT_END_INIT;
 8001532:	f7ff ff35 	bl	80013a0 <DATA_GetSmPtr>
 8001536:	4603      	mov	r3, r0
 8001538:	2201      	movs	r2, #1
 800153a:	705a      	strb	r2, [r3, #1]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200046d0 	.word	0x200046d0
 8001548:	0800e8ac 	.word	0x0800e8ac
 800154c:	08001639 	.word	0x08001639
 8001550:	08001665 	.word	0x08001665
 8001554:	08001691 	.word	0x08001691
 8001558:	080016b7 	.word	0x080016b7
 800155c:	080016e9 	.word	0x080016e9
 8001560:	200002a0 	.word	0x200002a0
 8001564:	200002b0 	.word	0x200002b0

08001568 <SM_IdleFunction>:
void SM_IdleFunction(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
   SUPP_ButtonOffFlagTask();
 800156e:	f000 fafb 	bl	8001b68 <SUPP_ButtonOffFlagTask>
   for(int i = 0; i < BUTTONS_QUATITY; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	e00b      	b.n	8001590 <SM_IdleFunction+0x28>
   {
      BUT_Handle(DATA_GetButPtr(i));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff19 	bl	80013b4 <DATA_GetButPtr>
 8001582:	4603      	mov	r3, r0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fd31 	bl	8000fec <BUT_Handle>
   for(int i = 0; i < BUTTONS_QUATITY; i++)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b04      	cmp	r3, #4
 8001594:	ddf0      	ble.n	8001578 <SM_IdleFunction+0x10>
   }
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <SM_RunningFunction>:
void SM_RunningFunction(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <SM_ChangeState>:
static void SM_ChangeState(void)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	e02f      	b.n	800161c <SM_ChangeState+0x6c>
   {
      if(SMTransitionTable[i].Source == DATA_GetSmPtr()->State && SMTransitionTable[i].Event == DATA_GetSmPtr()->NewEvent)
 80015bc:	491d      	ldr	r1, [pc, #116]	; (8001634 <SM_ChangeState+0x84>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	781c      	ldrb	r4, [r3, #0]
 80015ca:	f7ff fee9 	bl	80013a0 <DATA_GetSmPtr>
 80015ce:	4603      	mov	r3, r0
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	429c      	cmp	r4, r3
 80015d4:	d11f      	bne.n	8001616 <SM_ChangeState+0x66>
 80015d6:	4917      	ldr	r1, [pc, #92]	; (8001634 <SM_ChangeState+0x84>)
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	3302      	adds	r3, #2
 80015e4:	781c      	ldrb	r4, [r3, #0]
 80015e6:	f7ff fedb 	bl	80013a0 <DATA_GetSmPtr>
 80015ea:	4603      	mov	r3, r0
 80015ec:	785b      	ldrb	r3, [r3, #1]
 80015ee:	429c      	cmp	r4, r3
 80015f0:	d111      	bne.n	8001616 <SM_ChangeState+0x66>
      {
         DATA_GetSmPtr()->State    = SMTransitionTable[i].Destination;
 80015f2:	f7ff fed5 	bl	80013a0 <DATA_GetSmPtr>
 80015f6:	4601      	mov	r1, r0
 80015f8:	480e      	ldr	r0, [pc, #56]	; (8001634 <SM_ChangeState+0x84>)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	4403      	add	r3, r0
 8001604:	3301      	adds	r3, #1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	700b      	strb	r3, [r1, #0]
         DATA_GetSmPtr()->NewEvent = SM_EVENT_NOTHING;
 800160a:	f7ff fec9 	bl	80013a0 <DATA_GetSmPtr>
 800160e:	4603      	mov	r3, r0
 8001610:	2200      	movs	r2, #0
 8001612:	705a      	strb	r2, [r3, #1]
         return;
 8001614:	e00a      	b.n	800162c <SM_ChangeState+0x7c>
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3301      	adds	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d9cc      	bls.n	80015bc <SM_ChangeState+0xc>
      }
   }
   DATA_GetSmPtr()->NewEvent = SM_EVENT_NOTHING;
 8001622:	f7ff febd 	bl	80013a0 <DATA_GetSmPtr>
 8001626:	4603      	mov	r3, r0
 8001628:	2200      	movs	r2, #0
 800162a:	705a      	strb	r2, [r3, #1]
}
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}
 8001632:	bf00      	nop
 8001634:	20000018 	.word	0x20000018

08001638 <BUT_ButtonUpCallback>:
static void BUT_ButtonUpCallback(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
   WS2812_SetPixel(100, 100, 100);
 800163c:	2264      	movs	r2, #100	; 0x64
 800163e:	2164      	movs	r1, #100	; 0x64
 8001640:	2064      	movs	r0, #100	; 0x64
 8001642:	f000 fd71 	bl	8002128 <WS2812_SetPixel>
   DATA_GetSmPtr()->Flags.FlagsBits.UpButtonFlag = SM_FLAG_SET;
 8001646:	f7ff feab 	bl	80013a0 <DATA_GetSmPtr>
 800164a:	4602      	mov	r2, r0
 800164c:	7913      	ldrb	r3, [r2, #4]
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	7113      	strb	r3, [r2, #4]
   DATA_GetButPtr(BUTTON_UP)->OffFlagCnt         = 0;
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fead 	bl	80013b4 <DATA_GetButPtr>
 800165a:	4603      	mov	r3, r0
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <BUT_ButtonRightCallback>:
static void BUT_ButtonRightCallback(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
   WS2812_SetPixel(0, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2000      	movs	r0, #0
 800166e:	f000 fd5b 	bl	8002128 <WS2812_SetPixel>
   DATA_GetSmPtr()->Flags.FlagsBits.RightButtonFlag = SM_FLAG_SET;
 8001672:	f7ff fe95 	bl	80013a0 <DATA_GetSmPtr>
 8001676:	4602      	mov	r2, r0
 8001678:	7913      	ldrb	r3, [r2, #4]
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	7113      	strb	r3, [r2, #4]
   DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt         = 0;
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff fe97 	bl	80013b4 <DATA_GetButPtr>
 8001686:	4603      	mov	r3, r0
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <BUT_ButtonLeftCallback>:
static void BUT_ButtonLeftCallback(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
   DATA_GetSmPtr()->Flags.FlagsBits.LeftButtonFlag = SM_FLAG_SET;
 8001694:	f7ff fe84 	bl	80013a0 <DATA_GetSmPtr>
 8001698:	4602      	mov	r2, r0
 800169a:	7913      	ldrb	r3, [r2, #4]
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	7113      	strb	r3, [r2, #4]
   SUPP_ExtFramhMassErase();
 80016a2:	f000 f9ed 	bl	8001a80 <SUPP_ExtFramhMassErase>
   DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt = 0;
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fe84 	bl	80013b4 <DATA_GetButPtr>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <BUT_ButtonDownCallback>:
static void BUT_ButtonDownCallback(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b090      	sub	sp, #64	; 0x40
 80016ba:	af00      	add	r7, sp, #0
   Password_TypeDef Pass;
   DATA_GetSmPtr()->Flags.FlagsBits.DownButtonFlag = SM_FLAG_SET;
 80016bc:	f7ff fe70 	bl	80013a0 <DATA_GetSmPtr>
 80016c0:	4602      	mov	r2, r0
 80016c2:	7913      	ldrb	r3, [r2, #4]
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	7113      	strb	r3, [r2, #4]
   SUPP_ReadPassword(&Pass, 0);
 80016ca:	463b      	mov	r3, r7
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fbc6 	bl	8001e60 <SUPP_ReadPassword>
   DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt = 0;
 80016d4:	2003      	movs	r0, #3
 80016d6:	f7ff fe6d 	bl	80013b4 <DATA_GetButPtr>
 80016da:	4603      	mov	r3, r0
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
}
 80016e0:	bf00      	nop
 80016e2:	3740      	adds	r7, #64	; 0x40
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <BUT_ButtonOkCallback>:
static void BUT_ButtonOkCallback(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
   NewPasswordRules_TypeDef pass;
   pass.NameLength            = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	733b      	strb	r3, [r7, #12]
   uint8_t temp               = 0xff;
 80016f2:	23ff      	movs	r3, #255	; 0xff
 80016f4:	70fb      	strb	r3, [r7, #3]
   pass.Name                  = &temp;
 80016f6:	1cfb      	adds	r3, r7, #3
 80016f8:	60bb      	str	r3, [r7, #8]
   pass.SpecialCharacter      = SM_FLAG_SET;
 80016fa:	2301      	movs	r3, #1
 80016fc:	713b      	strb	r3, [r7, #4]
   pass.SpecialCharacterStart = SM_FLAG_SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	717b      	strb	r3, [r7, #5]
   pass.PasswordLength        = 32;
 8001702:	2320      	movs	r3, #32
 8001704:	71bb      	strb	r3, [r7, #6]
   SUPP_GenerateNewPassword(pass);
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800170c:	f000 fbf0 	bl	8001ef0 <SUPP_GenerateNewPassword>
   DATA_GetSmPtr()->Flags.FlagsBits.OkButtonFlag = SM_FLAG_SET;
 8001710:	f7ff fe46 	bl	80013a0 <DATA_GetSmPtr>
 8001714:	4602      	mov	r2, r0
 8001716:	7913      	ldrb	r3, [r2, #4]
 8001718:	f043 0310 	orr.w	r3, r3, #16
 800171c:	7113      	strb	r3, [r2, #4]
   DATA_GetButPtr(BUTTON_OK)->OffFlagCnt         = 0;
 800171e:	2004      	movs	r0, #4
 8001720:	f7ff fe48 	bl	80013b4 <DATA_GetButPtr>
 8001724:	4603      	mov	r3, r0
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <ssd1331_command>:
SPI_HandleTypeDef *oled_spi;
uint16_t buffor[OLED_HEIGHT * OLED_WIDTH];
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1331_command(uint8_t command)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
   ssd1331_cs_low;
 800173e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001742:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001746:	619a      	str	r2, [r3, #24]
   ssd1331_dc_low;
 8001748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800174c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001750:	619a      	str	r2, [r3, #24]
   HAL_SPI_Transmit(oled_spi, &command, 1, ssd1331_TIMEOUT);
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <ssd1331_command+0x40>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	1df9      	adds	r1, r7, #7
 8001758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175c:	2201      	movs	r2, #1
 800175e:	f005 fc13 	bl	8006f88 <HAL_SPI_Transmit>
   ssd1331_cs_high;
 8001762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001766:	2208      	movs	r2, #8
 8001768:	619a      	str	r2, [r3, #24]
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002cc 	.word	0x200002cc

08001778 <setPixel>:
void setPixel(uint8_t x, uint8_t y, uint16_t color)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	460b      	mov	r3, r1
 8001784:	71bb      	strb	r3, [r7, #6]
 8001786:	4613      	mov	r3, r2
 8001788:	80bb      	strh	r3, [r7, #4]
   if(x > OLED_WIDTH || y > OLED_HEIGHT)
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b60      	cmp	r3, #96	; 0x60
 800178e:	d812      	bhi.n	80017b6 <setPixel+0x3e>
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	2b40      	cmp	r3, #64	; 0x40
 8001794:	d80f      	bhi.n	80017b6 <setPixel+0x3e>
   {
      return;
   }

   buffor[(OLED_HEIGHT * OLED_WIDTH) - (y * 96 + x) - 1] = color;
 8001796:	79ba      	ldrb	r2, [r7, #6]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	015b      	lsls	r3, r3, #5
 80017a0:	461a      	mov	r2, r3
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4413      	add	r3, r2
 80017a6:	f5c3 53bf 	rsb	r3, r3, #6112	; 0x17e0
 80017aa:	331f      	adds	r3, #31
 80017ac:	4905      	ldr	r1, [pc, #20]	; (80017c4 <setPixel+0x4c>)
 80017ae:	88ba      	ldrh	r2, [r7, #4]
 80017b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80017b4:	e000      	b.n	80017b8 <setPixel+0x40>
      return;
 80017b6:	bf00      	nop
}
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200002d0 	.word	0x200002d0

080017c8 <ssd1331_clear>:

void ssd1331_clear()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
   memset(buffor, 0x00, 2 * 6144);
 80017cc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80017d0:	2100      	movs	r1, #0
 80017d2:	4802      	ldr	r0, [pc, #8]	; (80017dc <ssd1331_clear+0x14>)
 80017d4:	f00c fa9a 	bl	800dd0c <memset>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200002d0 	.word	0x200002d0

080017e0 <invert>:
void invert()
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
   for(int i = 0; i < 6144; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	e00c      	b.n	8001806 <invert+0x26>
   {
      buffor[i] = ~buffor[i];
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <invert+0x3c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	b299      	uxth	r1, r3
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <invert+0x3c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 6144; i++)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800180c:	dbee      	blt.n	80017ec <invert+0xc>
   }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	200002d0 	.word	0x200002d0

08001820 <ssd1331_display>:
void ssd1331_display(uint8_t invertflag)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
   if(invertflag)
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <ssd1331_display+0x14>
   {
      invert();
 8001830:	f7ff ffd6 	bl	80017e0 <invert>
   }
   ssd1331_command(SET_COLUMN_ADDRESS);
 8001834:	2015      	movs	r0, #21
 8001836:	f7ff ff7d 	bl	8001734 <ssd1331_command>
   ssd1331_command(0);
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff ff7a 	bl	8001734 <ssd1331_command>
   ssd1331_command(OLED_WIDTH - 1);
 8001840:	205f      	movs	r0, #95	; 0x5f
 8001842:	f7ff ff77 	bl	8001734 <ssd1331_command>
   // set row point
   ssd1331_command(SET_ROW_ADDRESS);
 8001846:	2075      	movs	r0, #117	; 0x75
 8001848:	f7ff ff74 	bl	8001734 <ssd1331_command>
   ssd1331_command(0);
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff ff71 	bl	8001734 <ssd1331_command>
   ssd1331_command(OLED_HEIGHT - 1);
 8001852:	203f      	movs	r0, #63	; 0x3f
 8001854:	f7ff ff6e 	bl	8001734 <ssd1331_command>

   // uint8_t Datafirst;
   // uint8_t Datasecond;
   ssd1331_cs_low;
 8001858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800185c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001860:	619a      	str	r2, [r3, #24]
   ssd1331_dc_high;
 8001862:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001866:	2204      	movs	r2, #4
 8001868:	619a      	str	r2, [r3, #24]
   uint32_t Length = OLED_WIDTH * OLED_HEIGHT, i = 0;
 800186a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
   while(Length > 0U)
 8001874:	e02d      	b.n	80018d2 <ssd1331_display+0xb2>
   {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE))
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <ssd1331_display+0xdc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d125      	bne.n	80018d2 <ssd1331_display+0xb2>
      {
         // Write higher byte of color to DR
         *((__IO uint8_t *)&oled_spi->Instance->DR) = (buffor[i] >> 8);
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <ssd1331_display+0xe0>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <ssd1331_display+0xdc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	330c      	adds	r3, #12
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]
         // Wait for transfer
         while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE) != SET)
 800189e:	e000      	b.n	80018a2 <ssd1331_display+0x82>
         {
            __NOP();
 80018a0:	bf00      	nop
         while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE) != SET)
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <ssd1331_display+0xdc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d1f6      	bne.n	80018a0 <ssd1331_display+0x80>
         }
         // Write lower byt of color to DR
         *((__IO uint8_t *)&oled_spi->Instance->DR) = (buffor[i] & 0xFF);
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <ssd1331_display+0xe0>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <ssd1331_display+0xdc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	330c      	adds	r3, #12
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]
         // Decrease Lenght
         Length--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
         i++;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
   while(Length > 0U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ce      	bne.n	8001876 <ssd1331_display+0x56>
      }
   }
   while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_BSY) != RESET)
 80018d8:	e000      	b.n	80018dc <ssd1331_display+0xbc>
   {
      __NOP();
 80018da:	bf00      	nop
   while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_BSY) != RESET)
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <ssd1331_display+0xdc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e8:	2b80      	cmp	r3, #128	; 0x80
 80018ea:	d0f6      	beq.n	80018da <ssd1331_display+0xba>
   }

   ssd1331_cs_high;
 80018ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018f0:	2208      	movs	r2, #8
 80018f2:	619a      	str	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200002cc 	.word	0x200002cc
 8001900:	200002d0 	.word	0x200002d0

08001904 <ssd1331_init>:

void ssd1331_init(SPI_HandleTypeDef *spi)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
   ssd1331_rst_low;
 800190c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001910:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001914:	619a      	str	r2, [r3, #24]
   HAL_Delay(150);
 8001916:	2096      	movs	r0, #150	; 0x96
 8001918:	f001 fe66 	bl	80035e8 <HAL_Delay>
   ssd1331_rst_high;
 800191c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001920:	2201      	movs	r2, #1
 8001922:	619a      	str	r2, [r3, #24]
   HAL_Delay(150);
 8001924:	2096      	movs	r0, #150	; 0x96
 8001926:	f001 fe5f 	bl	80035e8 <HAL_Delay>
   oled_spi = spi;
 800192a:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <ssd1331_init+0x140>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6013      	str	r3, [r2, #0]
   __HAL_SPI_ENABLE(oled_spi);
 8001930:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <ssd1331_init+0x140>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <ssd1331_init+0x140>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001942:	601a      	str	r2, [r3, #0]
   ssd1331_command(DISPLAY_OFF);            // Display Off
 8001944:	20ae      	movs	r0, #174	; 0xae
 8001946:	f7ff fef5 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_CONTRAST_A);         // Set contrast for color A
 800194a:	2081      	movs	r0, #129	; 0x81
 800194c:	f7ff fef2 	bl	8001734 <ssd1331_command>
   ssd1331_command(0xFF);                   // 145 0x91
 8001950:	20ff      	movs	r0, #255	; 0xff
 8001952:	f7ff feef 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_CONTRAST_B);         // Set contrast for color B
 8001956:	2082      	movs	r0, #130	; 0x82
 8001958:	f7ff feec 	bl	8001734 <ssd1331_command>
   ssd1331_command(0xFF);                   // 80 0x50
 800195c:	20ff      	movs	r0, #255	; 0xff
 800195e:	f7ff fee9 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_CONTRAST_C);         // Set contrast for color C
 8001962:	2083      	movs	r0, #131	; 0x83
 8001964:	f7ff fee6 	bl	8001734 <ssd1331_command>
   ssd1331_command(0xFF);                   // 125 0x7D
 8001968:	20ff      	movs	r0, #255	; 0xff
 800196a:	f7ff fee3 	bl	8001734 <ssd1331_command>
   ssd1331_command(MASTER_CURRENT_CONTROL); // master current control
 800196e:	2087      	movs	r0, #135	; 0x87
 8001970:	f7ff fee0 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x06);                   // 6
 8001974:	2006      	movs	r0, #6
 8001976:	f7ff fedd 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_SPEED_A);  // Set Second Pre-change Speed For ColorA
 800197a:	208a      	movs	r0, #138	; 0x8a
 800197c:	f7ff feda 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x99);                   // 100
 8001980:	2099      	movs	r0, #153	; 0x99
 8001982:	f7ff fed7 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_SPEED_B);  // Set Second Pre-change Speed For ColorB
 8001986:	208b      	movs	r0, #139	; 0x8b
 8001988:	f7ff fed4 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x99);                   // 120
 800198c:	2099      	movs	r0, #153	; 0x99
 800198e:	f7ff fed1 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_SPEED_C);  // Set Second Pre-change Speed For ColorC
 8001992:	208c      	movs	r0, #140	; 0x8c
 8001994:	f7ff fece 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x99);                   // 100
 8001998:	2099      	movs	r0, #153	; 0x99
 800199a:	f7ff fecb 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_REMAP);              // set remap & data format
 800199e:	20a0      	movs	r0, #160	; 0xa0
 80019a0:	f7ff fec8 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x72);                   // 0x72
 80019a4:	2072      	movs	r0, #114	; 0x72
 80019a6:	f7ff fec5 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_DISPLAY_START_LINE); // Set display Start Line
 80019aa:	20a1      	movs	r0, #161	; 0xa1
 80019ac:	f7ff fec2 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff febf 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_DISPLAY_OFFSET); // Set display offset
 80019b6:	20a2      	movs	r0, #162	; 0xa2
 80019b8:	f7ff febc 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x0);
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff feb9 	bl	8001734 <ssd1331_command>
   ssd1331_command(NORMAL_DISPLAY);      // Set display mode
 80019c2:	20a4      	movs	r0, #164	; 0xa4
 80019c4:	f7ff feb6 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_MULTIPLEX_RATIO); // Set multiplex ratio
 80019c8:	20a8      	movs	r0, #168	; 0xa8
 80019ca:	f7ff feb3 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x3F);
 80019ce:	203f      	movs	r0, #63	; 0x3f
 80019d0:	f7ff feb0 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_MASTER_CONFIGURE); // Set master configuration
 80019d4:	20ad      	movs	r0, #173	; 0xad
 80019d6:	f7ff fead 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x8E);
 80019da:	208e      	movs	r0, #142	; 0x8e
 80019dc:	f7ff feaa 	bl	8001734 <ssd1331_command>
   ssd1331_command(POWER_SAVE_MODE);         // Set Power Save Mode
 80019e0:	20b0      	movs	r0, #176	; 0xb0
 80019e2:	f7ff fea7 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x00);                    // 0x00
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fea4 	bl	8001734 <ssd1331_command>
   ssd1331_command(PHASE_PERIOD_ADJUSTMENT); // phase 1 and 2 period adjustment
 80019ec:	20b1      	movs	r0, #177	; 0xb1
 80019ee:	f7ff fea1 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x31);                    // 0x31
 80019f2:	2031      	movs	r0, #49	; 0x31
 80019f4:	f7ff fe9e 	bl	8001734 <ssd1331_command>
   ssd1331_command(DISPLAY_CLOCK_DIV);       // display clock divider/oscillator frequency
 80019f8:	20b3      	movs	r0, #179	; 0xb3
 80019fa:	f7ff fe9b 	bl	8001734 <ssd1331_command>
   ssd1331_command(0xF0);
 80019fe:	20f0      	movs	r0, #240	; 0xf0
 8001a00:	f7ff fe98 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_VOLTAGE); // Set Pre-Change Level
 8001a04:	20bb      	movs	r0, #187	; 0xbb
 8001a06:	f7ff fe95 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x3A);
 8001a0a:	203a      	movs	r0, #58	; 0x3a
 8001a0c:	f7ff fe92 	bl	8001734 <ssd1331_command>
   ssd1331_command(SET_V_VOLTAGE); // Set vcomH
 8001a10:	20be      	movs	r0, #190	; 0xbe
 8001a12:	f7ff fe8f 	bl	8001734 <ssd1331_command>
   ssd1331_command(0x3E);
 8001a16:	203e      	movs	r0, #62	; 0x3e
 8001a18:	f7ff fe8c 	bl	8001734 <ssd1331_command>
   ssd1331_command(DEACTIVE_SCROLLING);           // disable scrolling
 8001a1c:	202e      	movs	r0, #46	; 0x2e
 8001a1e:	f7ff fe89 	bl	8001734 <ssd1331_command>
   ssd1331_command(NORMAL_BRIGHTNESS_DISPLAY_ON); // set display on
 8001a22:	20af      	movs	r0, #175	; 0xaf
 8001a24:	f7ff fe86 	bl	8001734 <ssd1331_command>
   HAL_Delay(1000);
 8001a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a2c:	f001 fddc 	bl	80035e8 <HAL_Delay>
   ssd1331_clear();
 8001a30:	f7ff feca 	bl	80017c8 <ssd1331_clear>
   ssd1331_display(0);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fef3 	bl	8001820 <ssd1331_display>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002cc 	.word	0x200002cc

08001a48 <map>:
extern fram_t Fram;
uint8_t TempTable[SECTOR_SIZE] = { 0 };
uint8_t AesKey[16]             = { 0 };
AES_ctx Aes;
uint32_t map(uint32_t val, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	69b9      	ldr	r1, [r7, #24]
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	1a8a      	subs	r2, r1, r2
 8001a62:	fb03 f202 	mul.w	r2, r3, r2
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1acb      	subs	r3, r1, r3
 8001a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4413      	add	r3, r2
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SUPP_ExtFramhMassErase>:
      GFX_DrawFillRectangle(0, 20, map(i, 0, 511, 0, 96), 5, GREEN);
      ssd1331_display(0);
   }
}
void SUPP_ExtFramhMassErase(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b092      	sub	sp, #72	; 0x48
 8001a84:	af02      	add	r7, sp, #8
   char Temp[50] = { 0 };
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	222e      	movs	r2, #46	; 0x2e
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00c f93a 	bl	800dd0c <memset>
   ssd1331_clear();
 8001a98:	f7ff fe96 	bl	80017c8 <ssd1331_clear>
   sprintf(Temp, "EXTERNAL FRAM");
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	492e      	ldr	r1, [pc, #184]	; (8001b58 <SUPP_ExtFramhMassErase+0xd8>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00c f93b 	bl	800dd1c <siprintf>
   GFX_DrawString(0, 0, Temp, GREEN);
 8001aa6:	1d3a      	adds	r2, r7, #4
 8001aa8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 fd16 	bl	80024e0 <GFX_DrawString>
   sprintf(Temp, "MASS ERASE");
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4929      	ldr	r1, [pc, #164]	; (8001b5c <SUPP_ExtFramhMassErase+0xdc>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00c f92f 	bl	800dd1c <siprintf>
   GFX_DrawString(0, 10, Temp, GREEN);
 8001abe:	1d3a      	adds	r2, r7, #4
 8001ac0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ac4:	210a      	movs	r1, #10
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 fd0a 	bl	80024e0 <GFX_DrawString>
   GFX_DrawRectangle(0, 20, 96, 5, GREEN);
 8001acc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	2260      	movs	r2, #96	; 0x60
 8001ad6:	2114      	movs	r1, #20
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f000 fded 	bl	80026b8 <GFX_DrawRectangle>
   ssd1331_display(0);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fe9e 	bl	8001820 <ssd1331_display>
   for(int i = 0; i < 128; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ae8:	e007      	b.n	8001afa <SUPP_ExtFramhMassErase+0x7a>
   {
      TempTable[i] = 0;
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <SUPP_ExtFramhMassErase+0xe0>)
 8001aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aee:	4413      	add	r3, r2
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 128; i++)
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	3301      	adds	r3, #1
 8001af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afc:	2b7f      	cmp	r3, #127	; 0x7f
 8001afe:	ddf4      	ble.n	8001aea <SUPP_ExtFramhMassErase+0x6a>
   }
   for(int i = 0; i < FRAM_NUMBER_OF_BYTES; i += 128)
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b04:	e01f      	b.n	8001b46 <SUPP_ExtFramhMassErase+0xc6>
   {
      fram_Write(&Fram, i, TempTable, 128);
 8001b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <SUPP_ExtFramhMassErase+0xe0>)
 8001b0e:	4815      	ldr	r0, [pc, #84]	; (8001b64 <SUPP_ExtFramhMassErase+0xe4>)
 8001b10:	f000 ffde 	bl	8002ad0 <fram_Write>
      GFX_DrawFillRectangle(0, 20, map(i, 0, FRAM_NUMBER_OF_BYTES - 1, 0, 96), 5, GREEN);
 8001b14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b16:	2360      	movs	r3, #96	; 0x60
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001b20:	2100      	movs	r1, #0
 8001b22:	f7ff ff91 	bl	8001a48 <map>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2305      	movs	r3, #5
 8001b32:	2114      	movs	r1, #20
 8001b34:	2000      	movs	r0, #0
 8001b36:	f000 fdec 	bl	8002712 <GFX_DrawFillRectangle>
      ssd1331_display(0);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fe70 	bl	8001820 <ssd1331_display>
   for(int i = 0; i < FRAM_NUMBER_OF_BYTES; i += 128)
 8001b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b42:	3380      	adds	r3, #128	; 0x80
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b4c:	dbdb      	blt.n	8001b06 <SUPP_ExtFramhMassErase+0x86>
   }
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	3740      	adds	r7, #64	; 0x40
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	0800e62c 	.word	0x0800e62c
 8001b5c:	0800e620 	.word	0x0800e620
 8001b60:	200032d0 	.word	0x200032d0
 8001b64:	200002b0 	.word	0x200002b0

08001b68 <SUPP_ButtonOffFlagTask>:
   {
      flash_WritePage(&Flash, SectorNumber * PAGES_IN_SECTOR, &TempTable[i * PAGE_SIZE]);
   }
}
void SUPP_ButtonOffFlagTask(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
   if(DATA_GetSmPtr()->Flags.FlagsBits.DownButtonFlag == SM_FLAG_SET)
 8001b6c:	f7ff fc18 	bl	80013a0 <DATA_GetSmPtr>
 8001b70:	4603      	mov	r3, r0
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01a      	beq.n	8001bb4 <SUPP_ButtonOffFlagTask+0x4c>
   {
      DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt++;
 8001b7e:	2003      	movs	r0, #3
 8001b80:	f7ff fc18 	bl	80013b4 <DATA_GetButPtr>
 8001b84:	4603      	mov	r3, r0
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	3201      	adds	r2, #1
 8001b8a:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f7ff fc11 	bl	80013b4 <DATA_GetButPtr>
 8001b92:	4603      	mov	r3, r0
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b31      	cmp	r3, #49	; 0x31
 8001b98:	d90c      	bls.n	8001bb4 <SUPP_ButtonOffFlagTask+0x4c>
      {
         DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt         = 0;
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f7ff fc0a 	bl	80013b4 <DATA_GetButPtr>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.DownButtonFlag = SM_FLAG_RESET;
 8001ba6:	f7ff fbfb 	bl	80013a0 <DATA_GetSmPtr>
 8001baa:	4602      	mov	r2, r0
 8001bac:	7913      	ldrb	r3, [r2, #4]
 8001bae:	f36f 0341 	bfc	r3, #1, #1
 8001bb2:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.UpButtonFlag == SM_FLAG_SET)
 8001bb4:	f7ff fbf4 	bl	80013a0 <DATA_GetSmPtr>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	791b      	ldrb	r3, [r3, #4]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01a      	beq.n	8001bfc <SUPP_ButtonOffFlagTask+0x94>
   {
      DATA_GetButPtr(BUTTON_UP)->OffFlagCnt++;
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fbf4 	bl	80013b4 <DATA_GetButPtr>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	3201      	adds	r2, #1
 8001bd2:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_UP)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fbed 	bl	80013b4 <DATA_GetButPtr>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b31      	cmp	r3, #49	; 0x31
 8001be0:	d90c      	bls.n	8001bfc <SUPP_ButtonOffFlagTask+0x94>
      {
         DATA_GetButPtr(BUTTON_UP)->OffFlagCnt         = 0;
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff fbe6 	bl	80013b4 <DATA_GetButPtr>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.UpButtonFlag = SM_FLAG_RESET;
 8001bee:	f7ff fbd7 	bl	80013a0 <DATA_GetSmPtr>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	7913      	ldrb	r3, [r2, #4]
 8001bf6:	f36f 0300 	bfc	r3, #0, #1
 8001bfa:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.LeftButtonFlag == SM_FLAG_SET)
 8001bfc:	f7ff fbd0 	bl	80013a0 <DATA_GetSmPtr>
 8001c00:	4603      	mov	r3, r0
 8001c02:	791b      	ldrb	r3, [r3, #4]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01a      	beq.n	8001c44 <SUPP_ButtonOffFlagTask+0xdc>
   {
      DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt++;
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fbd0 	bl	80013b4 <DATA_GetButPtr>
 8001c14:	4603      	mov	r3, r0
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	3201      	adds	r2, #1
 8001c1a:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff fbc9 	bl	80013b4 <DATA_GetButPtr>
 8001c22:	4603      	mov	r3, r0
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b31      	cmp	r3, #49	; 0x31
 8001c28:	d90c      	bls.n	8001c44 <SUPP_ButtonOffFlagTask+0xdc>
      {
         DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt         = 0;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff fbc2 	bl	80013b4 <DATA_GetButPtr>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.LeftButtonFlag = SM_FLAG_RESET;
 8001c36:	f7ff fbb3 	bl	80013a0 <DATA_GetSmPtr>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	7913      	ldrb	r3, [r2, #4]
 8001c3e:	f36f 0382 	bfc	r3, #2, #1
 8001c42:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.RightButtonFlag == SM_FLAG_SET)
 8001c44:	f7ff fbac 	bl	80013a0 <DATA_GetSmPtr>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	791b      	ldrb	r3, [r3, #4]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <SUPP_ButtonOffFlagTask+0x124>
   {
      DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt++;
 8001c56:	2002      	movs	r0, #2
 8001c58:	f7ff fbac 	bl	80013b4 <DATA_GetButPtr>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	3201      	adds	r2, #1
 8001c62:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7ff fba5 	bl	80013b4 <DATA_GetButPtr>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b31      	cmp	r3, #49	; 0x31
 8001c70:	d90c      	bls.n	8001c8c <SUPP_ButtonOffFlagTask+0x124>
      {
         DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt         = 0;
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7ff fb9e 	bl	80013b4 <DATA_GetButPtr>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.RightButtonFlag = SM_FLAG_RESET;
 8001c7e:	f7ff fb8f 	bl	80013a0 <DATA_GetSmPtr>
 8001c82:	4602      	mov	r2, r0
 8001c84:	7913      	ldrb	r3, [r2, #4]
 8001c86:	f36f 03c3 	bfc	r3, #3, #1
 8001c8a:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.OkButtonFlag == SM_FLAG_SET)
 8001c8c:	f7ff fb88 	bl	80013a0 <DATA_GetSmPtr>
 8001c90:	4603      	mov	r3, r0
 8001c92:	791b      	ldrb	r3, [r3, #4]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01a      	beq.n	8001cd4 <SUPP_ButtonOffFlagTask+0x16c>
   {
      DATA_GetButPtr(BUTTON_OK)->OffFlagCnt++;
 8001c9e:	2004      	movs	r0, #4
 8001ca0:	f7ff fb88 	bl	80013b4 <DATA_GetButPtr>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	3201      	adds	r2, #1
 8001caa:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_OK)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 8001cac:	2004      	movs	r0, #4
 8001cae:	f7ff fb81 	bl	80013b4 <DATA_GetButPtr>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b31      	cmp	r3, #49	; 0x31
 8001cb8:	d90c      	bls.n	8001cd4 <SUPP_ButtonOffFlagTask+0x16c>
      {
         DATA_GetButPtr(BUTTON_OK)->OffFlagCnt         = 0;
 8001cba:	2004      	movs	r0, #4
 8001cbc:	f7ff fb7a 	bl	80013b4 <DATA_GetButPtr>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.OkButtonFlag = SM_FLAG_RESET;
 8001cc6:	f7ff fb6b 	bl	80013a0 <DATA_GetSmPtr>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	7913      	ldrb	r3, [r2, #4]
 8001cce:	f36f 1304 	bfc	r3, #4, #1
 8001cd2:	7113      	strb	r3, [r2, #4]
      }
   }
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <SUPP_GetChipID>:
void SUPP_GetChipID(uint32_t *Data)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
   Data[0] = *((unsigned long *)UID_BASE);
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <SUPP_GetChipID+0x44>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
   Data[1] = *((unsigned long *)UID_BASE + 1);
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <SUPP_GetChipID+0x48>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	601a      	str	r2, [r3, #0]
   Data[2] = *((unsigned long *)UID_BASE + 2);
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <SUPP_GetChipID+0x4c>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	601a      	str	r2, [r3, #0]
   Data[3] = Crc(CRC_INITIAL_VALUE, 12, (uint8_t *)Data);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f103 040c 	add.w	r4, r3, #12
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	210c      	movs	r1, #12
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0a:	f7ff faed 	bl	80012e8 <Crc>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6023      	str	r3, [r4, #0]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	1fff7590 	.word	0x1fff7590
 8001d20:	1fff7594 	.word	0x1fff7594
 8001d24:	1fff7598 	.word	0x1fff7598

08001d28 <SUPP_AES_Init>:

void SUPP_AES_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
   uint32_t Key[4];
   SUPP_GetChipID(Key);
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ffd1 	bl	8001cd8 <SUPP_GetChipID>
   AesKey[0] = ((Key[0] >> 24) & 0xff);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	0e1b      	lsrs	r3, r3, #24
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d3e:	701a      	strb	r2, [r3, #0]
   AesKey[1] = ((Key[0] >> 16) & 0xff);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	0c1b      	lsrs	r3, r3, #16
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d48:	705a      	strb	r2, [r3, #1]
   AesKey[2] = ((Key[0] >> 8) & 0xff);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d52:	709a      	strb	r2, [r3, #2]
   AesKey[3] = ((Key[0] >> 0) & 0xff);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d5a:	70da      	strb	r2, [r3, #3]

   AesKey[4] = ((Key[1] >> 24) & 0xff);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	0e1b      	lsrs	r3, r3, #24
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d64:	711a      	strb	r2, [r3, #4]
   AesKey[5] = ((Key[1] >> 16) & 0xff);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d6e:	715a      	strb	r2, [r3, #5]
   AesKey[6] = ((Key[1] >> 8) & 0xff);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d78:	719a      	strb	r2, [r3, #6]
   AesKey[7] = ((Key[1] >> 0) & 0xff);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d80:	71da      	strb	r2, [r3, #7]

   AesKey[8]  = ((Key[2] >> 24) & 0xff);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	0e1b      	lsrs	r3, r3, #24
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d8a:	721a      	strb	r2, [r3, #8]
   AesKey[9]  = ((Key[2] >> 16) & 0xff);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d94:	725a      	strb	r2, [r3, #9]
   AesKey[10] = ((Key[2] >> 8) & 0xff);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001d9e:	729a      	strb	r2, [r3, #10]
   AesKey[11] = ((Key[2] >> 0) & 0xff);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001da6:	72da      	strb	r2, [r3, #11]

   AesKey[12] = ((Key[3] >> 24) & 0xff);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0e1b      	lsrs	r3, r3, #24
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001db0:	731a      	strb	r2, [r3, #12]
   AesKey[13] = ((Key[3] >> 16) & 0xff);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001dba:	735a      	strb	r2, [r3, #13]
   AesKey[14] = ((Key[3] >> 8) & 0xff);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001dc4:	739a      	strb	r2, [r3, #14]
   AesKey[15] = ((Key[3] >> 0) & 0xff);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001dcc:	73da      	strb	r2, [r3, #15]
   AES_init_ctx(&Aes, AesKey);
 8001dce:	4904      	ldr	r1, [pc, #16]	; (8001de0 <SUPP_AES_Init+0xb8>)
 8001dd0:	4804      	ldr	r0, [pc, #16]	; (8001de4 <SUPP_AES_Init+0xbc>)
 8001dd2:	f7fe fb45 	bl	8000460 <AES_init_ctx>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200042d0 	.word	0x200042d0
 8001de4:	200042e0 	.word	0x200042e0

08001de8 <SUPP_AES_EncryptBuffer>:
void SUPP_AES_EncryptBuffer(uint32_t *Buff, uint32_t Size)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
   for(int i = 0; i < Size; i += 4)
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e00a      	b.n	8001e0e <SUPP_AES_EncryptBuffer+0x26>
   {
      AES_ECB_encrypt(&Aes, (uint8_t *)(&Buff[i]));
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <SUPP_AES_EncryptBuffer+0x38>)
 8001e04:	f7ff f8d5 	bl	8000fb2 <AES_ECB_encrypt>
   for(int i = 0; i < Size; i += 4)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d8f0      	bhi.n	8001df8 <SUPP_AES_EncryptBuffer+0x10>
   }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200042e0 	.word	0x200042e0

08001e24 <SUPP_AES_DecryptBuffer>:
void SUPP_AES_DecryptBuffer(uint32_t *Buff, uint32_t Size)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
   for(int i = 0; i < Size; i += 4)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e00a      	b.n	8001e4a <SUPP_AES_DecryptBuffer+0x26>
   {
      AES_ECB_decrypt(&Aes, (uint8_t *)(&Buff[i]));
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <SUPP_AES_DecryptBuffer+0x38>)
 8001e40:	f7ff f8c5 	bl	8000fce <AES_ECB_decrypt>
   for(int i = 0; i < Size; i += 4)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3304      	adds	r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d8f0      	bhi.n	8001e34 <SUPP_AES_DecryptBuffer+0x10>
   }
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200042e0 	.word	0x200042e0

08001e60 <SUPP_ReadPassword>:
void SUPP_ReadPassword(Password_TypeDef *Pass, uint32_t Number)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
   uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, PASSWORD_SIZE - CRC_LENGTH, (uint8_t *)Pass->PasswordTable);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	213c      	movs	r1, #60	; 0x3c
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff fa38 	bl	80012e8 <Crc>
 8001e78:	60f8      	str	r0, [r7, #12]
   while(TempCrc != Pass->PasswordStruct.Crc)
 8001e7a:	e02d      	b.n	8001ed8 <SUPP_ReadPassword+0x78>
   {
      fram_Read(&Fram, Number * PASSWORD_SIZE + PASSWORD_START_ADDRESS, (uint8_t *)Pass->PasswordTable, PASSWORD_SIZE);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	019b      	lsls	r3, r3, #6
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3304      	adds	r3, #4
 8001e86:	b299      	uxth	r1, r3
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	2340      	movs	r3, #64	; 0x40
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <SUPP_ReadPassword+0x8c>)
 8001e8e:	f000 fe4e 	bl	8002b2e <fram_Read>
      SUPP_AES_DecryptBuffer(Pass->PasswordTable, PASSWORD_SIZE / sizeof(uint32_t));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2110      	movs	r1, #16
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ffc4 	bl	8001e24 <SUPP_AES_DecryptBuffer>
      TempCrc = Crc(CRC_INITIAL_VALUE, PASSWORD_SIZE - CRC_LENGTH, (uint8_t *)Pass->PasswordTable);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	213c      	movs	r1, #60	; 0x3c
 8001ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea6:	f7ff fa1f 	bl	80012e8 <Crc>
 8001eaa:	60f8      	str	r0, [r7, #12]
      if(TempCrc == Pass->PasswordStruct.Crc)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d108      	bne.n	8001ec8 <SUPP_ReadPassword+0x68>
      {
         LED_BlinkPoll(0, 100, 100, 10, 15);
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	230a      	movs	r3, #10
 8001ebc:	2264      	movs	r2, #100	; 0x64
 8001ebe:	2164      	movs	r1, #100	; 0x64
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fa8b 	bl	80013dc <LED_BlinkPoll>
 8001ec6:	e007      	b.n	8001ed8 <SUPP_ReadPassword+0x78>
      }
      else
      {
         LED_BlinkPoll(100, 10, 56, 10, 15);
 8001ec8:	230f      	movs	r3, #15
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	230a      	movs	r3, #10
 8001ece:	2238      	movs	r2, #56	; 0x38
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	2064      	movs	r0, #100	; 0x64
 8001ed4:	f7ff fa82 	bl	80013dc <LED_BlinkPoll>
   while(TempCrc != Pass->PasswordStruct.Crc)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d1cc      	bne.n	8001e7c <SUPP_ReadPassword+0x1c>
      }
   }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200002b0 	.word	0x200002b0

08001ef0 <SUPP_GenerateNewPassword>:

void SUPP_GenerateNewPassword(NewPasswordRules_TypeDef NewPassword)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b09a      	sub	sp, #104	; 0x68
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   Password_TypeDef Pass      = { 0 };
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00b ff01 	bl	800dd0c <memset>
   Pass.PasswordStruct.Number = fram_Read32(&Fram, COUNTER_PASSWORD_ADDRESS);
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4880      	ldr	r0, [pc, #512]	; (8002110 <SUPP_GenerateNewPassword+0x220>)
 8001f0e:	f000 fd5a 	bl	80029c6 <fram_Read32>
 8001f12:	4603      	mov	r3, r0
 8001f14:	61fb      	str	r3, [r7, #28]
   fram_Increment32(&Fram, COUNTER_PASSWORD_ADDRESS);
 8001f16:	2100      	movs	r1, #0
 8001f18:	487d      	ldr	r0, [pc, #500]	; (8002110 <SUPP_GenerateNewPassword+0x220>)
 8001f1a:	f000 fd90 	bl	8002a3e <fram_Increment32>
   Pass.PasswordStruct.PasswordLenght     = NewPassword.PasswordLength;
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   Pass.PasswordStruct.PasswordNameLength = NewPassword.NameLength;
 8001f24:	7b3b      	ldrb	r3, [r7, #12]
 8001f26:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
   for(int i = 0; i < NewPassword.NameLength; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8001f2e:	e00c      	b.n	8001f4a <SUPP_GenerateNewPassword+0x5a>
   {
      Pass.PasswordStruct.PasswordName[i] = NewPassword.Name[i];
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f34:	4413      	add	r3, r2
 8001f36:	7819      	ldrb	r1, [r3, #0]
 8001f38:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8001f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f3e:	4413      	add	r3, r2
 8001f40:	460a      	mov	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < NewPassword.NameLength; i++)
 8001f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f46:	3301      	adds	r3, #1
 8001f48:	667b      	str	r3, [r7, #100]	; 0x64
 8001f4a:	7b3b      	ldrb	r3, [r7, #12]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f50:	4293      	cmp	r3, r2
 8001f52:	dbed      	blt.n	8001f30 <SUPP_GenerateNewPassword+0x40>
   }
   if(NewPassword.SpecialCharacter == SM_FLAG_SET)
 8001f54:	793b      	ldrb	r3, [r7, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d118      	bne.n	8001f8c <SUPP_GenerateNewPassword+0x9c>
   {
      if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 8001f5a:	797b      	ldrb	r3, [r7, #5]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d115      	bne.n	8001f8c <SUPP_GenerateNewPassword+0x9c>
      {
         uint32_t Temp;
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	4619      	mov	r1, r3
 8001f66:	486b      	ldr	r0, [pc, #428]	; (8002114 <SUPP_GenerateNewPassword+0x224>)
 8001f68:	f004 ff0d 	bl	8006d86 <HAL_RNG_GenerateRandomNumber>
         if(Temp % 2 == 0)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <SUPP_GenerateNewPassword+0x8e>
         {
            Pass.PasswordStruct.Password[0] = '*';
 8001f76:	232a      	movs	r3, #42	; 0x2a
 8001f78:	f887 3020 	strb.w	r3, [r7, #32]
 8001f7c:	e002      	b.n	8001f84 <SUPP_GenerateNewPassword+0x94>
         }
         else
         {
            Pass.PasswordStruct.Password[0] = '!';
 8001f7e:	2321      	movs	r3, #33	; 0x21
 8001f80:	f887 3020 	strb.w	r3, [r7, #32]
         }
         NewPassword.PasswordLength--;
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	71bb      	strb	r3, [r7, #6]
      }
   }
   for(int i = 0; i < NewPassword.PasswordLength; i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f90:	e098      	b.n	80020c4 <SUPP_GenerateNewPassword+0x1d4>
   {
      uint32_t Temp;
      HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	485e      	ldr	r0, [pc, #376]	; (8002114 <SUPP_GenerateNewPassword+0x224>)
 8001f9a:	f004 fef4 	bl	8006d86 <HAL_RNG_GenerateRandomNumber>
      if(Temp % 3 == 0)
 8001f9e:	6979      	ldr	r1, [r7, #20]
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <SUPP_GenerateNewPassword+0x228>)
 8001fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8001fa6:	085a      	lsrs	r2, r3, #1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	1aca      	subs	r2, r1, r3
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d125      	bne.n	8002000 <SUPP_GenerateNewPassword+0x110>
      {
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4856      	ldr	r0, [pc, #344]	; (8002114 <SUPP_GenerateNewPassword+0x224>)
 8001fbc:	f004 fee3 	bl	8006d86 <HAL_RNG_GenerateRandomNumber>
         Temp = (Temp % 26) + 65;
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4b56      	ldr	r3, [pc, #344]	; (800211c <SUPP_GenerateNewPassword+0x22c>)
 8001fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	211a      	movs	r1, #26
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	3341      	adds	r3, #65	; 0x41
 8001fd4:	617b      	str	r3, [r7, #20]
         if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 8001fd6:	797b      	ldrb	r3, [r7, #5]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d108      	bne.n	8001fee <SUPP_GenerateNewPassword+0xfe>
         {
            Pass.PasswordStruct.Password[i + 1] = Temp;
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	3368      	adds	r3, #104	; 0x68
 8001fe6:	443b      	add	r3, r7
 8001fe8:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001fec:	e067      	b.n	80020be <SUPP_GenerateNewPassword+0x1ce>
         }
         else
         {
            Pass.PasswordStruct.Password[i] = Temp;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	b2d9      	uxtb	r1, r3
 8001ff2:	f107 0220 	add.w	r2, r7, #32
 8001ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff8:	4413      	add	r3, r2
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e05e      	b.n	80020be <SUPP_GenerateNewPassword+0x1ce>
         }
      }
      else if(Temp % 3 == 1)
 8002000:	6979      	ldr	r1, [r7, #20]
 8002002:	4b45      	ldr	r3, [pc, #276]	; (8002118 <SUPP_GenerateNewPassword+0x228>)
 8002004:	fba3 2301 	umull	r2, r3, r3, r1
 8002008:	085a      	lsrs	r2, r3, #1
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	1aca      	subs	r2, r1, r3
 8002012:	2a01      	cmp	r2, #1
 8002014:	d125      	bne.n	8002062 <SUPP_GenerateNewPassword+0x172>
      {
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	483d      	ldr	r0, [pc, #244]	; (8002114 <SUPP_GenerateNewPassword+0x224>)
 800201e:	f004 feb2 	bl	8006d86 <HAL_RNG_GenerateRandomNumber>
         Temp = (Temp % 26) + 97;
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4b3d      	ldr	r3, [pc, #244]	; (800211c <SUPP_GenerateNewPassword+0x22c>)
 8002026:	fba3 1302 	umull	r1, r3, r3, r2
 800202a:	08db      	lsrs	r3, r3, #3
 800202c:	211a      	movs	r1, #26
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	3361      	adds	r3, #97	; 0x61
 8002036:	617b      	str	r3, [r7, #20]
         if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 8002038:	797b      	ldrb	r3, [r7, #5]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <SUPP_GenerateNewPassword+0x160>
         {
            Pass.PasswordStruct.Password[i + 1] = Temp;
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002042:	3301      	adds	r3, #1
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	3368      	adds	r3, #104	; 0x68
 8002048:	443b      	add	r3, r7
 800204a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800204e:	e036      	b.n	80020be <SUPP_GenerateNewPassword+0x1ce>
         }
         else
         {
            Pass.PasswordStruct.Password[i] = Temp;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	b2d9      	uxtb	r1, r3
 8002054:	f107 0220 	add.w	r2, r7, #32
 8002058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800205a:	4413      	add	r3, r2
 800205c:	460a      	mov	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e02d      	b.n	80020be <SUPP_GenerateNewPassword+0x1ce>
         }
      }
      else if(NewPassword.SpecialCharacter == SM_FLAG_SET)
 8002062:	793b      	ldrb	r3, [r7, #4]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d127      	bne.n	80020b8 <SUPP_GenerateNewPassword+0x1c8>
      {
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	4829      	ldr	r0, [pc, #164]	; (8002114 <SUPP_GenerateNewPassword+0x224>)
 8002070:	f004 fe89 	bl	8006d86 <HAL_RNG_GenerateRandomNumber>
         Temp = (Temp % 10);
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <SUPP_GenerateNewPassword+0x230>)
 8002078:	fba3 2301 	umull	r2, r3, r3, r1
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	1aca      	subs	r2, r1, r3
 8002088:	617a      	str	r2, [r7, #20]
         if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 800208a:	797b      	ldrb	r3, [r7, #5]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d109      	bne.n	80020a4 <SUPP_GenerateNewPassword+0x1b4>
         {
            Pass.PasswordStruct.Password[i + 1] = SpecialCharacter[Temp];
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002094:	3301      	adds	r3, #1
 8002096:	4923      	ldr	r1, [pc, #140]	; (8002124 <SUPP_GenerateNewPassword+0x234>)
 8002098:	5c8a      	ldrb	r2, [r1, r2]
 800209a:	3368      	adds	r3, #104	; 0x68
 800209c:	443b      	add	r3, r7
 800209e:	f803 2c48 	strb.w	r2, [r3, #-72]
 80020a2:	e00c      	b.n	80020be <SUPP_GenerateNewPassword+0x1ce>
         }
         else
         {
            Pass.PasswordStruct.Password[i] = SpecialCharacter[Temp];
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <SUPP_GenerateNewPassword+0x234>)
 80020a8:	5cd1      	ldrb	r1, [r2, r3]
 80020aa:	f107 0220 	add.w	r2, r7, #32
 80020ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b0:	4413      	add	r3, r2
 80020b2:	460a      	mov	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e002      	b.n	80020be <SUPP_GenerateNewPassword+0x1ce>
         }
      }
      else
      {
         i--;
 80020b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ba:	3b01      	subs	r3, #1
 80020bc:	663b      	str	r3, [r7, #96]	; 0x60
   for(int i = 0; i < NewPassword.PasswordLength; i++)
 80020be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c0:	3301      	adds	r3, #1
 80020c2:	663b      	str	r3, [r7, #96]	; 0x60
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	461a      	mov	r2, r3
 80020c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ca:	4293      	cmp	r3, r2
 80020cc:	f6ff af61 	blt.w	8001f92 <SUPP_GenerateNewPassword+0xa2>
      }
   }
   Pass.PasswordStruct.Crc = Crc(CRC_INITIAL_VALUE, PASSWORD_SIZE - CRC_LENGTH, (uint8_t *)Pass.PasswordTable);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	461a      	mov	r2, r3
 80020d6:	213c      	movs	r1, #60	; 0x3c
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff f904 	bl	80012e8 <Crc>
 80020e0:	4603      	mov	r3, r0
 80020e2:	65bb      	str	r3, [r7, #88]	; 0x58
   uint32_t TempAddr       = Pass.PasswordStruct.Number * PASSWORD_SIZE + PASSWORD_START_ADDRESS;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	019b      	lsls	r3, r3, #6
 80020e8:	3304      	adds	r3, #4
 80020ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   SUPP_AES_EncryptBuffer(Pass.PasswordTable, PASSWORD_SIZE / sizeof(uint32_t));
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	2110      	movs	r1, #16
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe78 	bl	8001de8 <SUPP_AES_EncryptBuffer>
   fram_Write(&Fram, TempAddr, (uint8_t *)Pass.PasswordTable, PASSWORD_SIZE);
 80020f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fa:	b299      	uxth	r1, r3
 80020fc:	f107 021c 	add.w	r2, r7, #28
 8002100:	2340      	movs	r3, #64	; 0x40
 8002102:	4803      	ldr	r0, [pc, #12]	; (8002110 <SUPP_GenerateNewPassword+0x220>)
 8002104:	f000 fce4 	bl	8002ad0 <fram_Write>
}
 8002108:	bf00      	nop
 800210a:	3768      	adds	r7, #104	; 0x68
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200002b0 	.word	0x200002b0
 8002114:	200046bc 	.word	0x200046bc
 8002118:	aaaaaaab 	.word	0xaaaaaaab
 800211c:	4ec4ec4f 	.word	0x4ec4ec4f
 8002120:	cccccccd 	.word	0xcccccccd
 8002124:	0800ea8c 	.word	0x0800ea8c

08002128 <WS2812_SetPixel>:

#include "WS2812b.h"
#include "tim.h"
uint16_t WsBuffer[12 * 24] = { 0 };
void WS2812_SetPixel(uint8_t r, uint8_t g, uint8_t b)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	460b      	mov	r3, r1
 8002134:	71bb      	strb	r3, [r7, #6]
 8002136:	4613      	mov	r3, r2
 8002138:	717b      	strb	r3, [r7, #5]

   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 800213a:	2307      	movs	r3, #7
 800213c:	75fb      	strb	r3, [r7, #23]
 800213e:	2300      	movs	r3, #0
 8002140:	75bb      	strb	r3, [r7, #22]
 8002142:	e025      	b.n	8002190 <WS2812_SetPixel+0x68>
   {

      if((g & (1 << k)) == 0)
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800214a:	fa42 f303 	asr.w	r3, r2, r3
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d108      	bne.n	8002168 <WS2812_SetPixel+0x40>
         WsBuffer[11 * 24 + i] = zero;
 8002156:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800215a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800215e:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <WS2812_SetPixel+0x17c>)
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002166:	e007      	b.n	8002178 <WS2812_SetPixel+0x50>
      else
         WsBuffer[11 * 24 + i] = one;
 8002168:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800216c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002170:	4a4c      	ldr	r2, [pc, #304]	; (80022a4 <WS2812_SetPixel+0x17c>)
 8002172:	2195      	movs	r1, #149	; 0x95
 8002174:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8002178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	75fb      	strb	r3, [r7, #23]
 8002184:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	75bb      	strb	r3, [r7, #22]
 8002190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002194:	2b00      	cmp	r3, #0
 8002196:	dad5      	bge.n	8002144 <WS2812_SetPixel+0x1c>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8002198:	2307      	movs	r3, #7
 800219a:	757b      	strb	r3, [r7, #21]
 800219c:	2300      	movs	r3, #0
 800219e:	753b      	strb	r3, [r7, #20]
 80021a0:	e025      	b.n	80021ee <WS2812_SetPixel+0xc6>
   {

      if((r & (1 << k)) == 0)
 80021a2:	79fa      	ldrb	r2, [r7, #7]
 80021a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80021a8:	fa42 f303 	asr.w	r3, r2, r3
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <WS2812_SetPixel+0x9e>
         WsBuffer[11 * 24 + i + 8] = zero;
 80021b4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80021b8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80021bc:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <WS2812_SetPixel+0x17c>)
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80021c4:	e007      	b.n	80021d6 <WS2812_SetPixel+0xae>
      else
         WsBuffer[11 * 24 + i + 8] = one;
 80021c6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80021ca:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80021ce:	4a35      	ldr	r2, [pc, #212]	; (80022a4 <WS2812_SetPixel+0x17c>)
 80021d0:	2195      	movs	r1, #149	; 0x95
 80021d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 80021d6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	757b      	strb	r3, [r7, #21]
 80021e2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	753b      	strb	r3, [r7, #20]
 80021ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dad5      	bge.n	80021a2 <WS2812_SetPixel+0x7a>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 80021f6:	2307      	movs	r3, #7
 80021f8:	74fb      	strb	r3, [r7, #19]
 80021fa:	2300      	movs	r3, #0
 80021fc:	74bb      	strb	r3, [r7, #18]
 80021fe:	e025      	b.n	800224c <WS2812_SetPixel+0x124>
   {

      if((b & (1 << k)) == 0)
 8002200:	797a      	ldrb	r2, [r7, #5]
 8002202:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002206:	fa42 f303 	asr.w	r3, r2, r3
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <WS2812_SetPixel+0xfc>
         WsBuffer[11 * 24 + i + 16] = zero;
 8002212:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002216:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <WS2812_SetPixel+0x17c>)
 800221c:	2140      	movs	r1, #64	; 0x40
 800221e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002222:	e007      	b.n	8002234 <WS2812_SetPixel+0x10c>
      else
         WsBuffer[11 * 24 + i + 16] = one;
 8002224:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002228:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <WS2812_SetPixel+0x17c>)
 800222e:	2195      	movs	r1, #149	; 0x95
 8002230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8002234:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	74fb      	strb	r3, [r7, #19]
 8002240:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3301      	adds	r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	74bb      	strb	r3, [r7, #18]
 800224c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002250:	2b00      	cmp	r3, #0
 8002252:	dad5      	bge.n	8002200 <WS2812_SetPixel+0xd8>
   }
   for(int i = 0; i < 264; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e007      	b.n	800226a <WS2812_SetPixel+0x142>
   {
      WsBuffer[i] = 0;
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <WS2812_SetPixel+0x17c>)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2100      	movs	r1, #0
 8002260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 264; i++)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3301      	adds	r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8002270:	dbf3      	blt.n	800225a <WS2812_SetPixel+0x132>
   }
   //   for(int i = (264+24); i < 15*24; i++)
   //   {
   //      WsBuffer[i] = zero;
   //   }
   HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, WsBuffer, 12 * 24);
 8002272:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <WS2812_SetPixel+0x17c>)
 8002278:	2100      	movs	r1, #0
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <WS2812_SetPixel+0x180>)
 800227c:	f005 fdaa 	bl	8007dd4 <HAL_TIM_PWM_Start_DMA>
   while(HAL_DMA_STATE_READY != HAL_DMA_GetState(htim8.hdma[1]))
 8002280:	bf00      	nop
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <WS2812_SetPixel+0x180>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	4618      	mov	r0, r3
 8002288:	f001 fdef 	bl	8003e6a <HAL_DMA_GetState>
 800228c:	4603      	mov	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d1f7      	bne.n	8002282 <WS2812_SetPixel+0x15a>
   {
   }
   HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 8002292:	2100      	movs	r1, #0
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <WS2812_SetPixel+0x180>)
 8002296:	f005 ffc1 	bl	800821c <HAL_TIM_PWM_Stop_DMA>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20004390 	.word	0x20004390
 80022a8:	20004738 	.word	0x20004738

080022ac <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_read;
DMA_HandleTypeDef hdma_cordic_write;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_CORDIC_Init+0x20>)
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <MX_CORDIC_Init+0x24>)
 80022b4:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_CORDIC_Init+0x20>)
 80022b8:	f001 f9b8 	bl	800362c <HAL_CORDIC_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80022c2:	f000 fdfd 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200045d0 	.word	0x200045d0
 80022d0:	40020c00 	.word	0x40020c00

080022d4 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a34      	ldr	r2, [pc, #208]	; (80023b4 <HAL_CORDIC_MspInit+0xe0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d161      	bne.n	80023aa <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_CORDIC_MspInit+0xe4>)
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	4a33      	ldr	r2, [pc, #204]	; (80023b8 <HAL_CORDIC_MspInit+0xe4>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6493      	str	r3, [r2, #72]	; 0x48
 80022f2:	4b31      	ldr	r3, [pc, #196]	; (80023b8 <HAL_CORDIC_MspInit+0xe4>)
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA1_Channel2;
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 8002300:	4a2f      	ldr	r2, [pc, #188]	; (80023c0 <HAL_CORDIC_MspInit+0xec>)
 8002302:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 8002306:	2270      	movs	r2, #112	; 0x70
 8002308:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 8002316:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 800231e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002322:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 8002326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800232a:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 8002338:	4820      	ldr	r0, [pc, #128]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 800233a:	f001 fb5d 	bl	80039f8 <HAL_DMA_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 8002344:	f000 fdbc 	bl	8002ec0 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_read);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 800234c:	61da      	str	r2, [r3, #28]
 800234e:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_CORDIC_MspInit+0xe8>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6293      	str	r3, [r2, #40]	; 0x28

    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA1_Channel3;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_CORDIC_MspInit+0xf4>)
 8002358:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 800235c:	2271      	movs	r2, #113	; 0x71
 800235e:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 8002362:	2210      	movs	r2, #16
 8002364:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 8002374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002378:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 800237c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002380:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 800238e:	480d      	ldr	r0, [pc, #52]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 8002390:	f001 fb32 	bl	80039f8 <HAL_DMA_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 800239a:	f000 fd91 	bl	8002ec0 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_write);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 80023a2:	619a      	str	r2, [r3, #24]
 80023a4:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_CORDIC_MspInit+0xf0>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	40021000 	.word	0x40021000
 80023bc:	200045f8 	.word	0x200045f8
 80023c0:	4002001c 	.word	0x4002001c
 80023c4:	20004658 	.word	0x20004658
 80023c8:	40020030 	.word	0x40020030

080023cc <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	font = font_t;
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <GFX_SetFont+0x1c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200046b8 	.word	0x200046b8

080023ec <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ILI_Color color)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	460b      	mov	r3, r1
 80023fc:	71fb      	strb	r3, [r7, #7]
 80023fe:	4613      	mov	r3, r2
 8002400:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2b7e      	cmp	r3, #126	; 0x7e
 8002406:	d862      	bhi.n	80024ce <GFX_DrawChar+0xe2>

		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
 800240c:	e057      	b.n	80024be <GFX_DrawChar+0xd2>
		{
	        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800240e:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <GFX_DrawChar+0xec>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	3b20      	subs	r3, #32
 8002416:	4930      	ldr	r1, [pc, #192]	; (80024d8 <GFX_DrawChar+0xec>)
 8002418:	6809      	ldr	r1, [r1, #0]
 800241a:	3101      	adds	r1, #1
 800241c:	7809      	ldrb	r1, [r1, #0]
 800241e:	fb03 f101 	mul.w	r1, r3, r1
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	440b      	add	r3, r1
 8002426:	3302      	adds	r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	75bb      	strb	r3, [r7, #22]

	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800242e:	2300      	movs	r3, #0
 8002430:	757b      	strb	r3, [r7, #21]
 8002432:	e03a      	b.n	80024aa <GFX_DrawChar+0xbe>
	        {
	            if(line & 1) // Check last pixel in line
 8002434:	7dbb      	ldrb	r3, [r7, #22]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02c      	beq.n	8002498 <GFX_DrawChar+0xac>
	            {
	            	if(size == 1)
 800243e:	4b27      	ldr	r3, [pc, #156]	; (80024dc <GFX_DrawChar+0xf0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10e      	bne.n	8002464 <GFX_DrawChar+0x78>
	            	{
	            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	4413      	add	r3, r2
 800244e:	b2d8      	uxtb	r0, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	7d7b      	ldrb	r3, [r7, #21]
 8002456:	4413      	add	r3, r2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	88ba      	ldrh	r2, [r7, #4]
 800245c:	4619      	mov	r1, r3
 800245e:	f7ff f98b 	bl	8001778 <setPixel>
 8002462:	e019      	b.n	8002498 <GFX_DrawChar+0xac>
	            	}
	            	else
	            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <GFX_DrawChar+0xf0>)
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	fb03 f202 	mul.w	r2, r3, r2
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	18d0      	adds	r0, r2, r3
 8002472:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002476:	4a19      	ldr	r2, [pc, #100]	; (80024dc <GFX_DrawChar+0xf0>)
 8002478:	7812      	ldrb	r2, [r2, #0]
 800247a:	fb03 f202 	mul.w	r2, r3, r2
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	18d1      	adds	r1, r2, r3
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <GFX_DrawChar+0xf0>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <GFX_DrawChar+0xf0>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b29c      	uxth	r4, r3
 800248e:	88bb      	ldrh	r3, [r7, #4]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	4623      	mov	r3, r4
 8002494:	f000 f93d 	bl	8002712 <GFX_DrawFillRectangle>
	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8002498:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	757b      	strb	r3, [r7, #21]
 80024a4:	7dbb      	ldrb	r3, [r7, #22]
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	75bb      	strb	r3, [r7, #22]
 80024aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <GFX_DrawChar+0xec>)
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	4293      	cmp	r3, r2
 80024b6:	dbbd      	blt.n	8002434 <GFX_DrawChar+0x48>
		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	3301      	adds	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <GFX_DrawChar+0xec>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	7dfa      	ldrb	r2, [r7, #23]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d3a0      	bcc.n	800240e <GFX_DrawChar+0x22>
 80024cc:	e000      	b.n	80024d0 <GFX_DrawChar+0xe4>
	if(chr > 0x7E) return; // chr > '~'
 80024ce:	bf00      	nop
	            }
	        }
	    }

}
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd90      	pop	{r4, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200046b8 	.word	0x200046b8
 80024dc:	20000030 	.word	0x20000030

080024e0 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, ILI_Color color)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80024f8:	e015      	b.n	8002526 <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	7cfa      	ldrb	r2, [r7, #19]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	6978      	ldr	r0, [r7, #20]
 8002502:	f7ff ff73 	bl	80023ec <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <GFX_DrawString+0x5c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <GFX_DrawString+0x60>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	3301      	adds	r3, #1
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4413      	add	r3, r2
 800251e:	617b      	str	r3, [r7, #20]


		znak = *str; // Next char
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e3      	bne.n	80024fa <GFX_DrawString+0x1a>
	}
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200046b8 	.word	0x200046b8
 8002540:	20000030 	.word	0x20000030

08002544 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ILI_Color color)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800255c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1acb      	subs	r3, r1, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	bfb8      	it	lt
 800256a:	425b      	neglt	r3, r3
 800256c:	429a      	cmp	r2, r3
 800256e:	bfcc      	ite	gt
 8002570:	2301      	movgt	r3, #1
 8002572:	2300      	movle	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8002578:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	dd0b      	ble.n	80025b8 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfb8      	it	lt
 80025d0:	425b      	neglt	r3, r3
 80025d2:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80025d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025d8:	0fda      	lsrs	r2, r3, #31
 80025da:	4413      	add	r3, r2
 80025dc:	105b      	asrs	r3, r3, #1
 80025de:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	da02      	bge.n	80025ee <GFX_WriteLine+0xaa>
	        ystep = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80025ec:	e02e      	b.n	800264c <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80025ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80025f4:	e02a      	b.n	800264c <GFX_WriteLine+0x108>
	        if (steep) {
 80025f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	b2d1      	uxtb	r1, r2
 8002606:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f8b5 	bl	8001778 <setPixel>
 800260e:	e007      	b.n	8002620 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	b2d1      	uxtb	r1, r2
 8002618:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f8ac 	bl	8001778 <setPixel>
	        }
	        err -= dy;
 8002620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002622:	8abb      	ldrh	r3, [r7, #20]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	b29b      	uxth	r3, r3
 8002628:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800262a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800262e:	2b00      	cmp	r3, #0
 8002630:	da09      	bge.n	8002646 <GFX_WriteLine+0x102>
	            y_start += ystep;
 8002632:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800263c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800263e:	8afb      	ldrh	r3, [r7, #22]
 8002640:	4413      	add	r3, r2
 8002642:	b29b      	uxth	r3, r3
 8002644:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	ddd0      	ble.n	80025f6 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3730      	adds	r7, #48	; 0x30
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ILI_Color color)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af02      	add	r7, sp, #8
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff ff60 	bl	8002544 <GFX_WriteLine>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ILI_Color color)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7ff ff4a 	bl	8002544 <GFX_WriteLine>
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ILI_Color color)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	460b      	mov	r3, r1
 80026c8:	80fb      	strh	r3, [r7, #6]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	8b3b      	ldrh	r3, [r7, #24]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff ffd9 	bl	800268c <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 80026da:	88ba      	ldrh	r2, [r7, #4]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4413      	add	r3, r2
 80026e0:	1e59      	subs	r1, r3, #1
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	8b3b      	ldrh	r3, [r7, #24]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff ffd0 	bl	800268c <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 80026ec:	88ba      	ldrh	r2, [r7, #4]
 80026ee:	8b3b      	ldrh	r3, [r7, #24]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ffb3 	bl	800265e <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	1e58      	subs	r0, r3, #1
 8002700:	88ba      	ldrh	r2, [r7, #4]
 8002702:	8b3b      	ldrh	r3, [r7, #24]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	f7ff ffaa 	bl	800265e <GFX_DrawFastVLine>

}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ILI_Color color)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4611      	mov	r1, r2
 800271e:	461a      	mov	r2, r3
 8002720:	460b      	mov	r3, r1
 8002722:	80fb      	strh	r3, [r7, #6]
 8002724:	4613      	mov	r3, r2
 8002726:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e008      	b.n	8002740 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 800272e:	88ba      	ldrh	r2, [r7, #4]
 8002730:	8c3b      	ldrh	r3, [r7, #32]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f7ff ff92 	bl	800265e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4413      	add	r3, r2
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	dbf0      	blt.n	800272e <GFX_DrawFillRectangle+0x1c>
    }

}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <MX_DMA_Init+0x44>)
 8002760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <MX_DMA_Init+0x44>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6493      	str	r3, [r2, #72]	; 0x48
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_DMA_Init+0x44>)
 800276c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_DMA_Init+0x44>)
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <MX_DMA_Init+0x44>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6493      	str	r3, [r2, #72]	; 0x48
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_DMA_Init+0x44>)
 8002784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]

}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000

080027a0 <flash_CsLow>:
#include "main.h"

#include "flash_spi.h"

void flash_CsLow(flash_t *flash)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68d8      	ldr	r0, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	891b      	ldrh	r3, [r3, #8]
 80027b0:	2200      	movs	r2, #0
 80027b2:	4619      	mov	r1, r3
 80027b4:	f001 fda2 	bl	80042fc <HAL_GPIO_WritePin>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68d8      	ldr	r0, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	891b      	ldrh	r3, [r3, #8]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4619      	mov	r1, r3
 80027d4:	f001 fd92 	bl	80042fc <HAL_GPIO_WritePin>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	f004 fbc4 	bl	8006f88 <HAL_SPI_Transmit>
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	4613      	mov	r3, r2
 8002814:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	b29a      	uxth	r2, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	f004 fd1e 	bl	8007264 <HAL_SPI_Receive>
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <flash_Reset>:
   flash_ReadCommand(flash, &command, 1);
   flash_CsHigh(flash);
   return command;
}
void flash_Reset(flash_t *flash)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
   uint8_t command = ENABLE_RESET;
 8002838:	2366      	movs	r3, #102	; 0x66
 800283a:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ffaf 	bl	80027a0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8002842:	f107 030f 	add.w	r3, r7, #15
 8002846:	2201      	movs	r2, #1
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffc8 	bl	80027e0 <flash_WriteCommand>
   flash_CsHigh(flash);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ffb5 	bl	80027c0 <flash_CsHigh>
   command = RESET;
 8002856:	2399      	movs	r3, #153	; 0x99
 8002858:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa0 	bl	80027a0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8002860:	f107 030f 	add.w	r3, r7, #15
 8002864:	2201      	movs	r2, #1
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffb9 	bl	80027e0 <flash_WriteCommand>
   flash_CsHigh(flash);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffa6 	bl	80027c0 <flash_CsHigh>
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <flash_ReadID>:
   uint8_t command = WRITE_ENABLE;
   flash_WriteCommand(flash, &command, 1);
   flash_CsHigh(flash);
}
void flash_ReadID(flash_t *flash)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
   uint8_t id[3], command = JEDEC_ID;
 8002884:	239f      	movs	r3, #159	; 0x9f
 8002886:	72fb      	strb	r3, [r7, #11]
   flash_CsLow(flash);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff89 	bl	80027a0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 800288e:	f107 030b 	add.w	r3, r7, #11
 8002892:	2201      	movs	r2, #1
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffa2 	bl	80027e0 <flash_WriteCommand>
   flash_ReadCommand(flash, id, 3);
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2203      	movs	r2, #3
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ffaf 	bl	8002808 <flash_ReadCommand>
   flash_CsHigh(flash);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ff88 	bl	80027c0 <flash_CsHigh>
   flash->id = ((id[0] << 16) | (id[1] << 8) | id[2]);
 80028b0:	7b3b      	ldrb	r3, [r7, #12]
 80028b2:	041a      	lsls	r2, r3, #16
 80028b4:	7b7b      	ldrb	r3, [r7, #13]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	4313      	orrs	r3, r2
 80028ba:	7bba      	ldrb	r2, [r7, #14]
 80028bc:	4313      	orrs	r3, r2
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	605a      	str	r2, [r3, #4]
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <flash_Init>:
   flash_WriteCommand(flash, &Temp, 1);
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
}
void flash_Init(flash_t *flash, SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	807b      	strh	r3, [r7, #2]
   flash->flash_spi    = spi;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	601a      	str	r2, [r3, #0]
   flash->flash_CsPort = cs_port;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	60da      	str	r2, [r3, #12]
   flash->flash_CsPin  = cs_pin;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	887a      	ldrh	r2, [r7, #2]
 80028ea:	811a      	strh	r2, [r3, #8]
   flash_Reset(flash);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff ff9f 	bl	8002830 <flash_Reset>
   flash_ReadID(flash);
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff ffc2 	bl	800287c <flash_ReadID>
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <fram_CsLow>:
#include "fram.h"
#include "gpio.h"

#include "spi.h"
void fram_CsLow(fram_t *fram)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6898      	ldr	r0, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8a5b      	ldrh	r3, [r3, #18]
 8002910:	2200      	movs	r2, #0
 8002912:	4619      	mov	r1, r3
 8002914:	f001 fcf2 	bl	80042fc <HAL_GPIO_WritePin>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6898      	ldr	r0, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8a5b      	ldrh	r3, [r3, #18]
 8002930:	2201      	movs	r2, #1
 8002932:	4619      	mov	r1, r3
 8002934:	f001 fce2 	bl	80042fc <HAL_GPIO_WritePin>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
   uint8_t com = WREN;
 8002948:	2306      	movs	r3, #6
 800294a:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ffd7 	bl	8002900 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	f107 010f 	add.w	r1, r7, #15
 800295a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295e:	2201      	movs	r2, #1
 8002960:	f004 fb12 	bl	8006f88 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ffdb 	bl	8002920 <fram_CsHigh>
   HAL_Delay(1);
 800296a:	2001      	movs	r0, #1
 800296c:	f000 fe3c 	bl	80035e8 <HAL_Delay>
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram, uint8_t blocs)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
   if(blocs > 3)
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d901      	bls.n	800298e <fram_SetProtectedBlocs+0x16>
   {
      blocs = 3;
 800298a:	2303      	movs	r3, #3
 800298c:	70fb      	strb	r3, [r7, #3]
   }
   uint8_t data[2];
   data[0] = WRSR;
 800298e:	2301      	movs	r3, #1
 8002990:	733b      	strb	r3, [r7, #12]
   data[1] = (blocs << 2);
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	737b      	strb	r3, [r7, #13]
   fram_SetWELBit(fram);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffd0 	bl	8002940 <fram_SetWELBit>
   fram_CsLow(fram);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffad 	bl	8002900 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	f107 010c 	add.w	r1, r7, #12
 80029ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b2:	2202      	movs	r2, #2
 80029b4:	f004 fae8 	bl	8006f88 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ffb1 	bl	8002920 <fram_CsHigh>
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <fram_Read32>:
uint32_t fram_Read32(fram_t *fram, uint32_t Address)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
   uint8_t Temp[4];
   fram_Read(fram, Address, Temp, 4);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b299      	uxth	r1, r3
 80029d4:	f107 020c 	add.w	r2, r7, #12
 80029d8:	2304      	movs	r3, #4
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8a7 	bl	8002b2e <fram_Read>
   return ((Temp[0] << 24) | (Temp[1] << 16) | (Temp[2] << 8) | Temp[3]);
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	061a      	lsls	r2, r3, #24
 80029e4:	7b7b      	ldrb	r3, [r7, #13]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	7bbb      	ldrb	r3, [r7, #14]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	4313      	orrs	r3, r2
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	4313      	orrs	r3, r2
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <fram_Write32>:
void fram_Write32(fram_t *fram, uint32_t Address, uint32_t Data)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
   uint8_t Temp[4];
   Temp[0] = ((Data >> 24) & 0xff);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0e1b      	lsrs	r3, r3, #24
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	753b      	strb	r3, [r7, #20]
   Temp[1] = ((Data >> 16) & 0xff);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	757b      	strb	r3, [r7, #21]
   Temp[2] = ((Data >> 8) & 0xff);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	75bb      	strb	r3, [r7, #22]
   Temp[3] = ((Data >> 0) & 0xff);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	75fb      	strb	r3, [r7, #23]
   fram_Write(fram, Address, Temp, 4);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	b299      	uxth	r1, r3
 8002a2a:	f107 0214 	add.w	r2, r7, #20
 8002a2e:	2304      	movs	r3, #4
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f84d 	bl	8002ad0 <fram_Write>
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <fram_Increment32>:
   {
      fram_Write(fram, i, &Temp, 1);
   }
}
FramStatus_TypeDef fram_Increment32(fram_t *fram, uint32_t Address)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
   uint32_t Temp = 0, Confirm = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
   Temp = fram_Read32(fram, Address);
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffb7 	bl	80029c6 <fram_Read32>
 8002a58:	60f8      	str	r0, [r7, #12]
   Temp++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
   fram_Write32(fram, Address, Temp);
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ffc9 	bl	80029fc <fram_Write32>
   Confirm = fram_Read32(fram, Address);
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ffaa 	bl	80029c6 <fram_Read32>
 8002a72:	60b8      	str	r0, [r7, #8]
   if(Temp == Confirm)
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d101      	bne.n	8002a80 <fram_Increment32+0x42>
   {
      return FRAM_OK;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <fram_Increment32+0x44>
   }
   else
   {
      return FRAM_ERROR;
 8002a80:	2300      	movs	r3, #0
   }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
   fram_CsLow(fram);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ff34 	bl	8002900 <fram_CsLow>
   uint8_t _sreg;
   uint8_t com = RDSR;
 8002a98:	2305      	movs	r3, #5
 8002a9a:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	f107 010e 	add.w	r1, r7, #14
 8002aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f004 fa6d 	bl	8006f88 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	f107 010f 	add.w	r1, r7, #15
 8002ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aba:	2201      	movs	r2, #1
 8002abc:	f004 fbd2 	bl	8007264 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff2d 	bl	8002920 <fram_CsHigh>
   return _sreg;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <fram_Write>:
void fram_Write(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	461a      	mov	r2, r3
 8002adc:	460b      	mov	r3, r1
 8002ade:	817b      	strh	r3, [r7, #10]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff ff2b 	bl	8002940 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = WRITE;
 8002aea:	2302      	movs	r3, #2
 8002aec:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 8002aee:	2300      	movs	r3, #0
 8002af0:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff ff01 	bl	8002900 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	f107 0114 	add.w	r1, r7, #20
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	f004 fa3c 	bl	8006f88 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(fram->fram_spi, buff, length, 1000);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	893a      	ldrh	r2, [r7, #8]
 8002b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f004 fa34 	bl	8006f88 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fefd 	bl	8002920 <fram_CsHigh>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <fram_Read>:
void fram_Read(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff fefc 	bl	8002940 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = READ;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 8002b50:	897b      	ldrh	r3, [r7, #10]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff fed2 	bl	8002900 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	f107 0114 	add.w	r1, r7, #20
 8002b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b68:	2203      	movs	r2, #3
 8002b6a:	f004 fa0d 	bl	8006f88 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	893a      	ldrh	r2, [r7, #8]
 8002b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	f004 fb73 	bl	8007264 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff fece 	bl	8002920 <fram_CsHigh>
}
 8002b84:	bf00      	nop
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <fram_ReadID>:
uint32_t fram_ReadID(fram_t *fram)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
   uint8_t com, id[4];
   com = RDID;
 8002b94:	239f      	movs	r3, #159	; 0x9f
 8002b96:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff feb1 	bl	8002900 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	f107 010f 	add.w	r1, r7, #15
 8002ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002baa:	2201      	movs	r2, #1
 8002bac:	f004 f9ec 	bl	8006f88 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	f107 0108 	add.w	r1, r7, #8
 8002bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	f004 fb51 	bl	8007264 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff feac 	bl	8002920 <fram_CsHigh>
   return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | id[3]);
 8002bc8:	7a3b      	ldrb	r3, [r7, #8]
 8002bca:	061a      	lsls	r2, r3, #24
 8002bcc:	7a7b      	ldrb	r3, [r7, #9]
 8002bce:	041b      	lsls	r3, r3, #16
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	7abb      	ldrb	r3, [r7, #10]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	7afa      	ldrb	r2, [r7, #11]
 8002bda:	4313      	orrs	r3, r2
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <fram_Init>:
void fram_Init(fram_t *fram, SPI_HandleTypeDef *spi, GPIO_TypeDef *_hold_port, GPIO_TypeDef *_cs_port, GPIO_TypeDef *_wp_port, uint16_t _hold_pin,
               uint16_t _cs_pin, uint16_t _wp_pin)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
   fram->fram_spi  = spi;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	601a      	str	r2, [r3, #0]
   fram->hold_port = _hold_port;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	605a      	str	r2, [r3, #4]
   fram->hold_pin  = _hold_pin;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8bba      	ldrh	r2, [r7, #28]
 8002c02:	821a      	strh	r2, [r3, #16]
   fram->cs_port   = _cs_port;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	609a      	str	r2, [r3, #8]
   fram->cs_pin    = _cs_pin;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8c3a      	ldrh	r2, [r7, #32]
 8002c0e:	825a      	strh	r2, [r3, #18]
   fram->wp_port   = _wp_port;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	60da      	str	r2, [r3, #12]
   fram->wp_pin    = _wp_pin;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c1a:	829a      	strh	r2, [r3, #20]
   //   HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
   //   HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
   fram_SetProtectedBlocs(fram, 0);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff feaa 	bl	8002978 <fram_SetProtectedBlocs>
   fram->sreg   = fram_ReadSreg(fram);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ff30 	bl	8002a8a <fram_ReadSreg>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	759a      	strb	r2, [r3, #22]
   fram->framID = fram_ReadID(fram);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff ffaa 	bl	8002b8c <fram_ReadID>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a3d      	ldr	r2, [pc, #244]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c64:	f043 0320 	orr.w	r3, r3, #32
 8002c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c82:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <MX_GPIO_Init+0x110>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1331_RST_Pin|SSD1331_CS_Pin|FLASH_CS_Pin|FRAM_CS_Pin, GPIO_PIN_SET);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f240 6109 	movw	r1, #1545	; 0x609
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f001 fb24 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_DC_GPIO_Port, SSD1331_DC_Pin, GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2104      	movs	r1, #4
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f001 fb1e 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1331_RST_Pin|SSD1331_CS_Pin|FRAM_CS_Pin;
 8002cc0:	f240 4309 	movw	r3, #1033	; 0x409
 8002cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f001 f974 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_DC_Pin;
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1331_DC_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfa:	f001 f965 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8002cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d04:	2311      	movs	r3, #17
 8002d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1a:	f001 f955 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin;
 8002d1e:	2338      	movs	r3, #56	; 0x38
 8002d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480a      	ldr	r0, [pc, #40]	; (8002d5c <MX_GPIO_Init+0x114>)
 8002d32:	f001 f949 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_OK_Pin|BUTTON_LEFT_Pin;
 8002d36:	23c0      	movs	r3, #192	; 0xc0
 8002d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d42:	f107 030c 	add.w	r3, r7, #12
 8002d46:	4619      	mov	r1, r3
 8002d48:	4804      	ldr	r0, [pc, #16]	; (8002d5c <MX_GPIO_Init+0x114>)
 8002d4a:	f001 f93d 	bl	8003fc8 <HAL_GPIO_Init>

}
 8002d4e:	bf00      	nop
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	48000400 	.word	0x48000400

08002d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d64:	f000 fbcf 	bl	8003506 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d68:	f000 f813 	bl	8002d92 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d6c:	f7ff ff6c 	bl	8002c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d70:	f7ff fcf2 	bl	8002758 <MX_DMA_Init>
  MX_RNG_Init();
 8002d74:	f000 f8aa 	bl	8002ecc <MX_RNG_Init>
  MX_USB_Device_Init();
 8002d78:	f00a fb90 	bl	800d49c <MX_USB_Device_Init>
  MX_CORDIC_Init();
 8002d7c:	f7ff fa96 	bl	80022ac <MX_CORDIC_Init>
  MX_TIM8_Init();
 8002d80:	f000 fa62 	bl	8003248 <MX_TIM8_Init>
  MX_SPI1_Init();
 8002d84:	f000 f8ec 	bl	8002f60 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002d88:	f000 f84e 	bl	8002e28 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_Handle();
 8002d8c:	f7fe fb50 	bl	8001430 <SM_Handle>
 8002d90:	e7fc      	b.n	8002d8c <main+0x2c>

08002d92 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b094      	sub	sp, #80	; 0x50
 8002d96:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	2238      	movs	r2, #56	; 0x38
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00a ffb3 	bl	800dd0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f002 ffd5 	bl	8005d64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002dba:	2321      	movs	r3, #33	; 0x21
 8002dbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002dd4:	2355      	movs	r3, #85	; 0x55
 8002dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002de0:	2302      	movs	r3, #2
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de4:	f107 0318 	add.w	r3, r7, #24
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 f85f 	bl	8005eac <HAL_RCC_OscConfig>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002df4:	f000 f864 	bl	8002ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df8:	230f      	movs	r3, #15
 8002dfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	2104      	movs	r1, #4
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 fb63 	bl	80064dc <HAL_RCC_ClockConfig>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002e1c:	f000 f850 	bl	8002ec0 <Error_Handler>
  }
}
 8002e20:	bf00      	nop
 8002e22:	3750      	adds	r7, #80	; 0x50
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	200c      	movs	r0, #12
 8002e32:	f000 fdac 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002e36:	200c      	movs	r0, #12
 8002e38:	f000 fdc3 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	200d      	movs	r0, #13
 8002e42:	f000 fda4 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002e46:	200d      	movs	r0, #13
 8002e48:	f000 fdbb 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* CORDIC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2064      	movs	r0, #100	; 0x64
 8002e52:	f000 fd9c 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8002e56:	2064      	movs	r0, #100	; 0x64
 8002e58:	f000 fdb3 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* USB_LP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2014      	movs	r0, #20
 8002e62:	f000 fd94 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8002e66:	2014      	movs	r0, #20
 8002e68:	f000 fdab 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* TIM8_BRK_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	202b      	movs	r0, #43	; 0x2b
 8002e72:	f000 fd8c 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8002e76:	202b      	movs	r0, #43	; 0x2b
 8002e78:	f000 fda3 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* TIM8_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	202c      	movs	r0, #44	; 0x2c
 8002e82:	f000 fd84 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8002e86:	202c      	movs	r0, #44	; 0x2c
 8002e88:	f000 fd9b 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* TIM8_TRG_COM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	202d      	movs	r0, #45	; 0x2d
 8002e92:	f000 fd7c 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8002e96:	202d      	movs	r0, #45	; 0x2d
 8002e98:	f000 fd93 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* TIM8_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	202e      	movs	r0, #46	; 0x2e
 8002ea2:	f000 fd74 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002ea6:	202e      	movs	r0, #46	; 0x2e
 8002ea8:	f000 fd8b 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2100      	movs	r1, #0
 8002eb0:	200b      	movs	r0, #11
 8002eb2:	f000 fd6c 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002eb6:	200b      	movs	r0, #11
 8002eb8:	f000 fd83 	bl	80039c2 <HAL_NVIC_EnableIRQ>
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec4:	b672      	cpsid	i
}
 8002ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8002ec8:	e7fe      	b.n	8002ec8 <Error_Handler+0x8>
	...

08002ecc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <MX_RNG_Init+0x24>)
 8002ed2:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <MX_RNG_Init+0x28>)
 8002ed4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_RNG_Init+0x24>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002edc:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <MX_RNG_Init+0x24>)
 8002ede:	f003 ff1d 	bl	8006d1c <HAL_RNG_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002ee8:	f7ff ffea 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200046bc 	.word	0x200046bc
 8002ef4:	50060800 	.word	0x50060800

08002ef8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b098      	sub	sp, #96	; 0x60
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	2250      	movs	r2, #80	; 0x50
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f00a feff 	bl	800dd0c <memset>
  if(rngHandle->Instance==RNG)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <HAL_RNG_MspInit+0x60>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d11a      	bne.n	8002f4e <HAL_RNG_MspInit+0x56>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002f18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fcbc 	bl	80068a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 8002f32:	f7ff ffc5 	bl	8002ec0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RNG_MspInit+0x64>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_RNG_MspInit+0x64>)
 8002f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RNG_MspInit+0x64>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3760      	adds	r7, #96	; 0x60
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	50060800 	.word	0x50060800
 8002f5c:	40021000 	.word	0x40021000

08002f60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f66:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <MX_SPI1_Init+0x78>)
 8002f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f96:	2220      	movs	r2, #32
 8002f98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fae:	2207      	movs	r2, #7
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fba:	2208      	movs	r2, #8
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fc0:	f003 ff37 	bl	8006e32 <HAL_SPI_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f7ff ff79 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200046d0 	.word	0x200046d0
 8002fd8:	40013000 	.word	0x40013000

08002fdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_SPI_MspInit+0x7c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d128      	bne.n	8003050 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <HAL_SPI_MspInit+0x80>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <HAL_SPI_MspInit+0x80>)
 8003004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003008:	6613      	str	r3, [r2, #96]	; 0x60
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_SPI_MspInit+0x80>)
 800300c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_SPI_MspInit+0x80>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_SPI_MspInit+0x80>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_SPI_MspInit+0x80>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800302e:	23e0      	movs	r3, #224	; 0xe0
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800303e:	2305      	movs	r3, #5
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304c:	f000 ffbc 	bl	8003fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003050:	bf00      	nop
 8003052:	3728      	adds	r7, #40	; 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40013000 	.word	0x40013000
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_MspInit+0x44>)
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <HAL_MspInit+0x44>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6613      	str	r3, [r2, #96]	; 0x60
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <HAL_MspInit+0x44>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_MspInit+0x44>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	4a08      	ldr	r2, [pc, #32]	; (80030a4 <HAL_MspInit+0x44>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	; 0x58
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_MspInit+0x44>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000

080030a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <NMI_Handler+0x4>

080030ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <HardFault_Handler+0x4>

080030b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <MemManage_Handler+0x4>

080030ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030be:	e7fe      	b.n	80030be <BusFault_Handler+0x4>

080030c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler+0x4>

080030c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f4:	f000 fa5a 	bl	80035ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <DMA1_Channel1_IRQHandler+0x10>)
 8003102:	f000 fe03 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20004784 	.word	0x20004784

08003110 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <DMA1_Channel2_IRQHandler+0x10>)
 8003116:	f000 fdf9 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200045f8 	.word	0x200045f8

08003124 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <DMA1_Channel3_IRQHandler+0x10>)
 800312a:	f000 fdef 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20004658 	.word	0x20004658

08003138 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <USB_LP_IRQHandler+0x10>)
 800313e:	f001 f9fc 	bl	800453a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20004cbc 	.word	0x20004cbc

0800314c <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <TIM8_BRK_IRQHandler+0x10>)
 8003152:	f005 f961 	bl	8008418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20004738 	.word	0x20004738

08003160 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <TIM8_UP_IRQHandler+0x10>)
 8003166:	f005 f957 	bl	8008418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20004738 	.word	0x20004738

08003174 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <TIM8_TRG_COM_IRQHandler+0x10>)
 800317a:	f005 f94d 	bl	8008418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20004738 	.word	0x20004738

08003188 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <TIM8_CC_IRQHandler+0x10>)
 800318e:	f005 f943 	bl	8008418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20004738 	.word	0x20004738

0800319c <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <CORDIC_IRQHandler+0x10>)
 80031a2:	f000 fa7e 	bl	80036a2 <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200045d0 	.word	0x200045d0

080031b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <_sbrk+0x5c>)
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <_sbrk+0x60>)
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <_sbrk+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <_sbrk+0x64>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <_sbrk+0x68>)
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <_sbrk+0x64>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d207      	bcs.n	80031f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e0:	f00a fd6a 	bl	800dcb8 <__errno>
 80031e4:	4603      	mov	r3, r0
 80031e6:	220c      	movs	r2, #12
 80031e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	e009      	b.n	8003204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <_sbrk+0x64>)
 8003200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	2001c000 	.word	0x2001c000
 8003210:	00001f00 	.word	0x00001f00
 8003214:	20004734 	.word	0x20004734
 8003218:	20004fd8 	.word	0x20004fd8

0800321c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <SystemInit+0x28>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <SystemInit+0x28>)
 8003228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800322c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SystemInit+0x28>)
 8003232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003236:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <MX_TIM8_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b09c      	sub	sp, #112	; 0x70
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800324e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
 8003278:	615a      	str	r2, [r3, #20]
 800327a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2234      	movs	r2, #52	; 0x34
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f00a fd42 	bl	800dd0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003288:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <MX_TIM8_Init+0x158>)
 800328a:	4a46      	ldr	r2, [pc, #280]	; (80033a4 <MX_TIM8_Init+0x15c>)
 800328c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800328e:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <MX_TIM8_Init+0x158>)
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003294:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <MX_TIM8_Init+0x158>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 212;
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <MX_TIM8_Init+0x158>)
 800329c:	22d4      	movs	r2, #212	; 0xd4
 800329e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <MX_TIM8_Init+0x158>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <MX_TIM8_Init+0x158>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ac:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <MX_TIM8_Init+0x158>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80032b2:	483b      	ldr	r0, [pc, #236]	; (80033a0 <MX_TIM8_Init+0x158>)
 80032b4:	f004 fcd6 	bl	8007c64 <HAL_TIM_Base_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80032be:	f7ff fdff 	bl	8002ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80032c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80032cc:	4619      	mov	r1, r3
 80032ce:	4834      	ldr	r0, [pc, #208]	; (80033a0 <MX_TIM8_Init+0x158>)
 80032d0:	f005 fb36 	bl	8008940 <HAL_TIM_ConfigClockSource>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80032da:	f7ff fdf1 	bl	8002ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80032de:	4830      	ldr	r0, [pc, #192]	; (80033a0 <MX_TIM8_Init+0x158>)
 80032e0:	f004 fd17 	bl	8007d12 <HAL_TIM_PWM_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80032ea:	f7ff fde9 	bl	8002ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80032fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032fe:	4619      	mov	r1, r3
 8003300:	4827      	ldr	r0, [pc, #156]	; (80033a0 <MX_TIM8_Init+0x158>)
 8003302:	f006 f9c3 	bl	800968c <HAL_TIMEx_MasterConfigSynchronization>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800330c:	f7ff fdd8 	bl	8002ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003310:	2360      	movs	r3, #96	; 0x60
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003318:	2300      	movs	r3, #0
 800331a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800331c:	2300      	movs	r3, #0
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003328:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800332e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003332:	2200      	movs	r2, #0
 8003334:	4619      	mov	r1, r3
 8003336:	481a      	ldr	r0, [pc, #104]	; (80033a0 <MX_TIM8_Init+0x158>)
 8003338:	f005 f9ee 	bl	8008718 <HAL_TIM_PWM_ConfigChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003342:	f7ff fdbd 	bl	8002ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800335a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800335e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800336c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003376:	2300      	movs	r3, #0
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <MX_TIM8_Init+0x158>)
 8003384:	f006 fa10 	bl	80097a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800338e:	f7ff fd97 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003392:	4803      	ldr	r0, [pc, #12]	; (80033a0 <MX_TIM8_Init+0x158>)
 8003394:	f000 f856 	bl	8003444 <HAL_TIM_MspPostInit>

}
 8003398:	bf00      	nop
 800339a:	3770      	adds	r7, #112	; 0x70
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20004738 	.word	0x20004738
 80033a4:	40013400 	.word	0x40013400

080033a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_TIM_Base_MspInit+0x8c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d137      	bne.n	800342a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <HAL_TIM_Base_MspInit+0x90>)
 80033bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033be:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <HAL_TIM_Base_MspInit+0x90>)
 80033c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033c4:	6613      	str	r3, [r2, #96]	; 0x60
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_TIM_Base_MspInit+0x90>)
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA1_Channel1;
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_TIM_Base_MspInit+0x98>)
 80033d6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 80033da:	2231      	movs	r2, #49	; 0x31
 80033dc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 80033e0:	2210      	movs	r2, #16
 80033e2:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 80033f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 80033fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033fe:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 8003408:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800340c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800340e:	480b      	ldr	r0, [pc, #44]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 8003410:	f000 faf2 	bl	80039f8 <HAL_DMA_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800341a:	f7ff fd51 	bl	8002ec0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a06      	ldr	r2, [pc, #24]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
 8003424:	4a05      	ldr	r2, [pc, #20]	; (800343c <HAL_TIM_Base_MspInit+0x94>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40013400 	.word	0x40013400
 8003438:	40021000 	.word	0x40021000
 800343c:	20004784 	.word	0x20004784
 8003440:	40020008 	.word	0x40020008

08003444 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <HAL_TIM_MspPostInit+0x68>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d11d      	bne.n	80034a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_TIM_MspPostInit+0x6c>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_TIM_MspPostInit+0x6c>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_TIM_MspPostInit+0x6c>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800347e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003490:	2302      	movs	r3, #2
 8003492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	4619      	mov	r1, r3
 800349a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349e:	f000 fd93 	bl	8003fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80034a2:	bf00      	nop
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40013400 	.word	0x40013400
 80034b0:	40021000 	.word	0x40021000

080034b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034b4:	480d      	ldr	r0, [pc, #52]	; (80034ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034b8:	480d      	ldr	r0, [pc, #52]	; (80034f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80034ba:	490e      	ldr	r1, [pc, #56]	; (80034f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034bc:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <LoopForever+0xe>)
  movs r3, #0
 80034be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034c0:	e002      	b.n	80034c8 <LoopCopyDataInit>

080034c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034c6:	3304      	adds	r3, #4

080034c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034cc:	d3f9      	bcc.n	80034c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ce:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80034d0:	4c0b      	ldr	r4, [pc, #44]	; (8003500 <LoopForever+0x16>)
  movs r3, #0
 80034d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d4:	e001      	b.n	80034da <LoopFillZerobss>

080034d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034d8:	3204      	adds	r2, #4

080034da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034dc:	d3fb      	bcc.n	80034d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034de:	f7ff fe9d 	bl	800321c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034e2:	f00a fbef 	bl	800dcc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034e6:	f7ff fc3b 	bl	8002d60 <main>

080034ea <LoopForever>:

LoopForever:
    b LoopForever
 80034ea:	e7fe      	b.n	80034ea <LoopForever>
  ldr   r0, =_estack
 80034ec:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80034f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80034f8:	0800eae4 	.word	0x0800eae4
  ldr r2, =_sbss
 80034fc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003500:	20004fd4 	.word	0x20004fd4

08003504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003504:	e7fe      	b.n	8003504 <ADC1_2_IRQHandler>

08003506 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003510:	2003      	movs	r0, #3
 8003512:	f000 fa31 	bl	8003978 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003516:	200f      	movs	r0, #15
 8003518:	f000 f80e 	bl	8003538 <HAL_InitTick>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	71fb      	strb	r3, [r7, #7]
 8003526:	e001      	b.n	800352c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003528:	f7ff fd9a 	bl	8003060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800352c:	79fb      	ldrb	r3, [r7, #7]

}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <HAL_InitTick+0x68>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d022      	beq.n	8003592 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_InitTick+0x6c>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_InitTick+0x68>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003558:	fbb1 f3f3 	udiv	r3, r1, r3
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fa3c 	bl	80039de <HAL_SYSTICK_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10f      	bne.n	800358c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d809      	bhi.n	8003586 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003572:	2200      	movs	r2, #0
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	f04f 30ff 	mov.w	r0, #4294967295
 800357a:	f000 fa08 	bl	800398e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <HAL_InitTick+0x70>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e007      	b.n	8003596 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e004      	b.n	8003596 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e001      	b.n	8003596 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	2000003c 	.word	0x2000003c
 80035a4:	20000034 	.word	0x20000034
 80035a8:	20000038 	.word	0x20000038

080035ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_IncTick+0x1c>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_IncTick+0x20>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	4a03      	ldr	r2, [pc, #12]	; (80035c8 <HAL_IncTick+0x1c>)
 80035bc:	6013      	str	r3, [r2, #0]
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	200047e4 	.word	0x200047e4
 80035cc:	2000003c 	.word	0x2000003c

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	200047e4 	.word	0x200047e4

080035e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff ffee 	bl	80035d0 <HAL_GetTick>
 80035f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d004      	beq.n	800360c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_Delay+0x40>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800360c:	bf00      	nop
 800360e:	f7ff ffdf 	bl	80035d0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	429a      	cmp	r2, r3
 800361c:	d8f7      	bhi.n	800360e <HAL_Delay+0x26>
  {
  }
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2000003c 	.word	0x2000003c

0800362c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e023      	b.n	8003686 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fe3e 	bl	80022d4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d039      	beq.n	800372c <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036c6:	d101      	bne.n	80036cc <HAL_CORDIC_IRQHandler+0x2a>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_CORDIC_IRQHandler+0x2c>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02c      	beq.n	800372c <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	1e5a      	subs	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3308      	adds	r3, #8
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f84f 	bl	8003786 <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f817 	bl	8003734 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10e      	bne.n	800372c <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800371c:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak (surcharged) callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffb1 	bl	800368e <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppInBuff)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	1d1a      	adds	r2, r3, #4
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003762:	d10a      	bne.n	800377a <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	1d1a      	adds	r2, r3, #4
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	601a      	str	r2, [r3, #0]
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1d1a      	adds	r2, r3, #4
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037b4:	d10a      	bne.n	80037cc <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	601a      	str	r2, [r3, #0]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0b      	blt.n	8003866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <__NVIC_EnableIRQ+0x38>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000e100 	.word	0xe000e100

08003878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	db0a      	blt.n	80038a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	490c      	ldr	r1, [pc, #48]	; (80038c4 <__NVIC_SetPriority+0x4c>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	0112      	lsls	r2, r2, #4
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	440b      	add	r3, r1
 800389c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a0:	e00a      	b.n	80038b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <__NVIC_SetPriority+0x50>)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3b04      	subs	r3, #4
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	440b      	add	r3, r1
 80038b6:	761a      	strb	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000e100 	.word	0xe000e100
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f1c3 0307 	rsb	r3, r3, #7
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	bf28      	it	cs
 80038ea:	2304      	movcs	r3, #4
 80038ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d902      	bls.n	80038fc <NVIC_EncodePriority+0x30>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3b03      	subs	r3, #3
 80038fa:	e000      	b.n	80038fe <NVIC_EncodePriority+0x32>
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	401a      	ands	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003914:	f04f 31ff 	mov.w	r1, #4294967295
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	43d9      	mvns	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003924:	4313      	orrs	r3, r2
         );
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	; 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003944:	d301      	bcc.n	800394a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003946:	2301      	movs	r3, #1
 8003948:	e00f      	b.n	800396a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <SysTick_Config+0x40>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003952:	210f      	movs	r1, #15
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	f7ff ff8e 	bl	8003878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <SysTick_Config+0x40>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <SysTick_Config+0x40>)
 8003964:	2207      	movs	r2, #7
 8003966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	e000e010 	.word	0xe000e010

08003978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff29 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800399c:	f7ff ff40 	bl	8003820 <__NVIC_GetPriorityGrouping>
 80039a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	6978      	ldr	r0, [r7, #20]
 80039a8:	f7ff ff90 	bl	80038cc <NVIC_EncodePriority>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff5f 	bl	8003878 <__NVIC_SetPriority>
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	4603      	mov	r3, r0
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff33 	bl	800383c <__NVIC_EnableIRQ>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ffa4 	bl	8003934 <SysTick_Config>
 80039ec:	4603      	mov	r3, r0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e08d      	b.n	8003b26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_DMA_Init+0x138>)
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d80f      	bhi.n	8003a36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <HAL_DMA_Init+0x13c>)
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a45      	ldr	r2, [pc, #276]	; (8003b38 <HAL_DMA_Init+0x140>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	009a      	lsls	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <HAL_DMA_Init+0x144>)
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
 8003a34:	e00e      	b.n	8003a54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <HAL_DMA_Init+0x148>)
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a3d      	ldr	r2, [pc, #244]	; (8003b38 <HAL_DMA_Init+0x140>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	009a      	lsls	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a3c      	ldr	r2, [pc, #240]	; (8003b44 <HAL_DMA_Init+0x14c>)
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa2c 	bl	8003f04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab4:	d102      	bne.n	8003abc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ad0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d010      	beq.n	8003afc <HAL_DMA_Init+0x104>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d80c      	bhi.n	8003afc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa4c 	bl	8003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	e008      	b.n	8003b0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40020407 	.word	0x40020407
 8003b34:	bffdfff8 	.word	0xbffdfff8
 8003b38:	cccccccd 	.word	0xcccccccd
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	bffdfbf8 	.word	0xbffdfbf8
 8003b44:	40020400 	.word	0x40020400

08003b48 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_DMA_Start_IT+0x20>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e066      	b.n	8003c36 <HAL_DMA_Start_IT+0xee>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d155      	bne.n	8003c28 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f970 	bl	8003e86 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 020e 	orr.w	r2, r2, #14
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e00f      	b.n	8003be0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0204 	bic.w	r2, r2, #4
 8003bce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 020a 	orr.w	r2, r2, #10
 8003bde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bfc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c14:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e005      	b.n	8003c34 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
 8003c32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d00d      	beq.n	8003c72 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e047      	b.n	8003d02 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 020e 	bic.w	r2, r2, #14
 8003c80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f003 021f 	and.w	r2, r3, #31
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cbe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00c      	beq.n	8003ce2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ce0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
    }
  }
  return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d026      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x7a>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d021      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0204 	bic.w	r2, r2, #4
 8003d5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d071      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d84:	e06c      	b.n	8003e60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2202      	movs	r2, #2
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02e      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d029      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 020a 	bic.w	r2, r2, #10
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f003 021f 	and.w	r2, r3, #31
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d038      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003df6:	e033      	b.n	8003e60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2208      	movs	r2, #8
 8003e02:	409a      	lsls	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d02a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d025      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 020e 	bic.w	r2, r2, #14
 8003e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f003 021f 	and.w	r2, r3, #31
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f202 	lsl.w	r2, r1, r2
 8003e38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
}
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e78:	b2db      	uxtb	r3, r3
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e9c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f003 021f 	and.w	r2, r3, #31
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d108      	bne.n	8003ee6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ee4:	e007      	b.n	8003ef6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	60da      	str	r2, [r3, #12]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d802      	bhi.n	8003f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e001      	b.n	8003f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f20:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3b08      	subs	r3, #8
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	009a      	lsls	r2, r3, #2
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40020407 	.word	0x40020407
 8003f70:	40020800 	.word	0x40020800
 8003f74:	40020820 	.word	0x40020820
 8003f78:	cccccccd 	.word	0xcccccccd
 8003f7c:	40020880 	.word	0x40020880

08003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fa2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2201      	movs	r2, #1
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	1000823f 	.word	0x1000823f
 8003fc4:	40020940 	.word	0x40020940

08003fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fd6:	e15a      	b.n	800428e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2101      	movs	r1, #1
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 814c 	beq.w	8004288 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d005      	beq.n	8004008 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004004:	2b02      	cmp	r3, #2
 8004006:	d130      	bne.n	800406a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	2203      	movs	r2, #3
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800403e:	2201      	movs	r2, #1
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0201 	and.w	r2, r3, #1
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d017      	beq.n	80040a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d123      	bne.n	80040fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	08da      	lsrs	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3208      	adds	r2, #8
 80040ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	08da      	lsrs	r2, r3, #3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3208      	adds	r2, #8
 80040f4:	6939      	ldr	r1, [r7, #16]
 80040f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	2203      	movs	r2, #3
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0203 	and.w	r2, r3, #3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80a6 	beq.w	8004288 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413c:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <HAL_GPIO_Init+0x2e4>)
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	4a5a      	ldr	r2, [pc, #360]	; (80042ac <HAL_GPIO_Init+0x2e4>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6613      	str	r3, [r2, #96]	; 0x60
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <HAL_GPIO_Init+0x2e4>)
 800414a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004154:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <HAL_GPIO_Init+0x2e8>)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	3302      	adds	r3, #2
 800415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	220f      	movs	r2, #15
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800417e:	d01f      	beq.n	80041c0 <HAL_GPIO_Init+0x1f8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a4c      	ldr	r2, [pc, #304]	; (80042b4 <HAL_GPIO_Init+0x2ec>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d019      	beq.n	80041bc <HAL_GPIO_Init+0x1f4>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a4b      	ldr	r2, [pc, #300]	; (80042b8 <HAL_GPIO_Init+0x2f0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_GPIO_Init+0x1f0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <HAL_GPIO_Init+0x2f4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00d      	beq.n	80041b4 <HAL_GPIO_Init+0x1ec>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a49      	ldr	r2, [pc, #292]	; (80042c0 <HAL_GPIO_Init+0x2f8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <HAL_GPIO_Init+0x1e8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a48      	ldr	r2, [pc, #288]	; (80042c4 <HAL_GPIO_Init+0x2fc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_GPIO_Init+0x1e4>
 80041a8:	2305      	movs	r3, #5
 80041aa:	e00a      	b.n	80041c2 <HAL_GPIO_Init+0x1fa>
 80041ac:	2306      	movs	r3, #6
 80041ae:	e008      	b.n	80041c2 <HAL_GPIO_Init+0x1fa>
 80041b0:	2304      	movs	r3, #4
 80041b2:	e006      	b.n	80041c2 <HAL_GPIO_Init+0x1fa>
 80041b4:	2303      	movs	r3, #3
 80041b6:	e004      	b.n	80041c2 <HAL_GPIO_Init+0x1fa>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e002      	b.n	80041c2 <HAL_GPIO_Init+0x1fa>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_GPIO_Init+0x1fa>
 80041c0:	2300      	movs	r3, #0
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	f002 0203 	and.w	r2, r2, #3
 80041c8:	0092      	lsls	r2, r2, #2
 80041ca:	4093      	lsls	r3, r2
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041d2:	4937      	ldr	r1, [pc, #220]	; (80042b0 <HAL_GPIO_Init+0x2e8>)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	089b      	lsrs	r3, r3, #2
 80041d8:	3302      	adds	r3, #2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e0:	4b39      	ldr	r3, [pc, #228]	; (80042c8 <HAL_GPIO_Init+0x300>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004204:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_GPIO_Init+0x300>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	43db      	mvns	r3, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	43db      	mvns	r3, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_GPIO_Init+0x300>)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	43db      	mvns	r3, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <HAL_GPIO_Init+0x300>)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3301      	adds	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f ae9d 	bne.w	8003fd8 <HAL_GPIO_Init+0x10>
  }
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40010000 	.word	0x40010000
 80042b4:	48000400 	.word	0x48000400
 80042b8:	48000800 	.word	0x48000800
 80042bc:	48000c00 	.word	0x48000c00
 80042c0:	48001000 	.word	0x48001000
 80042c4:	48001400 	.word	0x48001400
 80042c8:	40010400 	.word	0x40010400

080042cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	e001      	b.n	80042ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
 8004308:	4613      	mov	r3, r2
 800430a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800430c:	787b      	ldrb	r3, [r7, #1]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004312:	887a      	ldrh	r2, [r7, #2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004318:	e002      	b.n	8004320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432e:	b08b      	sub	sp, #44	; 0x2c
 8004330:	af06      	add	r7, sp, #24
 8004332:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0d7      	b.n	80044ee <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f009 f9d8 	bl	800d708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2203      	movs	r2, #3
 800435c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f005 fb2e 	bl	80099c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e04c      	b.n	800440a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	440b      	add	r3, r1
 8004380:	3301      	adds	r3, #1
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	440b      	add	r3, r1
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	b298      	uxth	r0, r3
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	440b      	add	r3, r1
 80043ac:	3336      	adds	r3, #54	; 0x36
 80043ae:	4602      	mov	r2, r0
 80043b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	440b      	add	r3, r1
 80043c2:	3303      	adds	r3, #3
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	440b      	add	r3, r1
 80043d6:	3338      	adds	r3, #56	; 0x38
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043dc:	7bfa      	ldrb	r2, [r7, #15]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	440b      	add	r3, r1
 80043ea:	333c      	adds	r3, #60	; 0x3c
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043f0:	7bfa      	ldrb	r2, [r7, #15]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	440b      	add	r3, r1
 80043fe:	3340      	adds	r3, #64	; 0x40
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	3301      	adds	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d3ad      	bcc.n	8004370 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e044      	b.n	80044a4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	f203 1369 	addw	r3, r3, #361	; 0x169
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004442:	7bfa      	ldrb	r2, [r7, #15]
 8004444:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004446:	7bfa      	ldrb	r2, [r7, #15]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004472:	7bfa      	ldrb	r2, [r7, #15]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	440b      	add	r3, r1
 8004480:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	3301      	adds	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
 80044a4:	7bfa      	ldrb	r2, [r7, #15]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d3b5      	bcc.n	800441a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	687e      	ldr	r6, [r7, #4]
 80044b6:	466d      	mov	r5, sp
 80044b8:	f106 0410 	add.w	r4, r6, #16
 80044bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	1d33      	adds	r3, r6, #4
 80044c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c8:	6838      	ldr	r0, [r7, #0]
 80044ca:	f005 fa97 	bl	80099fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 fc11 	bl	8005d0e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_PCD_Start+0x16>
 8004508:	2302      	movs	r3, #2
 800450a:	e012      	b.n	8004532 <HAL_PCD_Start+0x3c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f005 fa3d 	bl	8009998 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f007 fc56 	bl	800bdd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f007 fc5b 	bl	800be02 <USB_ReadInterrupts>
 800454c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fb0e 	bl	8004b7a <PCD_EP_ISR_Handler>

    return;
 800455e:	e110      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457c:	b292      	uxth	r2, r2
 800457e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f009 f949 	bl	800d81a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004588:	2100      	movs	r1, #0
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8fc 	bl	8004788 <HAL_PCD_SetAddress>

    return;
 8004590:	e0f7      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00c      	beq.n	80045b6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045ae:	b292      	uxth	r2, r2
 80045b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80045b4:	e0e5      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045d2:	b292      	uxth	r2, r2
 80045d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80045d8:	e0d3      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d034      	beq.n	800464e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	b292      	uxth	r2, r2
 80045f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0208 	bic.w	r2, r2, #8
 800460e:	b292      	uxth	r2, r2
 8004610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004626:	2100      	movs	r1, #0
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f009 fac5 	bl	800dbb8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f009 f92c 	bl	800d88c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004646:	b292      	uxth	r2, r2
 8004648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800464c:	e099      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004654:	2b00      	cmp	r3, #0
 8004656:	d027      	beq.n	80046a8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0208 	orr.w	r2, r2, #8
 800466a:	b292      	uxth	r2, r2
 800466c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004682:	b292      	uxth	r2, r2
 8004684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0204 	orr.w	r2, r2, #4
 800469a:	b292      	uxth	r2, r2
 800469c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f009 f8d9 	bl	800d858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80046a6:	e06c      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d040      	beq.n	8004734 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c4:	b292      	uxth	r2, r2
 80046c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d12b      	bne.n	800472c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0204 	orr.w	r2, r2, #4
 80046e6:	b292      	uxth	r2, r2
 80046e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0208 	orr.w	r2, r2, #8
 80046fe:	b292      	uxth	r2, r2
 8004700:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004714:	b29b      	uxth	r3, r3
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004722:	2101      	movs	r1, #1
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f009 fa47 	bl	800dbb8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800472a:	e02a      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f009 f893 	bl	800d858 <HAL_PCD_SuspendCallback>
    return;
 8004732:	e026      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00f      	beq.n	800475e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004750:	b292      	uxth	r2, r2
 8004752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f009 f851 	bl	800d7fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800475c:	e011      	b.n	8004782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00c      	beq.n	8004782 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800477a:	b292      	uxth	r2, r2
 800477c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004780:	bf00      	nop
  }
}
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_PCD_SetAddress+0x1a>
 800479e:	2302      	movs	r3, #2
 80047a0:	e013      	b.n	80047ca <HAL_PCD_SetAddress+0x42>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f007 faf6 	bl	800bdac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	4608      	mov	r0, r1
 80047dc:	4611      	mov	r1, r2
 80047de:	461a      	mov	r2, r3
 80047e0:	4603      	mov	r3, r0
 80047e2:	70fb      	strb	r3, [r7, #3]
 80047e4:	460b      	mov	r3, r1
 80047e6:	803b      	strh	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da0e      	bge.n	8004816 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4413      	add	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	705a      	strb	r2, [r3, #1]
 8004814:	e00e      	b.n	8004834 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	f003 0207 	and.w	r2, r3, #7
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004840:	883a      	ldrh	r2, [r7, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	78ba      	ldrb	r2, [r7, #2]
 800484a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800485e:	78bb      	ldrb	r3, [r7, #2]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d102      	bne.n	800486a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_PCD_EP_Open+0xa6>
 8004874:	2302      	movs	r3, #2
 8004876:	e00e      	b.n	8004896 <HAL_PCD_EP_Open+0xc4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68f9      	ldr	r1, [r7, #12]
 8004886:	4618      	mov	r0, r3
 8004888:	f005 f8da 	bl	8009a40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004894:	7afb      	ldrb	r3, [r7, #11]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da0e      	bge.n	80048d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	705a      	strb	r2, [r3, #1]
 80048ce:	e00e      	b.n	80048ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 0207 	and.w	r2, r3, #7
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_PCD_EP_Close+0x6a>
 8004904:	2302      	movs	r3, #2
 8004906:	e00e      	b.n	8004926 <HAL_PCD_EP_Close+0x88>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68f9      	ldr	r1, [r7, #12]
 8004916:	4618      	mov	r0, r3
 8004918:	f005 fc26 	bl	800a168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	460b      	mov	r3, r1
 800493c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	f003 0207 	and.w	r2, r3, #7
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2200      	movs	r2, #0
 8004966:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800496e:	7afb      	ldrb	r3, [r7, #11]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	b2da      	uxtb	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800497a:	7afb      	ldrb	r3, [r7, #11]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	4618      	mov	r0, r3
 800498c:	f005 fdd9 	bl	800a542 <USB_EPStartXfer>
 8004990:	e005      	b.n	800499e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6979      	ldr	r1, [r7, #20]
 8004998:	4618      	mov	r0, r3
 800499a:	f005 fdd2 	bl	800a542 <USB_EPStartXfer>
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	460b      	mov	r3, r1
 80049b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b8:	7afb      	ldrb	r3, [r7, #11]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2201      	movs	r2, #1
 80049f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049f4:	7afb      	ldrb	r3, [r7, #11]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a00:	7afb      	ldrb	r3, [r7, #11]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6979      	ldr	r1, [r7, #20]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f005 fd96 	bl	800a542 <USB_EPStartXfer>
 8004a16:	e005      	b.n	8004a24 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6979      	ldr	r1, [r7, #20]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f005 fd8f 	bl	800a542 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 0207 	and.w	r2, r3, #7
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d901      	bls.n	8004a4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e03e      	b.n	8004aca <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	da0e      	bge.n	8004a72 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	705a      	strb	r2, [r3, #1]
 8004a70:	e00c      	b.n	8004a8c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4413      	add	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_PCD_EP_SetStall+0x7e>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e00e      	b.n	8004aca <HAL_PCD_EP_SetStall+0x9c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f007 f877 	bl	800bbae <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d901      	bls.n	8004af0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e040      	b.n	8004b72 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da0e      	bge.n	8004b16 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	705a      	strb	r2, [r3, #1]
 8004b14:	e00e      	b.n	8004b34 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 0207 	and.w	r2, r3, #7
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_PCD_EP_ClrStall+0x82>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e00e      	b.n	8004b72 <HAL_PCD_EP_ClrStall+0xa0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68f9      	ldr	r1, [r7, #12]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f007 f874 	bl	800bc50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b096      	sub	sp, #88	; 0x58
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b82:	e39c      	b.n	80052be <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004b90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004b9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f040 815e 	bne.w	8004e64 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004ba8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d150      	bne.n	8004c56 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	81fb      	strh	r3, [r7, #14]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3328      	adds	r3, #40	; 0x28
 8004bdc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	441a      	add	r2, r3
 8004c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c12:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004c14:	2100      	movs	r1, #0
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f008 fdd7 	bl	800d7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 834a 	beq.w	80052be <PCD_EP_ISR_Handler+0x744>
 8004c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 8345 	bne.w	80052be <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b292      	uxth	r2, r2
 8004c48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c54:	e333      	b.n	80052be <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004c68:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d032      	beq.n	8004cda <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4413      	add	r3, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f007 f8f9 	bl	800bea6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	823b      	strh	r3, [r7, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	8a3a      	ldrh	r2, [r7, #16]
 8004cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cce:	b292      	uxth	r2, r2
 8004cd0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f008 fd4c 	bl	800d770 <HAL_PCD_SetupStageCallback>
 8004cd8:	e2f1      	b.n	80052be <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cda:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f280 82ed 	bge.w	80052be <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	83fb      	strh	r3, [r7, #30]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	8bfa      	ldrh	r2, [r7, #30]
 8004cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cfe:	b292      	uxth	r2, r2
 8004d00:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4413      	add	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d28:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d019      	beq.n	8004d66 <PCD_EP_ISR_Handler+0x1ec>
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d015      	beq.n	8004d66 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d40:	6959      	ldr	r1, [r3, #20]
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d48:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f007 f8ab 	bl	800bea6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	441a      	add	r2, r3
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f008 fd17 	bl	800d794 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f040 82a3 	bne.w	80052be <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d9e:	d918      	bls.n	8004dd2 <PCD_EP_ISR_Handler+0x258>
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	647b      	str	r3, [r7, #68]	; 0x44
 8004da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <PCD_EP_ISR_Handler+0x240>
 8004db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db6:	3b01      	subs	r3, #1
 8004db8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	029b      	lsls	r3, r3, #10
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	e029      	b.n	8004e26 <PCD_EP_ISR_Handler+0x2ac>
 8004dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d112      	bne.n	8004e00 <PCD_EP_ISR_Handler+0x286>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	801a      	strh	r2, [r3, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	e012      	b.n	8004e26 <PCD_EP_ISR_Handler+0x2ac>
 8004e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	647b      	str	r3, [r7, #68]	; 0x44
 8004e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <PCD_EP_ISR_Handler+0x2a0>
 8004e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e16:	3301      	adds	r3, #1
 8004e18:	647b      	str	r3, [r7, #68]	; 0x44
 8004e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	827b      	strh	r3, [r7, #18]
 8004e38:	8a7b      	ldrh	r3, [r7, #18]
 8004e3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e3e:	827b      	strh	r3, [r7, #18]
 8004e40:	8a7b      	ldrh	r3, [r7, #18]
 8004e42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e46:	827b      	strh	r3, [r7, #18]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	8a7b      	ldrh	r3, [r7, #18]
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]
 8004e62:	e22c      	b.n	80052be <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e78:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f280 80f6 	bge.w	800506e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e98:	4013      	ands	r3, r2
 8004e9a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004eb8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	7b1b      	ldrb	r3, [r3, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d123      	bne.n	8004f1e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004efa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004efe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 808e 	beq.w	8005024 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0e:	6959      	ldr	r1, [r3, #20]
 8004f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f12:	88da      	ldrh	r2, [r3, #6]
 8004f14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f18:	f006 ffc5 	bl	800bea6 <USB_ReadPMA>
 8004f1c:	e082      	b.n	8005024 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d10a      	bne.n	8004f3c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004f26:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9d3 	bl	80052da <HAL_PCD_EP_DB_Receive>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f3a:	e073      	b.n	8005024 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d022      	beq.n	8004fe0 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4413      	add	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004fc2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02c      	beq.n	8005024 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd0:	6959      	ldr	r1, [r3, #20]
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd4:	891a      	ldrh	r2, [r3, #8]
 8004fd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fda:	f006 ff64 	bl	800bea6 <USB_ReadPMA>
 8004fde:	e021      	b.n	8005024 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005004:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005008:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	6959      	ldr	r1, [r3, #20]
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	895a      	ldrh	r2, [r3, #10]
 800501c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005020:	f006 ff41 	bl	800bea6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800502c:	441a      	add	r2, r3
 800502e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005030:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800503a:	441a      	add	r2, r3
 800503c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <PCD_EP_ISR_Handler+0x4da>
 8005048:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800504c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d206      	bcs.n	8005062 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f008 fb9a 	bl	800d794 <HAL_PCD_DataOutStageCallback>
 8005060:	e005      	b.n	800506e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005068:	4618      	mov	r0, r3
 800506a:	f005 fa6a 	bl	800a542 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800506e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8121 	beq.w	80052be <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800507c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80050cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f000 80a2 	beq.w	800521a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80050d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d8:	2200      	movs	r2, #0
 80050da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050de:	7b1b      	ldrb	r3, [r3, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8093 	beq.w	800520c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d046      	beq.n	8005180 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d126      	bne.n	8005148 <PCD_EP_ISR_Handler+0x5ce>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005108:	b29b      	uxth	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	4413      	add	r3, r2
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00da      	lsls	r2, r3, #3
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	4413      	add	r3, r2
 800511c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005120:	623b      	str	r3, [r7, #32]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800512c:	b29a      	uxth	r2, r3
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005140:	b29a      	uxth	r2, r3
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e061      	b.n	800520c <PCD_EP_ISR_Handler+0x692>
 8005148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d15d      	bne.n	800520c <PCD_EP_ISR_Handler+0x692>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	4413      	add	r3, r2
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	00da      	lsls	r2, r3, #3
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	4413      	add	r3, r2
 8005172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	2200      	movs	r2, #0
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e045      	b.n	800520c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d126      	bne.n	80051dc <PCD_EP_ISR_Handler+0x662>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	4413      	add	r3, r2
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
 80051a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	00da      	lsls	r2, r3, #3
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	4413      	add	r3, r2
 80051b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	801a      	strh	r2, [r3, #0]
 80051da:	e017      	b.n	800520c <PCD_EP_ISR_Handler+0x692>
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d113      	bne.n	800520c <PCD_EP_ISR_Handler+0x692>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f2:	4413      	add	r3, r2
 80051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	00da      	lsls	r2, r3, #3
 80051fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fe:	4413      	add	r3, r2
 8005200:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2200      	movs	r2, #0
 800520a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800520c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f008 fad9 	bl	800d7ca <HAL_PCD_DataInStageCallback>
 8005218:	e051      	b.n	80052be <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800521a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d144      	bne.n	80052b0 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	4413      	add	r3, r2
 8005240:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800524a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800524e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005256:	429a      	cmp	r2, r3
 8005258:	d907      	bls.n	800526a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800525a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005266:	619a      	str	r2, [r3, #24]
 8005268:	e002      	b.n	8005270 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	2200      	movs	r2, #0
 800526e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f008 faa3 	bl	800d7ca <HAL_PCD_DataInStageCallback>
 8005284:	e01b      	b.n	80052be <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800528e:	441a      	add	r2, r3
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800529c:	441a      	add	r2, r3
 800529e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052a8:	4618      	mov	r0, r3
 80052aa:	f005 f94a 	bl	800a542 <USB_EPStartXfer>
 80052ae:	e006      	b.n	80052be <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80052b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80052b4:	461a      	mov	r2, r3
 80052b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f917 	bl	80054ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	b21b      	sxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f6ff ac5a 	blt.w	8004b84 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3758      	adds	r7, #88	; 0x58
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b088      	sub	sp, #32
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d07c      	beq.n	80053ec <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	4413      	add	r3, r2
 800530c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005316:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	8b7b      	ldrh	r3, [r7, #26]
 800531e:	429a      	cmp	r2, r3
 8005320:	d306      	bcc.n	8005330 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	8b7b      	ldrh	r3, [r7, #26]
 8005328:	1ad2      	subs	r2, r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	619a      	str	r2, [r3, #24]
 800532e:	e002      	b.n	8005336 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d123      	bne.n	8005386 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005358:	833b      	strh	r3, [r7, #24]
 800535a:	8b3b      	ldrh	r3, [r7, #24]
 800535c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005360:	833b      	strh	r3, [r7, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	8b3b      	ldrh	r3, [r7, #24]
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01f      	beq.n	80053d0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	82fb      	strh	r3, [r7, #22]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	8afb      	ldrh	r3, [r7, #22]
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053d0:	8b7b      	ldrh	r3, [r7, #26]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8085 	beq.w	80054e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6959      	ldr	r1, [r3, #20]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	891a      	ldrh	r2, [r3, #8]
 80053e4:	8b7b      	ldrh	r3, [r7, #26]
 80053e6:	f006 fd5e 	bl	800bea6 <USB_ReadPMA>
 80053ea:	e07a      	b.n	80054e2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	4413      	add	r3, r2
 8005406:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005410:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	8b7b      	ldrh	r3, [r7, #26]
 8005418:	429a      	cmp	r2, r3
 800541a:	d306      	bcc.n	800542a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	8b7b      	ldrh	r3, [r7, #26]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	619a      	str	r2, [r3, #24]
 8005428:	e002      	b.n	8005430 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2200      	movs	r2, #0
 800542e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d123      	bne.n	8005480 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	83fb      	strh	r3, [r7, #30]
 8005454:	8bfb      	ldrh	r3, [r7, #30]
 8005456:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800545a:	83fb      	strh	r3, [r7, #30]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	8bfb      	ldrh	r3, [r7, #30]
 800546c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547c:	b29b      	uxth	r3, r3
 800547e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11f      	bne.n	80054ca <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a4:	83bb      	strh	r3, [r7, #28]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	441a      	add	r2, r3
 80054b4:	8bbb      	ldrh	r3, [r7, #28]
 80054b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054ca:	8b7b      	ldrh	r3, [r7, #26]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6959      	ldr	r1, [r3, #20]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	895a      	ldrh	r2, [r3, #10]
 80054dc:	8b7b      	ldrh	r3, [r7, #26]
 80054de:	f006 fce2 	bl	800bea6 <USB_ReadPMA>
    }
  }

  return count;
 80054e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b0a2      	sub	sp, #136	; 0x88
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 81c5 	beq.w	8005890 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	4413      	add	r3, r2
 8005520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005536:	429a      	cmp	r2, r3
 8005538:	d907      	bls.n	800554a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	619a      	str	r2, [r3, #24]
 8005548:	e002      	b.n	8005550 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f040 80b9 	bne.w	80056cc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d126      	bne.n	80055b0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005570:	b29b      	uxth	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	4413      	add	r3, r2
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	00da      	lsls	r2, r3, #3
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	4413      	add	r3, r2
 8005584:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005594:	b29a      	uxth	r2, r3
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	e01a      	b.n	80055e6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d116      	bne.n	80055e6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	4413      	add	r3, r2
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	00da      	lsls	r2, r3, #3
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	4413      	add	r3, r2
 80055da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	2200      	movs	r2, #0
 80055e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d126      	bne.n	8005642 <HAL_PCD_EP_DB_Transmit+0x156>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005602:	b29b      	uxth	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	4413      	add	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	00da      	lsls	r2, r3, #3
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	4413      	add	r3, r2
 8005616:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005626:	b29a      	uxth	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29a      	uxth	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e017      	b.n	8005672 <HAL_PCD_EP_DB_Transmit+0x186>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d113      	bne.n	8005672 <HAL_PCD_EP_DB_Transmit+0x186>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	4413      	add	r3, r2
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	00da      	lsls	r2, r3, #3
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	4413      	add	r3, r2
 8005666:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2200      	movs	r2, #0
 8005670:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	4619      	mov	r1, r3
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f008 f8a6 	bl	800d7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 82d2 	beq.w	8005c2e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a4:	827b      	strh	r3, [r7, #18]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	8a7b      	ldrh	r3, [r7, #18]
 80056b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]
 80056ca:	e2b0      	b.n	8005c2e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d021      	beq.n	800571a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005720:	2b01      	cmp	r3, #1
 8005722:	f040 8284 	bne.w	8005c2e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	695a      	ldr	r2, [r3, #20]
 800572a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800572e:	441a      	add	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800573c:	441a      	add	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	429a      	cmp	r2, r3
 800574c:	d309      	bcc.n	8005762 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a1a      	ldr	r2, [r3, #32]
 8005758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575a:	1ad2      	subs	r2, r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	621a      	str	r2, [r3, #32]
 8005760:	e015      	b.n	800578e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800576a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800576e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005778:	e009      	b.n	800578e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d155      	bne.n	8005842 <HAL_PCD_EP_DB_Transmit+0x356>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	63bb      	str	r3, [r7, #56]	; 0x38
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	4413      	add	r3, r2
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	00da      	lsls	r2, r3, #3
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	4413      	add	r3, r2
 80057b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
 80057be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c0:	2b3e      	cmp	r3, #62	; 0x3e
 80057c2:	d916      	bls.n	80057f2 <HAL_PCD_EP_DB_Transmit+0x306>
 80057c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <HAL_PCD_EP_DB_Transmit+0x2ee>
 80057d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d6:	3b01      	subs	r3, #1
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	b29b      	uxth	r3, r3
 80057de:	029b      	lsls	r3, r3, #10
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	e043      	b.n	800587a <HAL_PCD_EP_DB_Transmit+0x38e>
 80057f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d112      	bne.n	800581e <HAL_PCD_EP_DB_Transmit+0x332>
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005802:	b29a      	uxth	r2, r3
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005816:	b29a      	uxth	r2, r3
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	e02d      	b.n	800587a <HAL_PCD_EP_DB_Transmit+0x38e>
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
 8005824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_PCD_EP_DB_Transmit+0x348>
 800582e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005830:	3301      	adds	r3, #1
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
 8005834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005836:	b29b      	uxth	r3, r3
 8005838:	029b      	lsls	r3, r3, #10
 800583a:	b29a      	uxth	r2, r3
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	e01b      	b.n	800587a <HAL_PCD_EP_DB_Transmit+0x38e>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d117      	bne.n	800587a <HAL_PCD_EP_DB_Transmit+0x38e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585e:	4413      	add	r3, r2
 8005860:	643b      	str	r3, [r7, #64]	; 0x40
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	00da      	lsls	r2, r3, #3
 8005868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586a:	4413      	add	r3, r2
 800586c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005874:	b29a      	uxth	r2, r3
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6959      	ldr	r1, [r3, #20]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	891a      	ldrh	r2, [r3, #8]
 8005886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	f006 faca 	bl	800be22 <USB_WritePMA>
 800588e:	e1ce      	b.n	8005c2e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005898:	b29b      	uxth	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4413      	add	r3, r2
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d307      	bcc.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058cc:	1ad2      	subs	r2, r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	619a      	str	r2, [r3, #24]
 80058d2:	e002      	b.n	80058da <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f040 80c4 	bne.w	8005a6c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d126      	bne.n	800593a <HAL_PCD_EP_DB_Transmit+0x44e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005900:	4413      	add	r3, r2
 8005902:	66bb      	str	r3, [r7, #104]	; 0x68
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	00da      	lsls	r2, r3, #3
 800590a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800590c:	4413      	add	r3, r2
 800590e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005912:	667b      	str	r3, [r7, #100]	; 0x64
 8005914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800591e:	b29a      	uxth	r2, r3
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005932:	b29a      	uxth	r2, r3
 8005934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e01a      	b.n	8005970 <HAL_PCD_EP_DB_Transmit+0x484>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d116      	bne.n	8005970 <HAL_PCD_EP_DB_Transmit+0x484>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	673b      	str	r3, [r7, #112]	; 0x70
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005950:	b29b      	uxth	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005956:	4413      	add	r3, r2
 8005958:	673b      	str	r3, [r7, #112]	; 0x70
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00da      	lsls	r2, r3, #3
 8005960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005962:	4413      	add	r3, r2
 8005964:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596c:	2200      	movs	r2, #0
 800596e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d12f      	bne.n	80059de <HAL_PCD_EP_DB_Transmit+0x4f2>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005996:	4413      	add	r3, r2
 8005998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	00da      	lsls	r2, r3, #3
 80059a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059bc:	b29a      	uxth	r2, r3
 80059be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e017      	b.n	8005a0e <HAL_PCD_EP_DB_Transmit+0x522>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d113      	bne.n	8005a0e <HAL_PCD_EP_DB_Transmit+0x522>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059f4:	4413      	add	r3, r2
 80059f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	00da      	lsls	r2, r3, #3
 80059fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a06:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	4619      	mov	r1, r3
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f007 fed8 	bl	800d7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f040 8104 	bne.w	8005c2e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]
 8005a6a:	e0e0      	b.n	8005c2e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d121      	bne.n	8005aba <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a90:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	441a      	add	r2, r3
 8005aa2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 80b4 	bne.w	8005c2e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	695a      	ldr	r2, [r3, #20]
 8005aca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ace:	441a      	add	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005adc:	441a      	add	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d309      	bcc.n	8005b02 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6a1a      	ldr	r2, [r3, #32]
 8005af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	621a      	str	r2, [r3, #32]
 8005b00:	e015      	b.n	8005b2e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005b0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b0e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b18:	e009      	b.n	8005b2e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	663b      	str	r3, [r7, #96]	; 0x60
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d155      	bne.n	8005be8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b50:	4413      	add	r3, r2
 8005b52:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	00da      	lsls	r2, r3, #3
 8005b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b62:	657b      	str	r3, [r7, #84]	; 0x54
 8005b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b66:	2b3e      	cmp	r3, #62	; 0x3e
 8005b68:	d916      	bls.n	8005b98 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	677b      	str	r3, [r7, #116]	; 0x74
 8005b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_PCD_EP_DB_Transmit+0x694>
 8005b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	677b      	str	r3, [r7, #116]	; 0x74
 8005b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e040      	b.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x72e>
 8005b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d112      	bne.n	8005bc4 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	e02a      	b.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x72e>
 8005bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	677b      	str	r3, [r7, #116]	; 0x74
 8005bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	677b      	str	r3, [r7, #116]	; 0x74
 8005bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	029b      	lsls	r3, r3, #10
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e018      	b.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x72e>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d114      	bne.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x72e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bfe:	4413      	add	r3, r2
 8005c00:	663b      	str	r3, [r7, #96]	; 0x60
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	00da      	lsls	r2, r3, #3
 8005c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c18:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6959      	ldr	r1, [r3, #20]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	895a      	ldrh	r2, [r3, #10]
 8005c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f006 f8fa 	bl	800be22 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c48:	823b      	strh	r3, [r7, #16]
 8005c4a:	8a3b      	ldrh	r3, [r7, #16]
 8005c4c:	f083 0310 	eor.w	r3, r3, #16
 8005c50:	823b      	strh	r3, [r7, #16]
 8005c52:	8a3b      	ldrh	r3, [r7, #16]
 8005c54:	f083 0320 	eor.w	r3, r3, #32
 8005c58:	823b      	strh	r3, [r7, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	8a3b      	ldrh	r3, [r7, #16]
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3788      	adds	r7, #136	; 0x88
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	817b      	strh	r3, [r7, #10]
 8005c96:	4613      	mov	r3, r2
 8005c98:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca6:	897b      	ldrh	r3, [r7, #10]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e009      	b.n	8005cd2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cbe:	897a      	ldrh	r2, [r7, #10]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cd2:	893b      	ldrh	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d107      	bne.n	8005ce8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	80da      	strh	r2, [r3, #6]
 8005ce6:	e00b      	b.n	8005d00 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2201      	movs	r2, #1
 8005cec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f043 0302 	orr.w	r3, r3, #2
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d141      	bne.n	8005df6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d72:	4b4b      	ldr	r3, [pc, #300]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7e:	d131      	bne.n	8005de4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d80:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	4a46      	ldr	r2, [pc, #280]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d90:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d98:	4a41      	ldr	r2, [pc, #260]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da0:	4b40      	ldr	r3, [pc, #256]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2232      	movs	r2, #50	; 0x32
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	4a3f      	ldr	r2, [pc, #252]	; (8005ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	0c9b      	lsrs	r3, r3, #18
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005db6:	e002      	b.n	8005dbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dbe:	4b38      	ldr	r3, [pc, #224]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dca:	d102      	bne.n	8005dd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f2      	bne.n	8005db8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dd2:	4b33      	ldr	r3, [pc, #204]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d158      	bne.n	8005e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e057      	b.n	8005e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005de4:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dea:	4a2d      	ldr	r2, [pc, #180]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005df4:	e04d      	b.n	8005e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfc:	d141      	bne.n	8005e82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dfe:	4b28      	ldr	r3, [pc, #160]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0a:	d131      	bne.n	8005e70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e12:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e1c:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e24:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2232      	movs	r2, #50	; 0x32
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	0c9b      	lsrs	r3, r3, #18
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e42:	e002      	b.n	8005e4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e56:	d102      	bne.n	8005e5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f2      	bne.n	8005e44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6a:	d112      	bne.n	8005e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e011      	b.n	8005e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e80:	e007      	b.n	8005e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e8a:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	20000034 	.word	0x20000034
 8005ea8:	431bde83 	.word	0x431bde83

08005eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e306      	b.n	80064cc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d075      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eca:	4b97      	ldr	r3, [pc, #604]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ed4:	4b94      	ldr	r3, [pc, #592]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b0c      	cmp	r3, #12
 8005ee2:	d102      	bne.n	8005eea <HAL_RCC_OscConfig+0x3e>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d002      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x44>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d10b      	bne.n	8005f08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	4b8d      	ldr	r3, [pc, #564]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d05b      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x108>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d157      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e2e1      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f10:	d106      	bne.n	8005f20 <HAL_RCC_OscConfig+0x74>
 8005f12:	4b85      	ldr	r3, [pc, #532]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a84      	ldr	r2, [pc, #528]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e01d      	b.n	8005f5c <HAL_RCC_OscConfig+0xb0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x98>
 8005f2a:	4b7f      	ldr	r3, [pc, #508]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a7e      	ldr	r2, [pc, #504]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	4b7c      	ldr	r3, [pc, #496]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a7b      	ldr	r2, [pc, #492]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e00b      	b.n	8005f5c <HAL_RCC_OscConfig+0xb0>
 8005f44:	4b78      	ldr	r3, [pc, #480]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a77      	ldr	r2, [pc, #476]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	4b75      	ldr	r3, [pc, #468]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a74      	ldr	r2, [pc, #464]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f64:	f7fd fb34 	bl	80035d0 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f6c:	f7fd fb30 	bl	80035d0 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b64      	cmp	r3, #100	; 0x64
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e2a6      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f7e:	4b6a      	ldr	r3, [pc, #424]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0xc0>
 8005f8a:	e014      	b.n	8005fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fd fb20 	bl	80035d0 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f94:	f7fd fb1c 	bl	80035d0 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b64      	cmp	r3, #100	; 0x64
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e292      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fa6:	4b60      	ldr	r3, [pc, #384]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0xe8>
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d075      	beq.n	80060ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc2:	4b59      	ldr	r3, [pc, #356]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
 8005fca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fcc:	4b56      	ldr	r3, [pc, #344]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d102      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x136>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d002      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x13c>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d11f      	bne.n	8006028 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe8:	4b4f      	ldr	r3, [pc, #316]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_OscConfig+0x154>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e265      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006000:	4b49      	ldr	r3, [pc, #292]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	061b      	lsls	r3, r3, #24
 800600e:	4946      	ldr	r1, [pc, #280]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006010:	4313      	orrs	r3, r2
 8006012:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006014:	4b45      	ldr	r3, [pc, #276]	; (800612c <HAL_RCC_OscConfig+0x280>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f7fd fa8d 	bl	8003538 <HAL_InitTick>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d043      	beq.n	80060ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e251      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d023      	beq.n	8006078 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006030:	4b3d      	ldr	r3, [pc, #244]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a3c      	ldr	r2, [pc, #240]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fd fac8 	bl	80035d0 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006044:	f7fd fac4 	bl	80035d0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e23a      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006056:	4b34      	ldr	r3, [pc, #208]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006062:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	061b      	lsls	r3, r3, #24
 8006070:	492d      	ldr	r1, [pc, #180]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006072:	4313      	orrs	r3, r2
 8006074:	604b      	str	r3, [r1, #4]
 8006076:	e01a      	b.n	80060ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006078:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 800607e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006084:	f7fd faa4 	bl	80035d0 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800608c:	f7fd faa0 	bl	80035d0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e216      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800609e:	4b22      	ldr	r3, [pc, #136]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1f0      	bne.n	800608c <HAL_RCC_OscConfig+0x1e0>
 80060aa:	e000      	b.n	80060ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d041      	beq.n	800613e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01c      	beq.n	80060fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 80060c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c8:	4a17      	ldr	r2, [pc, #92]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d2:	f7fd fa7d 	bl	80035d0 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060da:	f7fd fa79 	bl	80035d0 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e1ef      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 80060ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0ef      	beq.n	80060da <HAL_RCC_OscConfig+0x22e>
 80060fa:	e020      	b.n	800613e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 80060fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <HAL_RCC_OscConfig+0x27c>)
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610c:	f7fd fa60 	bl	80035d0 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006112:	e00d      	b.n	8006130 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006114:	f7fd fa5c 	bl	80035d0 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d906      	bls.n	8006130 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e1d2      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000
 800612c:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006130:	4b8c      	ldr	r3, [pc, #560]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1ea      	bne.n	8006114 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80a6 	beq.w	8006298 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614c:	2300      	movs	r3, #0
 800614e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006150:	4b84      	ldr	r3, [pc, #528]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_OscConfig+0x2b4>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_RCC_OscConfig+0x2b6>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006166:	4b7f      	ldr	r3, [pc, #508]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	4a7e      	ldr	r2, [pc, #504]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 800616c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006170:	6593      	str	r3, [r2, #88]	; 0x58
 8006172:	4b7c      	ldr	r3, [pc, #496]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800617e:	2301      	movs	r3, #1
 8006180:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006182:	4b79      	ldr	r3, [pc, #484]	; (8006368 <HAL_RCC_OscConfig+0x4bc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d118      	bne.n	80061c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800618e:	4b76      	ldr	r3, [pc, #472]	; (8006368 <HAL_RCC_OscConfig+0x4bc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a75      	ldr	r2, [pc, #468]	; (8006368 <HAL_RCC_OscConfig+0x4bc>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619a:	f7fd fa19 	bl	80035d0 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a2:	f7fd fa15 	bl	80035d0 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e18b      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061b4:	4b6c      	ldr	r3, [pc, #432]	; (8006368 <HAL_RCC_OscConfig+0x4bc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d108      	bne.n	80061da <HAL_RCC_OscConfig+0x32e>
 80061c8:	4b66      	ldr	r3, [pc, #408]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	4a65      	ldr	r2, [pc, #404]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80061d0:	f043 0301 	orr.w	r3, r3, #1
 80061d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061d8:	e024      	b.n	8006224 <HAL_RCC_OscConfig+0x378>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d110      	bne.n	8006204 <HAL_RCC_OscConfig+0x358>
 80061e2:	4b60      	ldr	r3, [pc, #384]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	4a5e      	ldr	r2, [pc, #376]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80061ea:	f043 0304 	orr.w	r3, r3, #4
 80061ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061f2:	4b5c      	ldr	r3, [pc, #368]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	4a5a      	ldr	r2, [pc, #360]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006202:	e00f      	b.n	8006224 <HAL_RCC_OscConfig+0x378>
 8006204:	4b57      	ldr	r3, [pc, #348]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	4a56      	ldr	r2, [pc, #344]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006214:	4b53      	ldr	r3, [pc, #332]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 800621c:	f023 0304 	bic.w	r3, r3, #4
 8006220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d016      	beq.n	800625a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fd f9d0 	bl	80035d0 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006232:	e00a      	b.n	800624a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fd f9cc 	bl	80035d0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e140      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800624a:	4b46      	ldr	r3, [pc, #280]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ed      	beq.n	8006234 <HAL_RCC_OscConfig+0x388>
 8006258:	e015      	b.n	8006286 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625a:	f7fd f9b9 	bl	80035d0 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006260:	e00a      	b.n	8006278 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fd f9b5 	bl	80035d0 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e129      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006278:	4b3a      	ldr	r3, [pc, #232]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ed      	bne.n	8006262 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006286:	7ffb      	ldrb	r3, [r7, #31]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628c:	4b35      	ldr	r3, [pc, #212]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	4a34      	ldr	r2, [pc, #208]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006296:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d03c      	beq.n	800631e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01c      	beq.n	80062e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062ac:	4b2d      	ldr	r3, [pc, #180]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80062ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062b2:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fd f988 	bl	80035d0 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062c4:	f7fd f984 	bl	80035d0 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e0fa      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062d6:	4b23      	ldr	r3, [pc, #140]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80062d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0ef      	beq.n	80062c4 <HAL_RCC_OscConfig+0x418>
 80062e4:	e01b      	b.n	800631e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062e6:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80062e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f6:	f7fd f96b 	bl	80035d0 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062fe:	f7fd f967 	bl	80035d0 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e0dd      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006310:	4b14      	ldr	r3, [pc, #80]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ef      	bne.n	80062fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80d1 	beq.w	80064ca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 030c 	and.w	r3, r3, #12
 8006330:	2b0c      	cmp	r3, #12
 8006332:	f000 808b 	beq.w	800644c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d15e      	bne.n	80063fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a08      	ldr	r2, [pc, #32]	; (8006364 <HAL_RCC_OscConfig+0x4b8>)
 8006344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634a:	f7fd f941 	bl	80035d0 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006350:	e00c      	b.n	800636c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006352:	f7fd f93d 	bl	80035d0 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d905      	bls.n	800636c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e0b3      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
 8006364:	40021000 	.word	0x40021000
 8006368:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800636c:	4b59      	ldr	r3, [pc, #356]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1ec      	bne.n	8006352 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006378:	4b56      	ldr	r3, [pc, #344]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	4b56      	ldr	r3, [pc, #344]	; (80064d8 <HAL_RCC_OscConfig+0x62c>)
 800637e:	4013      	ands	r3, r2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6a11      	ldr	r1, [r2, #32]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006388:	3a01      	subs	r2, #1
 800638a:	0112      	lsls	r2, r2, #4
 800638c:	4311      	orrs	r1, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006392:	0212      	lsls	r2, r2, #8
 8006394:	4311      	orrs	r1, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800639a:	0852      	lsrs	r2, r2, #1
 800639c:	3a01      	subs	r2, #1
 800639e:	0552      	lsls	r2, r2, #21
 80063a0:	4311      	orrs	r1, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063a6:	0852      	lsrs	r2, r2, #1
 80063a8:	3a01      	subs	r2, #1
 80063aa:	0652      	lsls	r2, r2, #25
 80063ac:	4311      	orrs	r1, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063b2:	06d2      	lsls	r2, r2, #27
 80063b4:	430a      	orrs	r2, r1
 80063b6:	4947      	ldr	r1, [pc, #284]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063bc:	4b45      	ldr	r3, [pc, #276]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a44      	ldr	r2, [pc, #272]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 80063c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063c8:	4b42      	ldr	r3, [pc, #264]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4a41      	ldr	r2, [pc, #260]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 80063ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fd f8fc 	bl	80035d0 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fd f8f8 	bl	80035d0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e06e      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ee:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x530>
 80063fa:	e066      	b.n	80064ca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fc:	4b35      	ldr	r3, [pc, #212]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 8006402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006406:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006408:	4b32      	ldr	r3, [pc, #200]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a31      	ldr	r2, [pc, #196]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006414:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4a2e      	ldr	r2, [pc, #184]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 800641a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800641e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006422:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fd f8d4 	bl	80035d0 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800642c:	f7fd f8d0 	bl	80035d0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e046      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800643e:	4b25      	ldr	r3, [pc, #148]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x580>
 800644a:	e03e      	b.n	80064ca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e039      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <HAL_RCC_OscConfig+0x628>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f003 0203 	and.w	r2, r3, #3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	429a      	cmp	r2, r3
 800646a:	d12c      	bne.n	80064c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	3b01      	subs	r3, #1
 8006478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d123      	bne.n	80064c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800648a:	429a      	cmp	r2, r3
 800648c:	d11b      	bne.n	80064c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d113      	bne.n	80064c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	3b01      	subs	r3, #1
 80064ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d109      	bne.n	80064c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	3b01      	subs	r3, #1
 80064c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d001      	beq.n	80064ca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40021000 	.word	0x40021000
 80064d8:	019f800c 	.word	0x019f800c

080064dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e11e      	b.n	8006732 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064f4:	4b91      	ldr	r3, [pc, #580]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d910      	bls.n	8006524 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006502:	4b8e      	ldr	r3, [pc, #568]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f023 020f 	bic.w	r2, r3, #15
 800650a:	498c      	ldr	r1, [pc, #560]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	4313      	orrs	r3, r2
 8006510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b8a      	ldr	r3, [pc, #552]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e106      	b.n	8006732 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d073      	beq.n	8006618 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b03      	cmp	r3, #3
 8006536:	d129      	bne.n	800658c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006538:	4b81      	ldr	r3, [pc, #516]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0f4      	b.n	8006732 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006548:	f000 f966 	bl	8006818 <RCC_GetSysClockFreqFromPLLSource>
 800654c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4a7c      	ldr	r2, [pc, #496]	; (8006744 <HAL_RCC_ClockConfig+0x268>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d93f      	bls.n	80065d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006556:	4b7a      	ldr	r3, [pc, #488]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800656a:	2b00      	cmp	r3, #0
 800656c:	d033      	beq.n	80065d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006572:	2b00      	cmp	r3, #0
 8006574:	d12f      	bne.n	80065d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006576:	4b72      	ldr	r3, [pc, #456]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800657e:	4a70      	ldr	r2, [pc, #448]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006584:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006586:	2380      	movs	r3, #128	; 0x80
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	e024      	b.n	80065d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d107      	bne.n	80065a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006594:	4b6a      	ldr	r3, [pc, #424]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d109      	bne.n	80065b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0c6      	b.n	8006732 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065a4:	4b66      	ldr	r3, [pc, #408]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0be      	b.n	8006732 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065b4:	f000 f8ce 	bl	8006754 <HAL_RCC_GetSysClockFreq>
 80065b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4a61      	ldr	r2, [pc, #388]	; (8006744 <HAL_RCC_ClockConfig+0x268>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d909      	bls.n	80065d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065c2:	4b5f      	ldr	r3, [pc, #380]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ca:	4a5d      	ldr	r2, [pc, #372]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80065cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065d6:	4b5a      	ldr	r3, [pc, #360]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f023 0203 	bic.w	r2, r3, #3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4957      	ldr	r1, [pc, #348]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e8:	f7fc fff2 	bl	80035d0 <HAL_GetTick>
 80065ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f0:	f7fc ffee 	bl	80035d0 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e095      	b.n	8006732 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006606:	4b4e      	ldr	r3, [pc, #312]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 020c 	and.w	r2, r3, #12
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	429a      	cmp	r2, r3
 8006616:	d1eb      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d023      	beq.n	800666c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006630:	4b43      	ldr	r3, [pc, #268]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	4a42      	ldr	r2, [pc, #264]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800663a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006648:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006650:	4a3b      	ldr	r2, [pc, #236]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006658:	4b39      	ldr	r3, [pc, #228]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4936      	ldr	r1, [pc, #216]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
 800666a:	e008      	b.n	800667e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d105      	bne.n	800667e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006672:	4b33      	ldr	r3, [pc, #204]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	4a32      	ldr	r2, [pc, #200]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800667c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800667e:	4b2f      	ldr	r3, [pc, #188]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d21d      	bcs.n	80066c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668c:	4b2b      	ldr	r3, [pc, #172]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f023 020f 	bic.w	r2, r3, #15
 8006694:	4929      	ldr	r1, [pc, #164]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	4313      	orrs	r3, r2
 800669a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800669c:	f7fc ff98 	bl	80035d0 <HAL_GetTick>
 80066a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a2:	e00a      	b.n	80066ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a4:	f7fc ff94 	bl	80035d0 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e03b      	b.n	8006732 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	4b20      	ldr	r3, [pc, #128]	; (800673c <HAL_RCC_ClockConfig+0x260>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d1ed      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d4:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4917      	ldr	r1, [pc, #92]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066f2:	4b13      	ldr	r3, [pc, #76]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	490f      	ldr	r1, [pc, #60]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 8006702:	4313      	orrs	r3, r2
 8006704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006706:	f000 f825 	bl	8006754 <HAL_RCC_GetSysClockFreq>
 800670a:	4602      	mov	r2, r0
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <HAL_RCC_ClockConfig+0x264>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	490c      	ldr	r1, [pc, #48]	; (8006748 <HAL_RCC_ClockConfig+0x26c>)
 8006718:	5ccb      	ldrb	r3, [r1, r3]
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	fa22 f303 	lsr.w	r3, r2, r3
 8006722:	4a0a      	ldr	r2, [pc, #40]	; (800674c <HAL_RCC_ClockConfig+0x270>)
 8006724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006726:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <HAL_RCC_ClockConfig+0x274>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7fc ff04 	bl	8003538 <HAL_InitTick>
 8006730:	4603      	mov	r3, r0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40022000 	.word	0x40022000
 8006740:	40021000 	.word	0x40021000
 8006744:	04c4b400 	.word	0x04c4b400
 8006748:	0800ea98 	.word	0x0800ea98
 800674c:	20000034 	.word	0x20000034
 8006750:	20000038 	.word	0x20000038

08006754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800675a:	4b2c      	ldr	r3, [pc, #176]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 030c 	and.w	r3, r3, #12
 8006762:	2b04      	cmp	r3, #4
 8006764:	d102      	bne.n	800676c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006766:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e047      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800676c:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 030c 	and.w	r3, r3, #12
 8006774:	2b08      	cmp	r3, #8
 8006776:	d102      	bne.n	800677e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006778:	4b26      	ldr	r3, [pc, #152]	; (8006814 <HAL_RCC_GetSysClockFreq+0xc0>)
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	e03e      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800677e:	4b23      	ldr	r3, [pc, #140]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b0c      	cmp	r3, #12
 8006788:	d136      	bne.n	80067f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800678a:	4b20      	ldr	r3, [pc, #128]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006794:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	3301      	adds	r3, #1
 80067a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d10c      	bne.n	80067c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067a8:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <HAL_RCC_GetSysClockFreq+0xc0>)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	4a16      	ldr	r2, [pc, #88]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 80067b2:	68d2      	ldr	r2, [r2, #12]
 80067b4:	0a12      	lsrs	r2, r2, #8
 80067b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	617b      	str	r3, [r7, #20]
      break;
 80067c0:	e00c      	b.n	80067dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	4a10      	ldr	r2, [pc, #64]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 80067cc:	68d2      	ldr	r2, [r2, #12]
 80067ce:	0a12      	lsrs	r2, r2, #8
 80067d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067d4:	fb02 f303 	mul.w	r3, r2, r3
 80067d8:	617b      	str	r3, [r7, #20]
      break;
 80067da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_RCC_GetSysClockFreq+0xb8>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	0e5b      	lsrs	r3, r3, #25
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	3301      	adds	r3, #1
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e001      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80067fc:	693b      	ldr	r3, [r7, #16]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	00f42400 	.word	0x00f42400
 8006814:	007a1200 	.word	0x007a1200

08006818 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006828:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	091b      	lsrs	r3, r3, #4
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d10c      	bne.n	8006856 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800683c:	4a17      	ldr	r2, [pc, #92]	; (800689c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	4a14      	ldr	r2, [pc, #80]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006846:	68d2      	ldr	r2, [r2, #12]
 8006848:	0a12      	lsrs	r2, r2, #8
 800684a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	617b      	str	r3, [r7, #20]
    break;
 8006854:	e00c      	b.n	8006870 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006856:	4a12      	ldr	r2, [pc, #72]	; (80068a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	fbb2 f3f3 	udiv	r3, r2, r3
 800685e:	4a0e      	ldr	r2, [pc, #56]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006860:	68d2      	ldr	r2, [r2, #12]
 8006862:	0a12      	lsrs	r2, r2, #8
 8006864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
    break;
 800686e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	0e5b      	lsrs	r3, r3, #25
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	3301      	adds	r3, #1
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800688a:	687b      	ldr	r3, [r7, #4]
}
 800688c:	4618      	mov	r0, r3
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40021000 	.word	0x40021000
 800689c:	007a1200 	.word	0x007a1200
 80068a0:	00f42400 	.word	0x00f42400

080068a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068ac:	2300      	movs	r3, #0
 80068ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068b0:	2300      	movs	r3, #0
 80068b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8098 	beq.w	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068c2:	2300      	movs	r3, #0
 80068c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c6:	4b43      	ldr	r3, [pc, #268]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10d      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d2:	4b40      	ldr	r3, [pc, #256]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	4a3f      	ldr	r2, [pc, #252]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068dc:	6593      	str	r3, [r2, #88]	; 0x58
 80068de:	4b3d      	ldr	r3, [pc, #244]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e6:	60bb      	str	r3, [r7, #8]
 80068e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ea:	2301      	movs	r3, #1
 80068ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ee:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a39      	ldr	r2, [pc, #228]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068fa:	f7fc fe69 	bl	80035d0 <HAL_GetTick>
 80068fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006900:	e009      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006902:	f7fc fe65 	bl	80035d0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d902      	bls.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	74fb      	strb	r3, [r7, #19]
        break;
 8006914:	e005      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006916:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0ef      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d159      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006928:	4b2a      	ldr	r3, [pc, #168]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006932:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01e      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	d019      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006944:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006950:	4b20      	ldr	r3, [pc, #128]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	4a1f      	ldr	r2, [pc, #124]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006960:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d016      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006982:	f7fc fe25 	bl	80035d0 <HAL_GetTick>
 8006986:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006988:	e00b      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698a:	f7fc fe21 	bl	80035d0 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	f241 3288 	movw	r2, #5000	; 0x1388
 8006998:	4293      	cmp	r3, r2
 800699a:	d902      	bls.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	74fb      	strb	r3, [r7, #19]
            break;
 80069a0:	e006      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a2:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0ec      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10b      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b6:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c4:	4903      	ldr	r1, [pc, #12]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069cc:	e008      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ce:	7cfb      	ldrb	r3, [r7, #19]
 80069d0:	74bb      	strb	r3, [r7, #18]
 80069d2:	e005      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069dc:	7cfb      	ldrb	r3, [r7, #19]
 80069de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069e0:	7c7b      	ldrb	r3, [r7, #17]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d105      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e6:	4ba7      	ldr	r3, [pc, #668]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	4aa6      	ldr	r2, [pc, #664]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069fe:	4ba1      	ldr	r3, [pc, #644]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a04:	f023 0203 	bic.w	r2, r3, #3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	499d      	ldr	r1, [pc, #628]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a20:	4b98      	ldr	r3, [pc, #608]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	f023 020c 	bic.w	r2, r3, #12
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	4995      	ldr	r1, [pc, #596]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a42:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	498c      	ldr	r1, [pc, #560]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a64:	4b87      	ldr	r3, [pc, #540]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	4984      	ldr	r1, [pc, #528]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a86:	4b7f      	ldr	r3, [pc, #508]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	497b      	ldr	r1, [pc, #492]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aa8:	4b76      	ldr	r3, [pc, #472]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	4973      	ldr	r1, [pc, #460]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aca:	4b6e      	ldr	r3, [pc, #440]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	496a      	ldr	r1, [pc, #424]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aec:	4b65      	ldr	r3, [pc, #404]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	4962      	ldr	r1, [pc, #392]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b0e:	4b5d      	ldr	r3, [pc, #372]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	4959      	ldr	r1, [pc, #356]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b30:	4b54      	ldr	r3, [pc, #336]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	4951      	ldr	r1, [pc, #324]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d015      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b52:	4b4c      	ldr	r3, [pc, #304]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	4948      	ldr	r1, [pc, #288]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b70:	d105      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b72:	4b44      	ldr	r3, [pc, #272]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	4a43      	ldr	r2, [pc, #268]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b7c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d015      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b8a:	4b3e      	ldr	r3, [pc, #248]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	493a      	ldr	r1, [pc, #232]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ba8:	d105      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006baa:	4b36      	ldr	r3, [pc, #216]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	4a35      	ldr	r2, [pc, #212]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bc2:	4b30      	ldr	r3, [pc, #192]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	492c      	ldr	r1, [pc, #176]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006be0:	d105      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be2:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bec:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d015      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bfa:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	491e      	ldr	r1, [pc, #120]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c18:	d105      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c24:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d015      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c32:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	4910      	ldr	r1, [pc, #64]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c50:	d105      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a0b      	ldr	r2, [pc, #44]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d018      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	4902      	ldr	r1, [pc, #8]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	e001      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c84:	40021000 	.word	0x40021000
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c8e:	d105      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c90:	4b21      	ldr	r3, [pc, #132]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d015      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	4918      	ldr	r1, [pc, #96]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d105      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cc8:	4b13      	ldr	r3, [pc, #76]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	4a12      	ldr	r2, [pc, #72]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d015      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cee:	490a      	ldr	r1, [pc, #40]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cfe:	d105      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40021000 	.word	0x40021000

08006d1c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e027      	b.n	8006d7e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7a5b      	ldrb	r3, [r3, #9]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d105      	bne.n	8006d44 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fc f8da 	bl	8002ef8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f023 0108 	bic.w	r1, r3, #8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0204 	orr.w	r2, r2, #4
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7a1b      	ldrb	r3, [r3, #8]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e044      	b.n	8006e2a <HAL_RNG_GenerateRandomNumber+0xa4>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7a5b      	ldrb	r3, [r3, #9]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d133      	bne.n	8006e18 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006db6:	f7fc fc0b 	bl	80035d0 <HAL_GetTick>
 8006dba:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006dbc:	e018      	b.n	8006df0 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006dbe:	f7fc fc07 	bl	80035d0 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d911      	bls.n	8006df0 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d00a      	beq.n	8006df0 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e01c      	b.n	8006e2a <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d1df      	bne.n	8006dbe <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	725a      	strb	r2, [r3, #9]
 8006e16:	e004      	b.n	8006e22 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	721a      	strb	r2, [r3, #8]

  return status;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e09d      	b.n	8006f80 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d108      	bne.n	8006e5e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e54:	d009      	beq.n	8006e6a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	61da      	str	r2, [r3, #28]
 8006e5c:	e005      	b.n	8006e6a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fc f8a9 	bl	8002fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eaa:	d902      	bls.n	8006eb2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e002      	b.n	8006eb8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ec0:	d007      	beq.n	8006ed2 <HAL_SPI_Init+0xa0>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eca:	d002      	beq.n	8006ed2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	ea42 0103 	orr.w	r1, r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	f003 0204 	and.w	r2, r3, #4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f4e:	ea42 0103 	orr.w	r1, r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_SPI_Transmit+0x22>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e158      	b.n	800725c <HAL_SPI_Transmit+0x2d4>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fb2:	f7fc fb0d 	bl	80035d0 <HAL_GetTick>
 8006fb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fcc:	e13d      	b.n	800724a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_SPI_Transmit+0x52>
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fde:	e134      	b.n	800724a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2203      	movs	r2, #3
 8006fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	88fa      	ldrh	r2, [r7, #6]
 8006ffe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702a:	d10f      	bne.n	800704c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800704a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d007      	beq.n	800706a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007068:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007072:	d94b      	bls.n	800710c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_SPI_Transmit+0xfa>
 800707c:	8afb      	ldrh	r3, [r7, #22]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d13e      	bne.n	8007100 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070a6:	e02b      	b.n	8007100 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d112      	bne.n	80070dc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	881a      	ldrh	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	1c9a      	adds	r2, r3, #2
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070da:	e011      	b.n	8007100 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070dc:	f7fc fa78 	bl	80035d0 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d803      	bhi.n	80070f4 <HAL_SPI_Transmit+0x16c>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d102      	bne.n	80070fa <HAL_SPI_Transmit+0x172>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070fe:	e0a4      	b.n	800724a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1ce      	bne.n	80070a8 <HAL_SPI_Transmit+0x120>
 800710a:	e07c      	b.n	8007206 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_SPI_Transmit+0x192>
 8007114:	8afb      	ldrh	r3, [r7, #22]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d170      	bne.n	80071fc <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b01      	cmp	r3, #1
 8007122:	d912      	bls.n	800714a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	881a      	ldrh	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	1c9a      	adds	r2, r3, #2
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b02      	subs	r3, #2
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007148:	e058      	b.n	80071fc <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007170:	e044      	b.n	80071fc <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b02      	cmp	r3, #2
 800717e:	d12b      	bne.n	80071d8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b01      	cmp	r3, #1
 8007188:	d912      	bls.n	80071b0 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	881a      	ldrh	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	1c9a      	adds	r2, r3, #2
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b02      	subs	r3, #2
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071ae:	e025      	b.n	80071fc <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071d6:	e011      	b.n	80071fc <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d8:	f7fc f9fa 	bl	80035d0 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d803      	bhi.n	80071f0 <HAL_SPI_Transmit+0x268>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d102      	bne.n	80071f6 <HAL_SPI_Transmit+0x26e>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071fa:	e026      	b.n	800724a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1b5      	bne.n	8007172 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fce4 	bl	8007bd8 <SPI_EndRxTxTransaction>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	77fb      	strb	r3, [r7, #31]
 8007246:	e000      	b.n	800724a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007248:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800725a:	7ffb      	ldrb	r3, [r7, #31]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3720      	adds	r7, #32
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007280:	d112      	bne.n	80072a8 <HAL_SPI_Receive+0x44>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10e      	bne.n	80072a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2204      	movs	r2, #4
 800728e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007292:	88fa      	ldrh	r2, [r7, #6]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f910 	bl	80074c4 <HAL_SPI_TransmitReceive>
 80072a4:	4603      	mov	r3, r0
 80072a6:	e109      	b.n	80074bc <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_SPI_Receive+0x52>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e102      	b.n	80074bc <HAL_SPI_Receive+0x258>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072be:	f7fc f987 	bl	80035d0 <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d002      	beq.n	80072d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072d0:	2302      	movs	r3, #2
 80072d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072d4:	e0e9      	b.n	80074aa <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <HAL_SPI_Receive+0x7e>
 80072dc:	88fb      	ldrh	r3, [r7, #6]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072e6:	e0e0      	b.n	80074aa <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2204      	movs	r2, #4
 80072ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007332:	d908      	bls.n	8007346 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007342:	605a      	str	r2, [r3, #4]
 8007344:	e007      	b.n	8007356 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800735e:	d10f      	bne.n	8007380 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800737e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	d007      	beq.n	800739e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800739c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073a6:	d867      	bhi.n	8007478 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073a8:	e030      	b.n	800740c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d117      	bne.n	80073e8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f103 020c 	add.w	r2, r3, #12
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	7812      	ldrb	r2, [r2, #0]
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073da:	b29b      	uxth	r3, r3
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80073e6:	e011      	b.n	800740c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073e8:	f7fc f8f2 	bl	80035d0 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d803      	bhi.n	8007400 <HAL_SPI_Receive+0x19c>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d102      	bne.n	8007406 <HAL_SPI_Receive+0x1a2>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	75fb      	strb	r3, [r7, #23]
          goto error;
 800740a:	e04e      	b.n	80074aa <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1c8      	bne.n	80073aa <HAL_SPI_Receive+0x146>
 8007418:	e034      	b.n	8007484 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b01      	cmp	r3, #1
 8007426:	d115      	bne.n	8007454 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	b292      	uxth	r2, r2
 8007434:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	1c9a      	adds	r2, r3, #2
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007452:	e011      	b.n	8007478 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007454:	f7fc f8bc 	bl	80035d0 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d803      	bhi.n	800746c <HAL_SPI_Receive+0x208>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746a:	d102      	bne.n	8007472 <HAL_SPI_Receive+0x20e>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007476:	e018      	b.n	80074aa <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ca      	bne.n	800741a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fb4d 	bl	8007b28 <SPI_EndRxTransaction>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	75fb      	strb	r3, [r7, #23]
 80074a6:	e000      	b.n	80074aa <HAL_SPI_Receive+0x246>
  }

error :
 80074a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074d2:	2301      	movs	r3, #1
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d101      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x26>
 80074e6:	2302      	movs	r3, #2
 80074e8:	e1fb      	b.n	80078e2 <HAL_SPI_TransmitReceive+0x41e>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074f2:	f7fc f86d 	bl	80035d0 <HAL_GetTick>
 80074f6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074fe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007506:	887b      	ldrh	r3, [r7, #2]
 8007508:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800750a:	887b      	ldrh	r3, [r7, #2]
 800750c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800750e:	7efb      	ldrb	r3, [r7, #27]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d00e      	beq.n	8007532 <HAL_SPI_TransmitReceive+0x6e>
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800751a:	d106      	bne.n	800752a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <HAL_SPI_TransmitReceive+0x66>
 8007524:	7efb      	ldrb	r3, [r7, #27]
 8007526:	2b04      	cmp	r3, #4
 8007528:	d003      	beq.n	8007532 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800752a:	2302      	movs	r3, #2
 800752c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007530:	e1cd      	b.n	80078ce <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_SPI_TransmitReceive+0x80>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_SPI_TransmitReceive+0x80>
 800753e:	887b      	ldrh	r3, [r7, #2]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800754a:	e1c0      	b.n	80078ce <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b04      	cmp	r3, #4
 8007556:	d003      	beq.n	8007560 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2205      	movs	r2, #5
 800755c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	887a      	ldrh	r2, [r7, #2]
 8007570:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	887a      	ldrh	r2, [r7, #2]
 8007586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	887a      	ldrh	r2, [r7, #2]
 800758c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075a2:	d802      	bhi.n	80075aa <HAL_SPI_TransmitReceive+0xe6>
 80075a4:	8a3b      	ldrh	r3, [r7, #16]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d908      	bls.n	80075bc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075b8:	605a      	str	r2, [r3, #4]
 80075ba:	e007      	b.n	80075cc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d007      	beq.n	80075ea <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075f2:	d97c      	bls.n	80076ee <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x13e>
 80075fc:	8a7b      	ldrh	r3, [r7, #18]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d169      	bne.n	80076d6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	881a      	ldrh	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	1c9a      	adds	r2, r3, #2
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007626:	e056      	b.n	80076d6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b02      	cmp	r3, #2
 8007634:	d11b      	bne.n	800766e <HAL_SPI_TransmitReceive+0x1aa>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d016      	beq.n	800766e <HAL_SPI_TransmitReceive+0x1aa>
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	2b01      	cmp	r3, #1
 8007644:	d113      	bne.n	800766e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	881a      	ldrh	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	1c9a      	adds	r2, r3, #2
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007660:	b29b      	uxth	r3, r3
 8007662:	3b01      	subs	r3, #1
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b01      	cmp	r3, #1
 800767a:	d11c      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x1f2>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007682:	b29b      	uxth	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d016      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	b292      	uxth	r2, r2
 8007694:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	1c9a      	adds	r2, r3, #2
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076b2:	2301      	movs	r3, #1
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076b6:	f7fb ff8b 	bl	80035d0 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d807      	bhi.n	80076d6 <HAL_SPI_TransmitReceive+0x212>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076cc:	d003      	beq.n	80076d6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076d4:	e0fb      	b.n	80078ce <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1a3      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x164>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d19d      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x164>
 80076ec:	e0df      	b.n	80078ae <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x23a>
 80076f6:	8a7b      	ldrh	r3, [r7, #18]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f040 80cb 	bne.w	8007894 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	d912      	bls.n	800772e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b02      	subs	r3, #2
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800772c:	e0b2      	b.n	8007894 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	330c      	adds	r3, #12
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007754:	e09e      	b.n	8007894 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b02      	cmp	r3, #2
 8007762:	d134      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x30a>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d02f      	beq.n	80077ce <HAL_SPI_TransmitReceive+0x30a>
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	2b01      	cmp	r3, #1
 8007772:	d12c      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	d912      	bls.n	80077a4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	881a      	ldrh	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	1c9a      	adds	r2, r3, #2
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b02      	subs	r3, #2
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077a2:	e012      	b.n	80077ca <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	7812      	ldrb	r2, [r2, #0]
 80077b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d148      	bne.n	800786e <HAL_SPI_TransmitReceive+0x3aa>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d042      	beq.n	800786e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d923      	bls.n	800783c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	b292      	uxth	r2, r2
 8007800:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b02      	subs	r3, #2
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b01      	cmp	r3, #1
 8007828:	d81f      	bhi.n	800786a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	e016      	b.n	800786a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f103 020c 	add.w	r2, r3, #12
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	7812      	ldrb	r2, [r2, #0]
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800786a:	2301      	movs	r3, #1
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800786e:	f7fb feaf 	bl	80035d0 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787a:	429a      	cmp	r2, r3
 800787c:	d803      	bhi.n	8007886 <HAL_SPI_TransmitReceive+0x3c2>
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d102      	bne.n	800788c <HAL_SPI_TransmitReceive+0x3c8>
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007892:	e01c      	b.n	80078ce <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	f47f af5b 	bne.w	8007756 <HAL_SPI_TransmitReceive+0x292>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f47f af54 	bne.w	8007756 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f990 	bl	8007bd8 <SPI_EndRxTxTransaction>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d006      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	661a      	str	r2, [r3, #96]	; 0x60
 80078ca:	e000      	b.n	80078ce <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80078cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3728      	adds	r7, #40	; 0x28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078fc:	f7fb fe68 	bl	80035d0 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	4413      	add	r3, r2
 800790a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800790c:	f7fb fe60 	bl	80035d0 <HAL_GetTick>
 8007910:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007912:	4b39      	ldr	r3, [pc, #228]	; (80079f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	015b      	lsls	r3, r3, #5
 8007918:	0d1b      	lsrs	r3, r3, #20
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	fb02 f303 	mul.w	r3, r2, r3
 8007920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007922:	e054      	b.n	80079ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d050      	beq.n	80079ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800792c:	f7fb fe50 	bl	80035d0 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	429a      	cmp	r2, r3
 800793a:	d902      	bls.n	8007942 <SPI_WaitFlagStateUntilTimeout+0x56>
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d13d      	bne.n	80079be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800795a:	d111      	bne.n	8007980 <SPI_WaitFlagStateUntilTimeout+0x94>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007964:	d004      	beq.n	8007970 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796e:	d107      	bne.n	8007980 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007988:	d10f      	bne.n	80079aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e017      	b.n	80079ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	4013      	ands	r3, r2
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	bf0c      	ite	eq
 80079de:	2301      	moveq	r3, #1
 80079e0:	2300      	movne	r3, #0
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d19b      	bne.n	8007924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000034 	.word	0x20000034

080079fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08a      	sub	sp, #40	; 0x28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a0e:	f7fb fddf 	bl	80035d0 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	1a9b      	subs	r3, r3, r2
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a1e:	f7fb fdd7 	bl	80035d0 <HAL_GetTick>
 8007a22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a2c:	4b3d      	ldr	r3, [pc, #244]	; (8007b24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4613      	mov	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	00da      	lsls	r2, r3, #3
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	0d1b      	lsrs	r3, r3, #20
 8007a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3e:	fb02 f303 	mul.w	r3, r2, r3
 8007a42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a44:	e060      	b.n	8007b08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a4c:	d107      	bne.n	8007a5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d050      	beq.n	8007b08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a66:	f7fb fdb3 	bl	80035d0 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d902      	bls.n	8007a7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d13d      	bne.n	8007af8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a94:	d111      	bne.n	8007aba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a9e:	d004      	beq.n	8007aaa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa8:	d107      	bne.n	8007aba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ab8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac2:	d10f      	bne.n	8007ae4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ae2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e010      	b.n	8007b1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4013      	ands	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d196      	bne.n	8007a46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3728      	adds	r7, #40	; 0x28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000034 	.word	0x20000034

08007b28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b3c:	d111      	bne.n	8007b62 <SPI_EndRxTransaction+0x3a>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b46:	d004      	beq.n	8007b52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b50:	d107      	bne.n	8007b62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b60:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2180      	movs	r1, #128	; 0x80
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff febd 	bl	80078ec <SPI_WaitFlagStateUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7c:	f043 0220 	orr.w	r2, r3, #32
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e023      	b.n	8007bd0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b90:	d11d      	bne.n	8007bce <SPI_EndRxTransaction+0xa6>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b9a:	d004      	beq.n	8007ba6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba4:	d113      	bne.n	8007bce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff ff22 	bl	80079fc <SPI_WaitFifoStateUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc2:	f043 0220 	orr.w	r2, r3, #32
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e000      	b.n	8007bd0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff ff03 	bl	80079fc <SPI_WaitFifoStateUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d007      	beq.n	8007c0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c00:	f043 0220 	orr.w	r2, r3, #32
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e027      	b.n	8007c5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fe68 	bl	80078ec <SPI_WaitFlagStateUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d007      	beq.n	8007c32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c26:	f043 0220 	orr.w	r2, r3, #32
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e014      	b.n	8007c5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff fedc 	bl	80079fc <SPI_WaitFifoStateUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4e:	f043 0220 	orr.w	r2, r3, #32
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e000      	b.n	8007c5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e049      	b.n	8007d0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fb fb8c 	bl	80033a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f001 f868 	bl	8008d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e049      	b.n	8007db8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f841 	bl	8007dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f001 f811 	bl	8008d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	e03c      	b.n	8007e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d109      	bne.n	8007e1a <HAL_TIM_PWM_Start_DMA+0x46>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	bf0c      	ite	eq
 8007e12:	2301      	moveq	r3, #1
 8007e14:	2300      	movne	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	e02f      	b.n	8007e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d109      	bne.n	8007e34 <HAL_TIM_PWM_Start_DMA+0x60>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	e022      	b.n	8007e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b0c      	cmp	r3, #12
 8007e38:	d109      	bne.n	8007e4e <HAL_TIM_PWM_Start_DMA+0x7a>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	e015      	b.n	8007e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b10      	cmp	r3, #16
 8007e52:	d109      	bne.n	8007e68 <HAL_TIM_PWM_Start_DMA+0x94>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	e008      	b.n	8007e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e1b0      	b.n	80081e4 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d109      	bne.n	8007e9c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	e03c      	b.n	8007f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d109      	bne.n	8007eb6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	bf0c      	ite	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	2300      	movne	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	e02f      	b.n	8007f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d109      	bne.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	e022      	b.n	8007f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b0c      	cmp	r3, #12
 8007ed4:	d109      	bne.n	8007eea <HAL_TIM_PWM_Start_DMA+0x116>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	bf0c      	ite	eq
 8007ee2:	2301      	moveq	r3, #1
 8007ee4:	2300      	movne	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	e015      	b.n	8007f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b10      	cmp	r3, #16
 8007eee:	d109      	bne.n	8007f04 <HAL_TIM_PWM_Start_DMA+0x130>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	e008      	b.n	8007f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d034      	beq.n	8007f84 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <HAL_TIM_PWM_Start_DMA+0x156>
 8007f20:	887b      	ldrh	r3, [r7, #2]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e15c      	b.n	80081e4 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d104      	bne.n	8007f3a <HAL_TIM_PWM_Start_DMA+0x166>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f38:	e026      	b.n	8007f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIM_PWM_Start_DMA+0x176>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f48:	e01e      	b.n	8007f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d104      	bne.n	8007f5a <HAL_TIM_PWM_Start_DMA+0x186>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f58:	e016      	b.n	8007f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b0c      	cmp	r3, #12
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_PWM_Start_DMA+0x196>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f68:	e00e      	b.n	8007f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b10      	cmp	r3, #16
 8007f6e:	d104      	bne.n	8007f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f78:	e006      	b.n	8007f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f82:	e001      	b.n	8007f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e12d      	b.n	80081e4 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b0c      	cmp	r3, #12
 8007f8c:	f200 80ae 	bhi.w	80080ec <HAL_TIM_PWM_Start_DMA+0x318>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fcd 	.word	0x08007fcd
 8007f9c:	080080ed 	.word	0x080080ed
 8007fa0:	080080ed 	.word	0x080080ed
 8007fa4:	080080ed 	.word	0x080080ed
 8007fa8:	08008015 	.word	0x08008015
 8007fac:	080080ed 	.word	0x080080ed
 8007fb0:	080080ed 	.word	0x080080ed
 8007fb4:	080080ed 	.word	0x080080ed
 8007fb8:	0800805d 	.word	0x0800805d
 8007fbc:	080080ed 	.word	0x080080ed
 8007fc0:	080080ed 	.word	0x080080ed
 8007fc4:	080080ed 	.word	0x080080ed
 8007fc8:	080080a5 	.word	0x080080a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	4a86      	ldr	r2, [pc, #536]	; (80081ec <HAL_TIM_PWM_Start_DMA+0x418>)
 8007fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	4a85      	ldr	r2, [pc, #532]	; (80081f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007fda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	4a84      	ldr	r2, [pc, #528]	; (80081f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3334      	adds	r3, #52	; 0x34
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	f7fb fda8 	bl	8003b48 <HAL_DMA_Start_IT>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e0f0      	b.n	80081e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008010:	60da      	str	r2, [r3, #12]
      break;
 8008012:	e06e      	b.n	80080f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	4a74      	ldr	r2, [pc, #464]	; (80081ec <HAL_TIM_PWM_Start_DMA+0x418>)
 800801a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	4a73      	ldr	r2, [pc, #460]	; (80081f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008022:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	4a72      	ldr	r2, [pc, #456]	; (80081f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 800802a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3338      	adds	r3, #56	; 0x38
 8008038:	461a      	mov	r2, r3
 800803a:	887b      	ldrh	r3, [r7, #2]
 800803c:	f7fb fd84 	bl	8003b48 <HAL_DMA_Start_IT>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e0cc      	b.n	80081e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008058:	60da      	str	r2, [r3, #12]
      break;
 800805a:	e04a      	b.n	80080f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	4a62      	ldr	r2, [pc, #392]	; (80081ec <HAL_TIM_PWM_Start_DMA+0x418>)
 8008062:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a61      	ldr	r2, [pc, #388]	; (80081f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800806a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	4a60      	ldr	r2, [pc, #384]	; (80081f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	333c      	adds	r3, #60	; 0x3c
 8008080:	461a      	mov	r2, r3
 8008082:	887b      	ldrh	r3, [r7, #2]
 8008084:	f7fb fd60 	bl	8003b48 <HAL_DMA_Start_IT>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e0a8      	b.n	80081e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080a0:	60da      	str	r2, [r3, #12]
      break;
 80080a2:	e026      	b.n	80080f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	4a50      	ldr	r2, [pc, #320]	; (80081ec <HAL_TIM_PWM_Start_DMA+0x418>)
 80080aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b0:	4a4f      	ldr	r2, [pc, #316]	; (80081f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80080b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	4a4e      	ldr	r2, [pc, #312]	; (80081f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 80080ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3340      	adds	r3, #64	; 0x40
 80080c8:	461a      	mov	r2, r3
 80080ca:	887b      	ldrh	r3, [r7, #2]
 80080cc:	f7fb fd3c 	bl	8003b48 <HAL_DMA_Start_IT>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e084      	b.n	80081e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080e8:	60da      	str	r2, [r3, #12]
      break;
 80080ea:	e002      	b.n	80080f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	75fb      	strb	r3, [r7, #23]
      break;
 80080f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d174      	bne.n	80081e2 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2201      	movs	r2, #1
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	4618      	mov	r0, r3
 8008102:	f001 fa9d 	bl	8009640 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a3b      	ldr	r2, [pc, #236]	; (80081f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d018      	beq.n	8008142 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a39      	ldr	r2, [pc, #228]	; (80081fc <HAL_TIM_PWM_Start_DMA+0x428>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <HAL_TIM_PWM_Start_DMA+0x36e>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a38      	ldr	r2, [pc, #224]	; (8008200 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00e      	beq.n	8008142 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a36      	ldr	r2, [pc, #216]	; (8008204 <HAL_TIM_PWM_Start_DMA+0x430>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d009      	beq.n	8008142 <HAL_TIM_PWM_Start_DMA+0x36e>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a35      	ldr	r2, [pc, #212]	; (8008208 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d004      	beq.n	8008142 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a33      	ldr	r2, [pc, #204]	; (800820c <HAL_TIM_PWM_Start_DMA+0x438>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d101      	bne.n	8008146 <HAL_TIM_PWM_Start_DMA+0x372>
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <HAL_TIM_PWM_Start_DMA+0x374>
 8008146:	2300      	movs	r3, #0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800815a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a25      	ldr	r2, [pc, #148]	; (80081f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d01d      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800816e:	d018      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a26      	ldr	r2, [pc, #152]	; (8008210 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d013      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a25      	ldr	r2, [pc, #148]	; (8008214 <HAL_TIM_PWM_Start_DMA+0x440>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00e      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1c      	ldr	r2, [pc, #112]	; (80081fc <HAL_TIM_PWM_Start_DMA+0x428>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d009      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1b      	ldr	r2, [pc, #108]	; (8008200 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d004      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1b      	ldr	r2, [pc, #108]	; (800820c <HAL_TIM_PWM_Start_DMA+0x438>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d115      	bne.n	80081ce <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <HAL_TIM_PWM_Start_DMA+0x444>)
 80081aa:	4013      	ands	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b06      	cmp	r3, #6
 80081b2:	d015      	beq.n	80081e0 <HAL_TIM_PWM_Start_DMA+0x40c>
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ba:	d011      	beq.n	80081e0 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081cc:	e008      	b.n	80081e0 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e000      	b.n	80081e2 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	08008c67 	.word	0x08008c67
 80081f0:	08008d0f 	.word	0x08008d0f
 80081f4:	08008bd5 	.word	0x08008bd5
 80081f8:	40012c00 	.word	0x40012c00
 80081fc:	40013400 	.word	0x40013400
 8008200:	40014000 	.word	0x40014000
 8008204:	40014400 	.word	0x40014400
 8008208:	40014800 	.word	0x40014800
 800820c:	40015000 	.word	0x40015000
 8008210:	40000400 	.word	0x40000400
 8008214:	40000800 	.word	0x40000800
 8008218:	00010007 	.word	0x00010007

0800821c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d855      	bhi.n	80082dc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800826d 	.word	0x0800826d
 800823c:	080082dd 	.word	0x080082dd
 8008240:	080082dd 	.word	0x080082dd
 8008244:	080082dd 	.word	0x080082dd
 8008248:	08008289 	.word	0x08008289
 800824c:	080082dd 	.word	0x080082dd
 8008250:	080082dd 	.word	0x080082dd
 8008254:	080082dd 	.word	0x080082dd
 8008258:	080082a5 	.word	0x080082a5
 800825c:	080082dd 	.word	0x080082dd
 8008260:	080082dd 	.word	0x080082dd
 8008264:	080082dd 	.word	0x080082dd
 8008268:	080082c1 	.word	0x080082c1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800827a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	4618      	mov	r0, r3
 8008282:	f7fb fcdc 	bl	8003c3e <HAL_DMA_Abort_IT>
      break;
 8008286:	e02c      	b.n	80082e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008296:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	4618      	mov	r0, r3
 800829e:	f7fb fcce 	bl	8003c3e <HAL_DMA_Abort_IT>
      break;
 80082a2:	e01e      	b.n	80082e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fb fcc0 	bl	8003c3e <HAL_DMA_Abort_IT>
      break;
 80082be:	e010      	b.n	80082e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fb fcb2 	bl	8003c3e <HAL_DMA_Abort_IT>
      break;
 80082da:	e002      	b.n	80082e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
      break;
 80082e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f040 8086 	bne.w	80083f6 <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 f9a4 	bl	8009640 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a40      	ldr	r2, [pc, #256]	; (8008400 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d018      	beq.n	8008334 <HAL_TIM_PWM_Stop_DMA+0x118>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a3f      	ldr	r2, [pc, #252]	; (8008404 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d013      	beq.n	8008334 <HAL_TIM_PWM_Stop_DMA+0x118>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a3d      	ldr	r2, [pc, #244]	; (8008408 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00e      	beq.n	8008334 <HAL_TIM_PWM_Stop_DMA+0x118>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a3c      	ldr	r2, [pc, #240]	; (800840c <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d009      	beq.n	8008334 <HAL_TIM_PWM_Stop_DMA+0x118>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a3a      	ldr	r2, [pc, #232]	; (8008410 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d004      	beq.n	8008334 <HAL_TIM_PWM_Stop_DMA+0x118>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a39      	ldr	r2, [pc, #228]	; (8008414 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d101      	bne.n	8008338 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8008334:	2301      	movs	r3, #1
 8008336:	e000      	b.n	800833a <HAL_TIM_PWM_Stop_DMA+0x11e>
 8008338:	2300      	movs	r3, #0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d017      	beq.n	800836e <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	f241 1311 	movw	r3, #4369	; 0x1111
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10f      	bne.n	800836e <HAL_TIM_PWM_Stop_DMA+0x152>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6a1a      	ldr	r2, [r3, #32]
 8008354:	f244 4344 	movw	r3, #17476	; 0x4444
 8008358:	4013      	ands	r3, r2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d107      	bne.n	800836e <HAL_TIM_PWM_Stop_DMA+0x152>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800836c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6a1a      	ldr	r2, [r3, #32]
 8008374:	f241 1311 	movw	r3, #4369	; 0x1111
 8008378:	4013      	ands	r3, r2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10f      	bne.n	800839e <HAL_TIM_PWM_Stop_DMA+0x182>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6a1a      	ldr	r2, [r3, #32]
 8008384:	f244 4344 	movw	r3, #17476	; 0x4444
 8008388:	4013      	ands	r3, r2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d107      	bne.n	800839e <HAL_TIM_PWM_Stop_DMA+0x182>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0201 	bic.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d104      	bne.n	80083ae <HAL_TIM_PWM_Stop_DMA+0x192>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083ac:	e023      	b.n	80083f6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d104      	bne.n	80083be <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083bc:	e01b      	b.n	80083f6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d104      	bne.n	80083ce <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083cc:	e013      	b.n	80083f6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d104      	bne.n	80083de <HAL_TIM_PWM_Stop_DMA+0x1c2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083dc:	e00b      	b.n	80083f6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d104      	bne.n	80083ee <HAL_TIM_PWM_Stop_DMA+0x1d2>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083ec:	e003      	b.n	80083f6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40012c00 	.word	0x40012c00
 8008404:	40013400 	.word	0x40013400
 8008408:	40014000 	.word	0x40014000
 800840c:	40014400 	.word	0x40014400
 8008410:	40014800 	.word	0x40014800
 8008414:	40015000 	.word	0x40015000

08008418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b02      	cmp	r3, #2
 800842c:	d122      	bne.n	8008474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b02      	cmp	r3, #2
 800843a:	d11b      	bne.n	8008474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0202 	mvn.w	r2, #2
 8008444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fb88 	bl	8008b70 <HAL_TIM_IC_CaptureCallback>
 8008460:	e005      	b.n	800846e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fb7a 	bl	8008b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fb8b 	bl	8008b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	2b04      	cmp	r3, #4
 8008480:	d122      	bne.n	80084c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b04      	cmp	r3, #4
 800848e:	d11b      	bne.n	80084c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f06f 0204 	mvn.w	r2, #4
 8008498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fb5e 	bl	8008b70 <HAL_TIM_IC_CaptureCallback>
 80084b4:	e005      	b.n	80084c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fb50 	bl	8008b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fb61 	bl	8008b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d122      	bne.n	800851c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d11b      	bne.n	800851c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f06f 0208 	mvn.w	r2, #8
 80084ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2204      	movs	r2, #4
 80084f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fb34 	bl	8008b70 <HAL_TIM_IC_CaptureCallback>
 8008508:	e005      	b.n	8008516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fb26 	bl	8008b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb37 	bl	8008b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f003 0310 	and.w	r3, r3, #16
 8008526:	2b10      	cmp	r3, #16
 8008528:	d122      	bne.n	8008570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b10      	cmp	r3, #16
 8008536:	d11b      	bne.n	8008570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0210 	mvn.w	r2, #16
 8008540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2208      	movs	r2, #8
 8008546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fb0a 	bl	8008b70 <HAL_TIM_IC_CaptureCallback>
 800855c:	e005      	b.n	800856a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fafc 	bl	8008b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb0d 	bl	8008b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b01      	cmp	r3, #1
 800857c:	d10e      	bne.n	800859c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b01      	cmp	r3, #1
 800858a:	d107      	bne.n	800859c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f06f 0201 	mvn.w	r2, #1
 8008594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fad6 	bl	8008b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a6:	2b80      	cmp	r3, #128	; 0x80
 80085a8:	d10e      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b4:	2b80      	cmp	r3, #128	; 0x80
 80085b6:	d107      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 f9ac 	bl	8009920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d6:	d10e      	bne.n	80085f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d107      	bne.n	80085f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f99f 	bl	8009934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d10e      	bne.n	8008622 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860e:	2b40      	cmp	r3, #64	; 0x40
 8008610:	d107      	bne.n	8008622 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800861a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fac5 	bl	8008bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b20      	cmp	r3, #32
 800862e:	d10e      	bne.n	800864e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b20      	cmp	r3, #32
 800863c:	d107      	bne.n	800864e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f06f 0220 	mvn.w	r2, #32
 8008646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 f95f 	bl	800990c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800865c:	d10f      	bne.n	800867e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800866c:	d107      	bne.n	800867e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f965 	bl	8009948 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800868c:	d10f      	bne.n	80086ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800869c:	d107      	bne.n	80086ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80086a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f957 	bl	800995c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086bc:	d10f      	bne.n	80086de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086cc:	d107      	bne.n	80086de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80086d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 f949 	bl	8009970 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086ec:	d10f      	bne.n	800870e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086fc:	d107      	bne.n	800870e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 f93b 	bl	8009984 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008732:	2302      	movs	r3, #2
 8008734:	e0ff      	b.n	8008936 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b14      	cmp	r3, #20
 8008742:	f200 80f0 	bhi.w	8008926 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	080087a1 	.word	0x080087a1
 8008750:	08008927 	.word	0x08008927
 8008754:	08008927 	.word	0x08008927
 8008758:	08008927 	.word	0x08008927
 800875c:	080087e1 	.word	0x080087e1
 8008760:	08008927 	.word	0x08008927
 8008764:	08008927 	.word	0x08008927
 8008768:	08008927 	.word	0x08008927
 800876c:	08008823 	.word	0x08008823
 8008770:	08008927 	.word	0x08008927
 8008774:	08008927 	.word	0x08008927
 8008778:	08008927 	.word	0x08008927
 800877c:	08008863 	.word	0x08008863
 8008780:	08008927 	.word	0x08008927
 8008784:	08008927 	.word	0x08008927
 8008788:	08008927 	.word	0x08008927
 800878c:	080088a5 	.word	0x080088a5
 8008790:	08008927 	.word	0x08008927
 8008794:	08008927 	.word	0x08008927
 8008798:	08008927 	.word	0x08008927
 800879c:	080088e5 	.word	0x080088e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fb84 	bl	8008eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0208 	orr.w	r2, r2, #8
 80087ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0204 	bic.w	r2, r2, #4
 80087ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6999      	ldr	r1, [r3, #24]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	619a      	str	r2, [r3, #24]
      break;
 80087de:	e0a5      	b.n	800892c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fbfe 	bl	8008fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800880a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6999      	ldr	r1, [r3, #24]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	021a      	lsls	r2, r3, #8
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	619a      	str	r2, [r3, #24]
      break;
 8008820:	e084      	b.n	800892c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fc71 	bl	8009110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69da      	ldr	r2, [r3, #28]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0208 	orr.w	r2, r2, #8
 800883c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0204 	bic.w	r2, r2, #4
 800884c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69d9      	ldr	r1, [r3, #28]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	61da      	str	r2, [r3, #28]
      break;
 8008860:	e064      	b.n	800892c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 fce3 	bl	8009234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800887c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69d9      	ldr	r1, [r3, #28]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	021a      	lsls	r2, r3, #8
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	61da      	str	r2, [r3, #28]
      break;
 80088a2:	e043      	b.n	800892c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fd56 	bl	800935c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0208 	orr.w	r2, r2, #8
 80088be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0204 	bic.w	r2, r2, #4
 80088ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80088e2:	e023      	b.n	800892c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68b9      	ldr	r1, [r7, #8]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fda0 	bl	8009430 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800890e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	021a      	lsls	r2, r3, #8
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008924:	e002      	b.n	800892c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
      break;
 800892a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop

08008940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_TIM_ConfigClockSource+0x1c>
 8008958:	2302      	movs	r3, #2
 800895a:	e0e6      	b.n	8008b2a <HAL_TIM_ConfigClockSource+0x1ea>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800897a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800897e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a67      	ldr	r2, [pc, #412]	; (8008b34 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	f000 80b1 	beq.w	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 800899c:	4a65      	ldr	r2, [pc, #404]	; (8008b34 <HAL_TIM_ConfigClockSource+0x1f4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	f200 80b6 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 80089a4:	4a64      	ldr	r2, [pc, #400]	; (8008b38 <HAL_TIM_ConfigClockSource+0x1f8>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f000 80a9 	beq.w	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 80089ac:	4a62      	ldr	r2, [pc, #392]	; (8008b38 <HAL_TIM_ConfigClockSource+0x1f8>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	f200 80ae 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 80089b4:	4a61      	ldr	r2, [pc, #388]	; (8008b3c <HAL_TIM_ConfigClockSource+0x1fc>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	f000 80a1 	beq.w	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 80089bc:	4a5f      	ldr	r2, [pc, #380]	; (8008b3c <HAL_TIM_ConfigClockSource+0x1fc>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	f200 80a6 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 80089c4:	4a5e      	ldr	r2, [pc, #376]	; (8008b40 <HAL_TIM_ConfigClockSource+0x200>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	f000 8099 	beq.w	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 80089cc:	4a5c      	ldr	r2, [pc, #368]	; (8008b40 <HAL_TIM_ConfigClockSource+0x200>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	f200 809e 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 80089d4:	4a5b      	ldr	r2, [pc, #364]	; (8008b44 <HAL_TIM_ConfigClockSource+0x204>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	f000 8091 	beq.w	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 80089dc:	4a59      	ldr	r2, [pc, #356]	; (8008b44 <HAL_TIM_ConfigClockSource+0x204>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	f200 8096 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 80089e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089e8:	f000 8089 	beq.w	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 80089ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089f0:	f200 808e 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 80089f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f8:	d03e      	beq.n	8008a78 <HAL_TIM_ConfigClockSource+0x138>
 80089fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fe:	f200 8087 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a06:	f000 8086 	beq.w	8008b16 <HAL_TIM_ConfigClockSource+0x1d6>
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	d87f      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a10:	2b70      	cmp	r3, #112	; 0x70
 8008a12:	d01a      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x10a>
 8008a14:	2b70      	cmp	r3, #112	; 0x70
 8008a16:	d87b      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a18:	2b60      	cmp	r3, #96	; 0x60
 8008a1a:	d050      	beq.n	8008abe <HAL_TIM_ConfigClockSource+0x17e>
 8008a1c:	2b60      	cmp	r3, #96	; 0x60
 8008a1e:	d877      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a20:	2b50      	cmp	r3, #80	; 0x50
 8008a22:	d03c      	beq.n	8008a9e <HAL_TIM_ConfigClockSource+0x15e>
 8008a24:	2b50      	cmp	r3, #80	; 0x50
 8008a26:	d873      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d058      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x19e>
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	d86f      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a30:	2b30      	cmp	r3, #48	; 0x30
 8008a32:	d064      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 8008a34:	2b30      	cmp	r3, #48	; 0x30
 8008a36:	d86b      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d060      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d867      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d05c      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	d05a      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x1be>
 8008a48:	e062      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6899      	ldr	r1, [r3, #8]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f000 fdd1 	bl	8009600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	609a      	str	r2, [r3, #8]
      break;
 8008a76:	e04f      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	6899      	ldr	r1, [r3, #8]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f000 fdba 	bl	8009600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a9a:	609a      	str	r2, [r3, #8]
      break;
 8008a9c:	e03c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	6859      	ldr	r1, [r3, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f000 fd2c 	bl	8009508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2150      	movs	r1, #80	; 0x50
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fd85 	bl	80095c6 <TIM_ITRx_SetConfig>
      break;
 8008abc:	e02c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6859      	ldr	r1, [r3, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f000 fd4b 	bl	8009566 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2160      	movs	r1, #96	; 0x60
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fd75 	bl	80095c6 <TIM_ITRx_SetConfig>
      break;
 8008adc:	e01c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6859      	ldr	r1, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f000 fd0c 	bl	8009508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2140      	movs	r1, #64	; 0x40
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fd65 	bl	80095c6 <TIM_ITRx_SetConfig>
      break;
 8008afc:	e00c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f000 fd5c 	bl	80095c6 <TIM_ITRx_SetConfig>
      break;
 8008b0e:	e003      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
      break;
 8008b14:	e000      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	00100070 	.word	0x00100070
 8008b38:	00100050 	.word	0x00100050
 8008b3c:	00100040 	.word	0x00100040
 8008b40:	00100030 	.word	0x00100030
 8008b44:	00100020 	.word	0x00100020

08008b48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d107      	bne.n	8008bfc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bfa:	e02a      	b.n	8008c52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d107      	bne.n	8008c16 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c14:	e01d      	b.n	8008c52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d107      	bne.n	8008c30 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2204      	movs	r2, #4
 8008c24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c2e:	e010      	b.n	8008c52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d107      	bne.n	8008c4a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c48:	e003      	b.n	8008c52 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f7ff ffb4 	bl	8008bc0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	771a      	strb	r2, [r3, #28]
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d10b      	bne.n	8008c96 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2201      	movs	r2, #1
 8008c82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d136      	bne.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c94:	e031      	b.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d10b      	bne.n	8008cb8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d125      	bne.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cb6:	e020      	b.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d10b      	bne.n	8008cda <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2204      	movs	r2, #4
 8008cc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d114      	bne.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cd8:	e00f      	b.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d10a      	bne.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d103      	bne.n	8008cfa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff ff42 	bl	8008b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	771a      	strb	r2, [r3, #28]
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d103      	bne.n	8008d2e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	771a      	strb	r2, [r3, #28]
 8008d2c:	e019      	b.n	8008d62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d103      	bne.n	8008d40 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	771a      	strb	r2, [r3, #28]
 8008d3e:	e010      	b.n	8008d62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d103      	bne.n	8008d52 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	771a      	strb	r2, [r3, #28]
 8008d50:	e007      	b.n	8008d62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d102      	bne.n	8008d62 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2208      	movs	r2, #8
 8008d60:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff ff18 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	771a      	strb	r2, [r3, #28]
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a42      	ldr	r2, [pc, #264]	; (8008e94 <TIM_Base_SetConfig+0x11c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d013      	beq.n	8008db8 <TIM_Base_SetConfig+0x40>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d96:	d00f      	beq.n	8008db8 <TIM_Base_SetConfig+0x40>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a3f      	ldr	r2, [pc, #252]	; (8008e98 <TIM_Base_SetConfig+0x120>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <TIM_Base_SetConfig+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a3e      	ldr	r2, [pc, #248]	; (8008e9c <TIM_Base_SetConfig+0x124>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <TIM_Base_SetConfig+0x40>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a3d      	ldr	r2, [pc, #244]	; (8008ea0 <TIM_Base_SetConfig+0x128>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_Base_SetConfig+0x40>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a3c      	ldr	r2, [pc, #240]	; (8008ea4 <TIM_Base_SetConfig+0x12c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d108      	bne.n	8008dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a31      	ldr	r2, [pc, #196]	; (8008e94 <TIM_Base_SetConfig+0x11c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01f      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd8:	d01b      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a2e      	ldr	r2, [pc, #184]	; (8008e98 <TIM_Base_SetConfig+0x120>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d017      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a2d      	ldr	r2, [pc, #180]	; (8008e9c <TIM_Base_SetConfig+0x124>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d013      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a2c      	ldr	r2, [pc, #176]	; (8008ea0 <TIM_Base_SetConfig+0x128>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00f      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2c      	ldr	r2, [pc, #176]	; (8008ea8 <TIM_Base_SetConfig+0x130>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00b      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2b      	ldr	r2, [pc, #172]	; (8008eac <TIM_Base_SetConfig+0x134>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2a      	ldr	r2, [pc, #168]	; (8008eb0 <TIM_Base_SetConfig+0x138>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_Base_SetConfig+0x9a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a25      	ldr	r2, [pc, #148]	; (8008ea4 <TIM_Base_SetConfig+0x12c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d108      	bne.n	8008e24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a12      	ldr	r2, [pc, #72]	; (8008e94 <TIM_Base_SetConfig+0x11c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <TIM_Base_SetConfig+0x100>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a13      	ldr	r2, [pc, #76]	; (8008ea0 <TIM_Base_SetConfig+0x128>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00f      	beq.n	8008e78 <TIM_Base_SetConfig+0x100>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a13      	ldr	r2, [pc, #76]	; (8008ea8 <TIM_Base_SetConfig+0x130>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00b      	beq.n	8008e78 <TIM_Base_SetConfig+0x100>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a12      	ldr	r2, [pc, #72]	; (8008eac <TIM_Base_SetConfig+0x134>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <TIM_Base_SetConfig+0x100>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <TIM_Base_SetConfig+0x138>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_Base_SetConfig+0x100>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <TIM_Base_SetConfig+0x12c>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d103      	bne.n	8008e80 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	615a      	str	r2, [r3, #20]
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40012c00 	.word	0x40012c00
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40013400 	.word	0x40013400
 8008ea4:	40015000 	.word	0x40015000
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	40014400 	.word	0x40014400
 8008eb0:	40014800 	.word	0x40014800

08008eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0303 	bic.w	r3, r3, #3
 8008eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f023 0302 	bic.w	r3, r3, #2
 8008f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a30      	ldr	r2, [pc, #192]	; (8008fd0 <TIM_OC1_SetConfig+0x11c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d013      	beq.n	8008f3c <TIM_OC1_SetConfig+0x88>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a2f      	ldr	r2, [pc, #188]	; (8008fd4 <TIM_OC1_SetConfig+0x120>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00f      	beq.n	8008f3c <TIM_OC1_SetConfig+0x88>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a2e      	ldr	r2, [pc, #184]	; (8008fd8 <TIM_OC1_SetConfig+0x124>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00b      	beq.n	8008f3c <TIM_OC1_SetConfig+0x88>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a2d      	ldr	r2, [pc, #180]	; (8008fdc <TIM_OC1_SetConfig+0x128>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d007      	beq.n	8008f3c <TIM_OC1_SetConfig+0x88>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a2c      	ldr	r2, [pc, #176]	; (8008fe0 <TIM_OC1_SetConfig+0x12c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d003      	beq.n	8008f3c <TIM_OC1_SetConfig+0x88>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a2b      	ldr	r2, [pc, #172]	; (8008fe4 <TIM_OC1_SetConfig+0x130>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d10c      	bne.n	8008f56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f023 0308 	bic.w	r3, r3, #8
 8008f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f023 0304 	bic.w	r3, r3, #4
 8008f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a1d      	ldr	r2, [pc, #116]	; (8008fd0 <TIM_OC1_SetConfig+0x11c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d013      	beq.n	8008f86 <TIM_OC1_SetConfig+0xd2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a1c      	ldr	r2, [pc, #112]	; (8008fd4 <TIM_OC1_SetConfig+0x120>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00f      	beq.n	8008f86 <TIM_OC1_SetConfig+0xd2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a1b      	ldr	r2, [pc, #108]	; (8008fd8 <TIM_OC1_SetConfig+0x124>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d00b      	beq.n	8008f86 <TIM_OC1_SetConfig+0xd2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a1a      	ldr	r2, [pc, #104]	; (8008fdc <TIM_OC1_SetConfig+0x128>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d007      	beq.n	8008f86 <TIM_OC1_SetConfig+0xd2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a19      	ldr	r2, [pc, #100]	; (8008fe0 <TIM_OC1_SetConfig+0x12c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d003      	beq.n	8008f86 <TIM_OC1_SetConfig+0xd2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a18      	ldr	r2, [pc, #96]	; (8008fe4 <TIM_OC1_SetConfig+0x130>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d111      	bne.n	8008faa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	621a      	str	r2, [r3, #32]
}
 8008fc4:	bf00      	nop
 8008fc6:	371c      	adds	r7, #28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	40012c00 	.word	0x40012c00
 8008fd4:	40013400 	.word	0x40013400
 8008fd8:	40014000 	.word	0x40014000
 8008fdc:	40014400 	.word	0x40014400
 8008fe0:	40014800 	.word	0x40014800
 8008fe4:	40015000 	.word	0x40015000

08008fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f023 0210 	bic.w	r2, r3, #16
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f023 0320 	bic.w	r3, r3, #32
 8009036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a2c      	ldr	r2, [pc, #176]	; (80090f8 <TIM_OC2_SetConfig+0x110>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d007      	beq.n	800905c <TIM_OC2_SetConfig+0x74>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a2b      	ldr	r2, [pc, #172]	; (80090fc <TIM_OC2_SetConfig+0x114>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_OC2_SetConfig+0x74>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a2a      	ldr	r2, [pc, #168]	; (8009100 <TIM_OC2_SetConfig+0x118>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d10d      	bne.n	8009078 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a1f      	ldr	r2, [pc, #124]	; (80090f8 <TIM_OC2_SetConfig+0x110>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d013      	beq.n	80090a8 <TIM_OC2_SetConfig+0xc0>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a1e      	ldr	r2, [pc, #120]	; (80090fc <TIM_OC2_SetConfig+0x114>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d00f      	beq.n	80090a8 <TIM_OC2_SetConfig+0xc0>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <TIM_OC2_SetConfig+0x11c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00b      	beq.n	80090a8 <TIM_OC2_SetConfig+0xc0>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a1d      	ldr	r2, [pc, #116]	; (8009108 <TIM_OC2_SetConfig+0x120>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d007      	beq.n	80090a8 <TIM_OC2_SetConfig+0xc0>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a1c      	ldr	r2, [pc, #112]	; (800910c <TIM_OC2_SetConfig+0x124>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_OC2_SetConfig+0xc0>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a17      	ldr	r2, [pc, #92]	; (8009100 <TIM_OC2_SetConfig+0x118>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d113      	bne.n	80090d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	621a      	str	r2, [r3, #32]
}
 80090ea:	bf00      	nop
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40012c00 	.word	0x40012c00
 80090fc:	40013400 	.word	0x40013400
 8009100:	40015000 	.word	0x40015000
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800

08009110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800913e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f023 0303 	bic.w	r3, r3, #3
 800914a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800915c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	021b      	lsls	r3, r3, #8
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	4313      	orrs	r3, r2
 8009168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a2b      	ldr	r2, [pc, #172]	; (800921c <TIM_OC3_SetConfig+0x10c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d007      	beq.n	8009182 <TIM_OC3_SetConfig+0x72>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a2a      	ldr	r2, [pc, #168]	; (8009220 <TIM_OC3_SetConfig+0x110>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d003      	beq.n	8009182 <TIM_OC3_SetConfig+0x72>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a29      	ldr	r2, [pc, #164]	; (8009224 <TIM_OC3_SetConfig+0x114>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d10d      	bne.n	800919e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	021b      	lsls	r3, r3, #8
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	4313      	orrs	r3, r2
 8009194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800919c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a1e      	ldr	r2, [pc, #120]	; (800921c <TIM_OC3_SetConfig+0x10c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d013      	beq.n	80091ce <TIM_OC3_SetConfig+0xbe>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a1d      	ldr	r2, [pc, #116]	; (8009220 <TIM_OC3_SetConfig+0x110>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00f      	beq.n	80091ce <TIM_OC3_SetConfig+0xbe>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a1d      	ldr	r2, [pc, #116]	; (8009228 <TIM_OC3_SetConfig+0x118>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00b      	beq.n	80091ce <TIM_OC3_SetConfig+0xbe>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a1c      	ldr	r2, [pc, #112]	; (800922c <TIM_OC3_SetConfig+0x11c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d007      	beq.n	80091ce <TIM_OC3_SetConfig+0xbe>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a1b      	ldr	r2, [pc, #108]	; (8009230 <TIM_OC3_SetConfig+0x120>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d003      	beq.n	80091ce <TIM_OC3_SetConfig+0xbe>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a16      	ldr	r2, [pc, #88]	; (8009224 <TIM_OC3_SetConfig+0x114>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d113      	bne.n	80091f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	621a      	str	r2, [r3, #32]
}
 8009210:	bf00      	nop
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	40012c00 	.word	0x40012c00
 8009220:	40013400 	.word	0x40013400
 8009224:	40015000 	.word	0x40015000
 8009228:	40014000 	.word	0x40014000
 800922c:	40014400 	.word	0x40014400
 8009230:	40014800 	.word	0x40014800

08009234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800926e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	031b      	lsls	r3, r3, #12
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a2c      	ldr	r2, [pc, #176]	; (8009344 <TIM_OC4_SetConfig+0x110>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d007      	beq.n	80092a8 <TIM_OC4_SetConfig+0x74>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a2b      	ldr	r2, [pc, #172]	; (8009348 <TIM_OC4_SetConfig+0x114>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d003      	beq.n	80092a8 <TIM_OC4_SetConfig+0x74>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a2a      	ldr	r2, [pc, #168]	; (800934c <TIM_OC4_SetConfig+0x118>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d10d      	bne.n	80092c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	031b      	lsls	r3, r3, #12
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <TIM_OC4_SetConfig+0x110>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d013      	beq.n	80092f4 <TIM_OC4_SetConfig+0xc0>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a1e      	ldr	r2, [pc, #120]	; (8009348 <TIM_OC4_SetConfig+0x114>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d00f      	beq.n	80092f4 <TIM_OC4_SetConfig+0xc0>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a1e      	ldr	r2, [pc, #120]	; (8009350 <TIM_OC4_SetConfig+0x11c>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00b      	beq.n	80092f4 <TIM_OC4_SetConfig+0xc0>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a1d      	ldr	r2, [pc, #116]	; (8009354 <TIM_OC4_SetConfig+0x120>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d007      	beq.n	80092f4 <TIM_OC4_SetConfig+0xc0>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a1c      	ldr	r2, [pc, #112]	; (8009358 <TIM_OC4_SetConfig+0x124>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d003      	beq.n	80092f4 <TIM_OC4_SetConfig+0xc0>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a17      	ldr	r2, [pc, #92]	; (800934c <TIM_OC4_SetConfig+0x118>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d113      	bne.n	800931c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009302:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	019b      	lsls	r3, r3, #6
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	4313      	orrs	r3, r2
 800930e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	019b      	lsls	r3, r3, #6
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	4313      	orrs	r3, r2
 800931a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	621a      	str	r2, [r3, #32]
}
 8009336:	bf00      	nop
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	40012c00 	.word	0x40012c00
 8009348:	40013400 	.word	0x40013400
 800934c:	40015000 	.word	0x40015000
 8009350:	40014000 	.word	0x40014000
 8009354:	40014400 	.word	0x40014400
 8009358:	40014800 	.word	0x40014800

0800935c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800938a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	4313      	orrs	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	041b      	lsls	r3, r3, #16
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a19      	ldr	r2, [pc, #100]	; (8009418 <TIM_OC5_SetConfig+0xbc>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d013      	beq.n	80093de <TIM_OC5_SetConfig+0x82>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a18      	ldr	r2, [pc, #96]	; (800941c <TIM_OC5_SetConfig+0xc0>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00f      	beq.n	80093de <TIM_OC5_SetConfig+0x82>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a17      	ldr	r2, [pc, #92]	; (8009420 <TIM_OC5_SetConfig+0xc4>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d00b      	beq.n	80093de <TIM_OC5_SetConfig+0x82>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a16      	ldr	r2, [pc, #88]	; (8009424 <TIM_OC5_SetConfig+0xc8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d007      	beq.n	80093de <TIM_OC5_SetConfig+0x82>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a15      	ldr	r2, [pc, #84]	; (8009428 <TIM_OC5_SetConfig+0xcc>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d003      	beq.n	80093de <TIM_OC5_SetConfig+0x82>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a14      	ldr	r2, [pc, #80]	; (800942c <TIM_OC5_SetConfig+0xd0>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d109      	bne.n	80093f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	621a      	str	r2, [r3, #32]
}
 800940c:	bf00      	nop
 800940e:	371c      	adds	r7, #28
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	40012c00 	.word	0x40012c00
 800941c:	40013400 	.word	0x40013400
 8009420:	40014000 	.word	0x40014000
 8009424:	40014400 	.word	0x40014400
 8009428:	40014800 	.word	0x40014800
 800942c:	40015000 	.word	0x40015000

08009430 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800945e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	051b      	lsls	r3, r3, #20
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	4313      	orrs	r3, r2
 8009482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a1a      	ldr	r2, [pc, #104]	; (80094f0 <TIM_OC6_SetConfig+0xc0>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d013      	beq.n	80094b4 <TIM_OC6_SetConfig+0x84>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a19      	ldr	r2, [pc, #100]	; (80094f4 <TIM_OC6_SetConfig+0xc4>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00f      	beq.n	80094b4 <TIM_OC6_SetConfig+0x84>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a18      	ldr	r2, [pc, #96]	; (80094f8 <TIM_OC6_SetConfig+0xc8>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00b      	beq.n	80094b4 <TIM_OC6_SetConfig+0x84>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a17      	ldr	r2, [pc, #92]	; (80094fc <TIM_OC6_SetConfig+0xcc>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d007      	beq.n	80094b4 <TIM_OC6_SetConfig+0x84>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a16      	ldr	r2, [pc, #88]	; (8009500 <TIM_OC6_SetConfig+0xd0>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d003      	beq.n	80094b4 <TIM_OC6_SetConfig+0x84>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a15      	ldr	r2, [pc, #84]	; (8009504 <TIM_OC6_SetConfig+0xd4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d109      	bne.n	80094c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	029b      	lsls	r3, r3, #10
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	621a      	str	r2, [r3, #32]
}
 80094e2:	bf00      	nop
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	40012c00 	.word	0x40012c00
 80094f4:	40013400 	.word	0x40013400
 80094f8:	40014000 	.word	0x40014000
 80094fc:	40014400 	.word	0x40014400
 8009500:	40014800 	.word	0x40014800
 8009504:	40015000 	.word	0x40015000

08009508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	f023 0201 	bic.w	r2, r3, #1
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f023 030a 	bic.w	r3, r3, #10
 8009544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4313      	orrs	r3, r2
 800954c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	621a      	str	r2, [r3, #32]
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009566:	b480      	push	{r7}
 8009568:	b087      	sub	sp, #28
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	f023 0210 	bic.w	r2, r3, #16
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	031b      	lsls	r3, r3, #12
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	621a      	str	r2, [r3, #32]
}
 80095ba:	bf00      	nop
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b085      	sub	sp, #20
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80095dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	f043 0307 	orr.w	r3, r3, #7
 80095ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800961a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	021a      	lsls	r2, r3, #8
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	431a      	orrs	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4313      	orrs	r3, r2
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	609a      	str	r2, [r3, #8]
}
 8009634:	bf00      	nop
 8009636:	371c      	adds	r7, #28
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f003 031f 	and.w	r3, r3, #31
 8009652:	2201      	movs	r2, #1
 8009654:	fa02 f303 	lsl.w	r3, r2, r3
 8009658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1a      	ldr	r2, [r3, #32]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	43db      	mvns	r3, r3
 8009662:	401a      	ands	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a1a      	ldr	r2, [r3, #32]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	fa01 f303 	lsl.w	r3, r1, r3
 8009678:	431a      	orrs	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
	...

0800968c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800969c:	2b01      	cmp	r3, #1
 800969e:	d101      	bne.n	80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e06f      	b.n	8009784 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a31      	ldr	r2, [pc, #196]	; (8009790 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d009      	beq.n	80096e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a30      	ldr	r2, [pc, #192]	; (8009794 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d004      	beq.n	80096e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a2e      	ldr	r2, [pc, #184]	; (8009798 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d108      	bne.n	80096f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80096e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80096fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d01d      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009724:	d018      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a1c      	ldr	r2, [pc, #112]	; (800979c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d013      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a1a      	ldr	r2, [pc, #104]	; (80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00e      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a15      	ldr	r2, [pc, #84]	; (8009794 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d009      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a16      	ldr	r2, [pc, #88]	; (80097a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a11      	ldr	r2, [pc, #68]	; (8009798 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d10c      	bne.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800975e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	4313      	orrs	r3, r2
 8009768:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	40012c00 	.word	0x40012c00
 8009794:	40013400 	.word	0x40013400
 8009798:	40015000 	.word	0x40015000
 800979c:	40000400 	.word	0x40000400
 80097a0:	40000800 	.word	0x40000800
 80097a4:	40014000 	.word	0x40014000

080097a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e096      	b.n	80098f2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4313      	orrs	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	4313      	orrs	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	041b      	lsls	r3, r3, #16
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a2f      	ldr	r2, [pc, #188]	; (8009900 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d009      	beq.n	800985c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a2d      	ldr	r2, [pc, #180]	; (8009904 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d004      	beq.n	800985c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a2c      	ldr	r2, [pc, #176]	; (8009908 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d106      	bne.n	800986a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a24      	ldr	r2, [pc, #144]	; (8009900 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d009      	beq.n	8009888 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a22      	ldr	r2, [pc, #136]	; (8009904 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d004      	beq.n	8009888 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a21      	ldr	r2, [pc, #132]	; (8009908 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d12b      	bne.n	80098e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	051b      	lsls	r3, r3, #20
 8009894:	4313      	orrs	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	4313      	orrs	r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a11      	ldr	r2, [pc, #68]	; (8009900 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d009      	beq.n	80098d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a10      	ldr	r2, [pc, #64]	; (8009904 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d004      	beq.n	80098d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a0e      	ldr	r2, [pc, #56]	; (8009908 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d106      	bne.n	80098e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	40012c00 	.word	0x40012c00
 8009904:	40013400 	.word	0x40013400
 8009908:	40015000 	.word	0x40015000

0800990c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80099ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b085      	sub	sp, #20
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80099d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80099da:	b29a      	uxth	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	43db      	mvns	r3, r3
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	4013      	ands	r3, r2
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80099fc:	b084      	sub	sp, #16
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	f107 0014 	add.w	r0, r7, #20
 8009a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	b004      	add	sp, #16
 8009a3c:	4770      	bx	lr
	...

08009a40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b09d      	sub	sp, #116	; 0x74
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	78db      	ldrb	r3, [r3, #3]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d81f      	bhi.n	8009ab2 <USB_ActivateEndpoint+0x72>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <USB_ActivateEndpoint+0x38>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009a89 	.word	0x08009a89
 8009a7c:	08009aa5 	.word	0x08009aa5
 8009a80:	08009abb 	.word	0x08009abb
 8009a84:	08009a97 	.word	0x08009a97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009a88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009a94:	e012      	b.n	8009abc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009a96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009a9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009a9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009aa2:	e00b      	b.n	8009abc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009aa4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009aac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009ab0:	e004      	b.n	8009abc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009ab8:	e000      	b.n	8009abc <USB_ActivateEndpoint+0x7c>
      break;
 8009aba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	441a      	add	r2, r3
 8009ac6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	b21b      	sxth	r3, r3
 8009aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af6:	b21a      	sxth	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b21b      	sxth	r3, r3
 8009afe:	4313      	orrs	r3, r2
 8009b00:	b21b      	sxth	r3, r3
 8009b02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	441a      	add	r2, r3
 8009b10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	7b1b      	ldrb	r3, [r3, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 8149 	bne.w	8009dc4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 8084 	beq.w	8009c44 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	461a      	mov	r2, r3
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	00da      	lsls	r2, r3, #3
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	88db      	ldrh	r3, [r3, #6]
 8009b64:	085b      	lsrs	r3, r3, #1
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	827b      	strh	r3, [r7, #18]
 8009b7e:	8a7b      	ldrh	r3, [r7, #18]
 8009b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01b      	beq.n	8009bc0 <USB_ActivateEndpoint+0x180>
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9e:	823b      	strh	r3, [r7, #16]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	441a      	add	r2, r3
 8009baa:	8a3b      	ldrh	r3, [r7, #16]
 8009bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	78db      	ldrb	r3, [r3, #3]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d020      	beq.n	8009c0a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bde:	81bb      	strh	r3, [r7, #12]
 8009be0:	89bb      	ldrh	r3, [r7, #12]
 8009be2:	f083 0320 	eor.w	r3, r3, #32
 8009be6:	81bb      	strh	r3, [r7, #12]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	441a      	add	r2, r3
 8009bf2:	89bb      	ldrh	r3, [r7, #12]
 8009bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	8013      	strh	r3, [r2, #0]
 8009c08:	e2a6      	b.n	800a158 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c20:	81fb      	strh	r3, [r7, #14]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	441a      	add	r2, r3
 8009c2c:	89fb      	ldrh	r3, [r7, #14]
 8009c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	8013      	strh	r3, [r2, #0]
 8009c42:	e289      	b.n	800a158 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	633b      	str	r3, [r7, #48]	; 0x30
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	4413      	add	r3, r2
 8009c56:	633b      	str	r3, [r7, #48]	; 0x30
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	00da      	lsls	r2, r3, #3
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	4413      	add	r3, r2
 8009c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	88db      	ldrh	r3, [r3, #6]
 8009c6c:	085b      	lsrs	r3, r3, #1
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	461a      	mov	r2, r3
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	4413      	add	r3, r2
 8009c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	00da      	lsls	r2, r3, #3
 8009c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c94:	4413      	add	r3, r2
 8009c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ca2:	d918      	bls.n	8009cd6 <USB_ActivateEndpoint+0x296>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	095b      	lsrs	r3, r3, #5
 8009caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f003 031f 	and.w	r3, r3, #31
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <USB_ActivateEndpoint+0x27e>
 8009cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	029b      	lsls	r3, r3, #10
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e029      	b.n	8009d2a <USB_ActivateEndpoint+0x2ea>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d112      	bne.n	8009d04 <USB_ActivateEndpoint+0x2c4>
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	e012      	b.n	8009d2a <USB_ActivateEndpoint+0x2ea>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	085b      	lsrs	r3, r3, #1
 8009d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <USB_ActivateEndpoint+0x2de>
 8009d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	029b      	lsls	r3, r3, #10
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	847b      	strh	r3, [r7, #34]	; 0x22
 8009d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d01b      	beq.n	8009d7a <USB_ActivateEndpoint+0x33a>
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d58:	843b      	strh	r3, [r7, #32]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	441a      	add	r2, r3
 8009d64:	8c3b      	ldrh	r3, [r7, #32]
 8009d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d90:	83fb      	strh	r3, [r7, #30]
 8009d92:	8bfb      	ldrh	r3, [r7, #30]
 8009d94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d98:	83fb      	strh	r3, [r7, #30]
 8009d9a:	8bfb      	ldrh	r3, [r7, #30]
 8009d9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009da0:	83fb      	strh	r3, [r7, #30]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	441a      	add	r2, r3
 8009dac:	8bfb      	ldrh	r3, [r7, #30]
 8009dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	8013      	strh	r3, [r2, #0]
 8009dc2:	e1c9      	b.n	800a158 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	78db      	ldrb	r3, [r3, #3]
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d11e      	bne.n	8009e0a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	441a      	add	r2, r3
 8009df0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	8013      	strh	r3, [r2, #0]
 8009e08:	e01d      	b.n	8009e46 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	441a      	add	r2, r3
 8009e2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e56:	4413      	add	r3, r2
 8009e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	00da      	lsls	r2, r3, #3
 8009e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	891b      	ldrh	r3, [r3, #8]
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e78:	801a      	strh	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	657b      	str	r3, [r7, #84]	; 0x54
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8a:	4413      	add	r3, r2
 8009e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	00da      	lsls	r2, r3, #3
 8009e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e96:	4413      	add	r3, r2
 8009e98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	895b      	ldrh	r3, [r3, #10]
 8009ea2:	085b      	lsrs	r3, r3, #1
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	785b      	ldrb	r3, [r3, #1]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f040 8093 	bne.w	8009fde <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009ec8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01b      	beq.n	8009f0c <USB_ActivateEndpoint+0x4cc>
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	441a      	add	r2, r3
 8009ef6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009f1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01b      	beq.n	8009f5c <USB_ActivateEndpoint+0x51c>
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	441a      	add	r2, r3
 8009f46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f72:	873b      	strh	r3, [r7, #56]	; 0x38
 8009f74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009f76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009f7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009f7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f82:	873b      	strh	r3, [r7, #56]	; 0x38
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	441a      	add	r2, r3
 8009f8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fba:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	441a      	add	r2, r3
 8009fc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	8013      	strh	r3, [r2, #0]
 8009fdc:	e0bc      	b.n	800a158 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009fee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01d      	beq.n	800a036 <USB_ActivateEndpoint+0x5f6>
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	b29b      	uxth	r3, r3
 800a008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a010:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	441a      	add	r2, r3
 800a01e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a02a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a032:	b29b      	uxth	r3, r3
 800a034:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a046:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d01d      	beq.n	800a08e <USB_ActivateEndpoint+0x64e>
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a068:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	441a      	add	r2, r3
 800a076:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a07a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a086:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	78db      	ldrb	r3, [r3, #3]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d024      	beq.n	800a0e0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a0b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a0b4:	f083 0320 	eor.w	r3, r3, #32
 800a0b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	441a      	add	r2, r3
 800a0c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a0ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	8013      	strh	r3, [r2, #0]
 800a0de:	e01d      	b.n	800a11c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	441a      	add	r2, r3
 800a104:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a10c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a118:	b29b      	uxth	r3, r3
 800a11a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	441a      	add	r2, r3
 800a140:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a14c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a154:	b29b      	uxth	r3, r3
 800a156:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3774      	adds	r7, #116	; 0x74
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a168:	b480      	push	{r7}
 800a16a:	b08d      	sub	sp, #52	; 0x34
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	7b1b      	ldrb	r3, [r3, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f040 808e 	bne.w	800a298 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d044      	beq.n	800a20e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	81bb      	strh	r3, [r7, #12]
 800a192:	89bb      	ldrh	r3, [r7, #12]
 800a194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01b      	beq.n	800a1d4 <USB_DeactivateEndpoint+0x6c>
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	817b      	strh	r3, [r7, #10]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	441a      	add	r2, r3
 800a1be:	897b      	ldrh	r3, [r7, #10]
 800a1c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ea:	813b      	strh	r3, [r7, #8]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	441a      	add	r2, r3
 800a1f6:	893b      	ldrh	r3, [r7, #8]
 800a1f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a208:	b29b      	uxth	r3, r3
 800a20a:	8013      	strh	r3, [r2, #0]
 800a20c:	e192      	b.n	800a534 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	827b      	strh	r3, [r7, #18]
 800a21c:	8a7b      	ldrh	r3, [r7, #18]
 800a21e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d01b      	beq.n	800a25e <USB_DeactivateEndpoint+0xf6>
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23c:	823b      	strh	r3, [r7, #16]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	441a      	add	r2, r3
 800a248:	8a3b      	ldrh	r3, [r7, #16]
 800a24a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a24e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a274:	81fb      	strh	r3, [r7, #14]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	441a      	add	r2, r3
 800a280:	89fb      	ldrh	r3, [r7, #14]
 800a282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a28a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a28e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a292:	b29b      	uxth	r3, r3
 800a294:	8013      	strh	r3, [r2, #0]
 800a296:	e14d      	b.n	800a534 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f040 80a5 	bne.w	800a3ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	843b      	strh	r3, [r7, #32]
 800a2b0:	8c3b      	ldrh	r3, [r7, #32]
 800a2b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d01b      	beq.n	800a2f2 <USB_DeactivateEndpoint+0x18a>
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d0:	83fb      	strh	r3, [r7, #30]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	441a      	add	r2, r3
 800a2dc:	8bfb      	ldrh	r3, [r7, #30]
 800a2de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	83bb      	strh	r3, [r7, #28]
 800a300:	8bbb      	ldrh	r3, [r7, #28]
 800a302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a306:	2b00      	cmp	r3, #0
 800a308:	d01b      	beq.n	800a342 <USB_DeactivateEndpoint+0x1da>
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a320:	837b      	strh	r3, [r7, #26]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	441a      	add	r2, r3
 800a32c:	8b7b      	ldrh	r3, [r7, #26]
 800a32e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a33a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a33e:	b29b      	uxth	r3, r3
 800a340:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a358:	833b      	strh	r3, [r7, #24]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	441a      	add	r2, r3
 800a364:	8b3b      	ldrh	r3, [r7, #24]
 800a366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a36a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a36e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a372:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a376:	b29b      	uxth	r3, r3
 800a378:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a38c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a390:	82fb      	strh	r3, [r7, #22]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	441a      	add	r2, r3
 800a39c:	8afb      	ldrh	r3, [r7, #22]
 800a39e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c8:	82bb      	strh	r3, [r7, #20]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	441a      	add	r2, r3
 800a3d4:	8abb      	ldrh	r3, [r7, #20]
 800a3d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	8013      	strh	r3, [r2, #0]
 800a3ea:	e0a3      	b.n	800a534 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a3fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d01b      	beq.n	800a43c <USB_DeactivateEndpoint+0x2d4>
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	441a      	add	r2, r3
 800a426:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a42c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a438:	b29b      	uxth	r3, r3
 800a43a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a44a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01b      	beq.n	800a48c <USB_DeactivateEndpoint+0x324>
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a46a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	441a      	add	r2, r3
 800a476:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a47c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a488:	b29b      	uxth	r3, r3
 800a48a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	441a      	add	r2, r3
 800a4ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4da:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	441a      	add	r2, r3
 800a4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a512:	847b      	strh	r3, [r7, #34]	; 0x22
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	441a      	add	r2, r3
 800a51e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a530:	b29b      	uxth	r3, r3
 800a532:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3734      	adds	r7, #52	; 0x34
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b0c2      	sub	sp, #264	; 0x108
 800a546:	af00      	add	r7, sp, #0
 800a548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a550:	6018      	str	r0, [r3, #0]
 800a552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a55a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	f040 867b 	bne.w	800b264 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	429a      	cmp	r2, r3
 800a588:	d908      	bls.n	800a59c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a59a:	e007      	b.n	800a5ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	7b1b      	ldrb	r3, [r3, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d13a      	bne.n	800a632 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6959      	ldr	r1, [r3, #20]
 800a5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	88da      	ldrh	r2, [r3, #6]
 800a5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5e2:	6800      	ldr	r0, [r0, #0]
 800a5e4:	f001 fc1d 	bl	800be22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	613b      	str	r3, [r7, #16]
 800a5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a602:	b29b      	uxth	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	4413      	add	r3, r2
 800a60a:	613b      	str	r3, [r7, #16]
 800a60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	00da      	lsls	r2, r3, #3
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	4413      	add	r3, r2
 800a61e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	b29a      	uxth	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	801a      	strh	r2, [r3, #0]
 800a62e:	f000 bde3 	b.w	800b1f8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	78db      	ldrb	r3, [r3, #3]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	f040 843a 	bne.w	800aeb8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6a1a      	ldr	r2, [r3, #32]
 800a650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	f240 83b7 	bls.w	800add0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a688:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	441a      	add	r2, r3
 800a6a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a6aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6a1a      	ldr	r2, [r3, #32]
 800a6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 81b3 	beq.w	800aa6a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30
 800a710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	785b      	ldrb	r3, [r3, #1]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d16d      	bne.n	800a7fc <USB_EPStartXfer+0x2ba>
 800a720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a72c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	461a      	mov	r2, r3
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	4413      	add	r3, r2
 800a742:	62bb      	str	r3, [r7, #40]	; 0x28
 800a744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	00da      	lsls	r2, r3, #3
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	4413      	add	r3, r2
 800a756:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a760:	2b3e      	cmp	r3, #62	; 0x3e
 800a762:	d91c      	bls.n	800a79e <USB_EPStartXfer+0x25c>
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a768:	095b      	lsrs	r3, r3, #5
 800a76a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a772:	f003 031f 	and.w	r3, r3, #31
 800a776:	2b00      	cmp	r3, #0
 800a778:	d104      	bne.n	800a784 <USB_EPStartXfer+0x242>
 800a77a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a77e:	3b01      	subs	r3, #1
 800a780:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a784:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a788:	b29b      	uxth	r3, r3
 800a78a:	029b      	lsls	r3, r3, #10
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a796:	b29a      	uxth	r2, r3
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	801a      	strh	r2, [r3, #0]
 800a79c:	e053      	b.n	800a846 <USB_EPStartXfer+0x304>
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d112      	bne.n	800a7cc <USB_EPStartXfer+0x28a>
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b4:	801a      	strh	r2, [r3, #0]
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	e03c      	b.n	800a846 <USB_EPStartXfer+0x304>
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d0:	085b      	lsrs	r3, r3, #1
 800a7d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <USB_EPStartXfer+0x2aa>
 800a7e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	029b      	lsls	r3, r3, #10
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	801a      	strh	r2, [r3, #0]
 800a7fa:	e024      	b.n	800a846 <USB_EPStartXfer+0x304>
 800a7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	785b      	ldrb	r3, [r3, #1]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d11c      	bne.n	800a846 <USB_EPStartXfer+0x304>
 800a80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	4413      	add	r3, r2
 800a822:	633b      	str	r3, [r7, #48]	; 0x30
 800a824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	00da      	lsls	r2, r3, #3
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	4413      	add	r3, r2
 800a836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a840:	b29a      	uxth	r2, r3
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	895b      	ldrh	r3, [r3, #10]
 800a852:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	6959      	ldr	r1, [r3, #20]
 800a862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a866:	b29b      	uxth	r3, r3
 800a868:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a86c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a870:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a874:	6800      	ldr	r0, [r0, #0]
 800a876:	f001 fad4 	bl	800be22 <USB_WritePMA>
            ep->xfer_buff += len;
 800a87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	695a      	ldr	r2, [r3, #20]
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88a:	441a      	add	r2, r3
 800a88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6a1a      	ldr	r2, [r3, #32]
 800a8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d90f      	bls.n	800a8d4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6a1a      	ldr	r2, [r3, #32]
 800a8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c4:	1ad2      	subs	r2, r2, r3
 800a8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	621a      	str	r2, [r3, #32]
 800a8d2:	e00e      	b.n	800a8f2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6a1b      	ldr	r3, [r3, #32]
 800a8e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	785b      	ldrb	r3, [r3, #1]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d16d      	bne.n	800a9de <USB_EPStartXfer+0x49c>
 800a902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	4413      	add	r3, r2
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	00da      	lsls	r2, r3, #3
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	4413      	add	r3, r2
 800a938:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a942:	2b3e      	cmp	r3, #62	; 0x3e
 800a944:	d91c      	bls.n	800a980 <USB_EPStartXfer+0x43e>
 800a946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94a:	095b      	lsrs	r3, r3, #5
 800a94c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a954:	f003 031f 	and.w	r3, r3, #31
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <USB_EPStartXfer+0x424>
 800a95c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a960:	3b01      	subs	r3, #1
 800a962:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	029b      	lsls	r3, r3, #10
 800a96e:	b29b      	uxth	r3, r3
 800a970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a978:	b29a      	uxth	r2, r3
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	801a      	strh	r2, [r3, #0]
 800a97e:	e059      	b.n	800aa34 <USB_EPStartXfer+0x4f2>
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	2b00      	cmp	r3, #0
 800a986:	d112      	bne.n	800a9ae <USB_EPStartXfer+0x46c>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a992:	b29a      	uxth	r2, r3
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	801a      	strh	r2, [r3, #0]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	801a      	strh	r2, [r3, #0]
 800a9ac:	e042      	b.n	800aa34 <USB_EPStartXfer+0x4f2>
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d004      	beq.n	800a9ce <USB_EPStartXfer+0x48c>
 800a9c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a9ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	029b      	lsls	r3, r3, #10
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	801a      	strh	r2, [r3, #0]
 800a9dc:	e02a      	b.n	800aa34 <USB_EPStartXfer+0x4f2>
 800a9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d122      	bne.n	800aa34 <USB_EPStartXfer+0x4f2>
 800a9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	623b      	str	r3, [r7, #32]
 800a9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	4413      	add	r3, r2
 800aa10:	623b      	str	r3, [r7, #32]
 800aa12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	00da      	lsls	r2, r3, #3
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	4413      	add	r3, r2
 800aa24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa28:	61fb      	str	r3, [r7, #28]
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	891b      	ldrh	r3, [r3, #8]
 800aa40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6959      	ldr	r1, [r3, #20]
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa62:	6800      	ldr	r0, [r0, #0]
 800aa64:	f001 f9dd 	bl	800be22 <USB_WritePMA>
 800aa68:	e3c6      	b.n	800b1f8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d16d      	bne.n	800ab56 <USB_EPStartXfer+0x614>
 800aa7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	461a      	mov	r2, r3
 800aa98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa9a:	4413      	add	r3, r2
 800aa9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	00da      	lsls	r2, r3, #3
 800aaac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaae:	4413      	add	r3, r2
 800aab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aab4:	647b      	str	r3, [r7, #68]	; 0x44
 800aab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaba:	2b3e      	cmp	r3, #62	; 0x3e
 800aabc:	d91c      	bls.n	800aaf8 <USB_EPStartXfer+0x5b6>
 800aabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac2:	095b      	lsrs	r3, r3, #5
 800aac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aacc:	f003 031f 	and.w	r3, r3, #31
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d104      	bne.n	800aade <USB_EPStartXfer+0x59c>
 800aad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aad8:	3b01      	subs	r3, #1
 800aada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	029b      	lsls	r3, r3, #10
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaf4:	801a      	strh	r2, [r3, #0]
 800aaf6:	e059      	b.n	800abac <USB_EPStartXfer+0x66a>
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d112      	bne.n	800ab26 <USB_EPStartXfer+0x5e4>
 800ab00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab02:	881b      	ldrh	r3, [r3, #0]
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0e:	801a      	strh	r2, [r3, #0]
 800ab10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab22:	801a      	strh	r2, [r3, #0]
 800ab24:	e042      	b.n	800abac <USB_EPStartXfer+0x66a>
 800ab26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab2a:	085b      	lsrs	r3, r3, #1
 800ab2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d004      	beq.n	800ab46 <USB_EPStartXfer+0x604>
 800ab3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab40:	3301      	adds	r3, #1
 800ab42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	029b      	lsls	r3, r3, #10
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab52:	801a      	strh	r2, [r3, #0]
 800ab54:	e02a      	b.n	800abac <USB_EPStartXfer+0x66a>
 800ab56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	785b      	ldrb	r3, [r3, #1]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d122      	bne.n	800abac <USB_EPStartXfer+0x66a>
 800ab66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	653b      	str	r3, [r7, #80]	; 0x50
 800ab72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	461a      	mov	r2, r3
 800ab84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab86:	4413      	add	r3, r2
 800ab88:	653b      	str	r3, [r7, #80]	; 0x50
 800ab8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	00da      	lsls	r2, r3, #3
 800ab98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800abac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	891b      	ldrh	r3, [r3, #8]
 800abb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6959      	ldr	r1, [r3, #20]
 800abc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800abd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800abd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800abda:	6800      	ldr	r0, [r0, #0]
 800abdc:	f001 f921 	bl	800be22 <USB_WritePMA>
            ep->xfer_buff += len;
 800abe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	695a      	ldr	r2, [r3, #20]
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf0:	441a      	add	r2, r3
 800abf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800abfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6a1a      	ldr	r2, [r3, #32]
 800ac0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d90f      	bls.n	800ac3a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800ac1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6a1a      	ldr	r2, [r3, #32]
 800ac26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	621a      	str	r2, [r3, #32]
 800ac38:	e00e      	b.n	800ac58 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800ac3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ac4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2200      	movs	r2, #0
 800ac56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	643b      	str	r3, [r7, #64]	; 0x40
 800ac64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d16d      	bne.n	800ad50 <USB_EPStartXfer+0x80e>
 800ac74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	461a      	mov	r2, r3
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	4413      	add	r3, r2
 800ac96:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	00da      	lsls	r2, r3, #3
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	4413      	add	r3, r2
 800acaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acae:	637b      	str	r3, [r7, #52]	; 0x34
 800acb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb4:	2b3e      	cmp	r3, #62	; 0x3e
 800acb6:	d91c      	bls.n	800acf2 <USB_EPStartXfer+0x7b0>
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbc:	095b      	lsrs	r3, r3, #5
 800acbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc6:	f003 031f 	and.w	r3, r3, #31
 800acca:	2b00      	cmp	r3, #0
 800accc:	d104      	bne.n	800acd8 <USB_EPStartXfer+0x796>
 800acce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd2:	3b01      	subs	r3, #1
 800acd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acdc:	b29b      	uxth	r3, r3
 800acde:	029b      	lsls	r3, r3, #10
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acea:	b29a      	uxth	r2, r3
 800acec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acee:	801a      	strh	r2, [r3, #0]
 800acf0:	e053      	b.n	800ad9a <USB_EPStartXfer+0x858>
 800acf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d112      	bne.n	800ad20 <USB_EPStartXfer+0x7de>
 800acfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	801a      	strh	r2, [r3, #0]
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	801a      	strh	r2, [r3, #0]
 800ad1e:	e03c      	b.n	800ad9a <USB_EPStartXfer+0x858>
 800ad20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad24:	085b      	lsrs	r3, r3, #1
 800ad26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d004      	beq.n	800ad40 <USB_EPStartXfer+0x7fe>
 800ad36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	029b      	lsls	r3, r3, #10
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4c:	801a      	strh	r2, [r3, #0]
 800ad4e:	e024      	b.n	800ad9a <USB_EPStartXfer+0x858>
 800ad50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d11c      	bne.n	800ad9a <USB_EPStartXfer+0x858>
 800ad60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	461a      	mov	r2, r3
 800ad72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad74:	4413      	add	r3, r2
 800ad76:	643b      	str	r3, [r7, #64]	; 0x40
 800ad78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	00da      	lsls	r2, r3, #3
 800ad86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad88:	4413      	add	r3, r2
 800ad8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ad9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	895b      	ldrh	r3, [r3, #10]
 800ada6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800adaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6959      	ldr	r1, [r3, #20]
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adba:	b29b      	uxth	r3, r3
 800adbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800adc0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800adc4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800adc8:	6800      	ldr	r0, [r0, #0]
 800adca:	f001 f82a 	bl	800be22 <USB_WritePMA>
 800adce:	e213      	b.n	800b1f8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800add0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ade0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ae02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ae0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	441a      	add	r2, r3
 800ae24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ae28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ae3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	461a      	mov	r2, r3
 800ae5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae5c:	4413      	add	r3, r2
 800ae5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	00da      	lsls	r2, r3, #3
 800ae6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae70:	4413      	add	r3, r2
 800ae72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae76:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	891b      	ldrh	r3, [r3, #8]
 800ae8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6959      	ldr	r1, [r3, #20]
 800ae9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aea8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aeac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aeb0:	6800      	ldr	r0, [r0, #0]
 800aeb2:	f000 ffb6 	bl	800be22 <USB_WritePMA>
 800aeb6:	e19f      	b.n	800b1f8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aeb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	6a1a      	ldr	r2, [r3, #32]
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	1ad2      	subs	r2, r2, r3
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 80bc 	beq.w	800b076 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	673b      	str	r3, [r7, #112]	; 0x70
 800af0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	785b      	ldrb	r3, [r3, #1]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d16d      	bne.n	800aff6 <USB_EPStartXfer+0xab4>
 800af1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	66bb      	str	r3, [r7, #104]	; 0x68
 800af26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af34:	b29b      	uxth	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af3a:	4413      	add	r3, r2
 800af3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	00da      	lsls	r2, r3, #3
 800af4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af4e:	4413      	add	r3, r2
 800af50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af54:	667b      	str	r3, [r7, #100]	; 0x64
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5a:	2b3e      	cmp	r3, #62	; 0x3e
 800af5c:	d91c      	bls.n	800af98 <USB_EPStartXfer+0xa56>
 800af5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af62:	095b      	lsrs	r3, r3, #5
 800af64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6c:	f003 031f 	and.w	r3, r3, #31
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <USB_EPStartXfer+0xa3c>
 800af74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af78:	3b01      	subs	r3, #1
 800af7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af82:	b29b      	uxth	r3, r3
 800af84:	029b      	lsls	r3, r3, #10
 800af86:	b29b      	uxth	r3, r3
 800af88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af90:	b29a      	uxth	r2, r3
 800af92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af94:	801a      	strh	r2, [r3, #0]
 800af96:	e053      	b.n	800b040 <USB_EPStartXfer+0xafe>
 800af98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d112      	bne.n	800afc6 <USB_EPStartXfer+0xa84>
 800afa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afaa:	b29a      	uxth	r2, r3
 800afac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afae:	801a      	strh	r2, [r3, #0]
 800afb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc2:	801a      	strh	r2, [r3, #0]
 800afc4:	e03c      	b.n	800b040 <USB_EPStartXfer+0xafe>
 800afc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afca:	085b      	lsrs	r3, r3, #1
 800afcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <USB_EPStartXfer+0xaa4>
 800afdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800afe0:	3301      	adds	r3, #1
 800afe2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afe6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800afea:	b29b      	uxth	r3, r3
 800afec:	029b      	lsls	r3, r3, #10
 800afee:	b29a      	uxth	r2, r3
 800aff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aff2:	801a      	strh	r2, [r3, #0]
 800aff4:	e024      	b.n	800b040 <USB_EPStartXfer+0xafe>
 800aff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	785b      	ldrb	r3, [r3, #1]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d11c      	bne.n	800b040 <USB_EPStartXfer+0xafe>
 800b006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b014:	b29b      	uxth	r3, r3
 800b016:	461a      	mov	r2, r3
 800b018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b01a:	4413      	add	r3, r2
 800b01c:	673b      	str	r3, [r7, #112]	; 0x70
 800b01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	00da      	lsls	r2, r3, #3
 800b02c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b02e:	4413      	add	r3, r2
 800b030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b034:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b03e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	895b      	ldrh	r3, [r3, #10]
 800b04c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6959      	ldr	r1, [r3, #20]
 800b05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b060:	b29b      	uxth	r3, r3
 800b062:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b066:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b06a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b06e:	6800      	ldr	r0, [r0, #0]
 800b070:	f000 fed7 	bl	800be22 <USB_WritePMA>
 800b074:	e0c0      	b.n	800b1f8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	785b      	ldrb	r3, [r3, #1]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d16d      	bne.n	800b162 <USB_EPStartXfer+0xc20>
 800b086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b08a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0a6:	4413      	add	r3, r2
 800b0a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	00da      	lsls	r2, r3, #3
 800b0b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b0c8:	d91c      	bls.n	800b104 <USB_EPStartXfer+0xbc2>
 800b0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ce:	095b      	lsrs	r3, r3, #5
 800b0d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d8:	f003 031f 	and.w	r3, r3, #31
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d104      	bne.n	800b0ea <USB_EPStartXfer+0xba8>
 800b0e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	029b      	lsls	r3, r3, #10
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b100:	801a      	strh	r2, [r3, #0]
 800b102:	e05f      	b.n	800b1c4 <USB_EPStartXfer+0xc82>
 800b104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d112      	bne.n	800b132 <USB_EPStartXfer+0xbf0>
 800b10c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	b29b      	uxth	r3, r3
 800b112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b116:	b29a      	uxth	r2, r3
 800b118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b11a:	801a      	strh	r2, [r3, #0]
 800b11c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b29b      	uxth	r3, r3
 800b122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b12e:	801a      	strh	r2, [r3, #0]
 800b130:	e048      	b.n	800b1c4 <USB_EPStartXfer+0xc82>
 800b132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b140:	f003 0301 	and.w	r3, r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <USB_EPStartXfer+0xc10>
 800b148:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b14c:	3301      	adds	r3, #1
 800b14e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b152:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b156:	b29b      	uxth	r3, r3
 800b158:	029b      	lsls	r3, r3, #10
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b15e:	801a      	strh	r2, [r3, #0]
 800b160:	e030      	b.n	800b1c4 <USB_EPStartXfer+0xc82>
 800b162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d128      	bne.n	800b1c4 <USB_EPStartXfer+0xc82>
 800b172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b18e:	b29b      	uxth	r3, r3
 800b190:	461a      	mov	r2, r3
 800b192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b196:	4413      	add	r3, r2
 800b198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	00da      	lsls	r2, r3, #3
 800b1aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	891b      	ldrh	r3, [r3, #8]
 800b1d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6959      	ldr	r1, [r3, #20]
 800b1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b1ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b1ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b1f2:	6800      	ldr	r0, [r0, #0]
 800b1f4:	f000 fe15 	bl	800be22 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	b29b      	uxth	r3, r3
 800b216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b21a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b21e:	817b      	strh	r3, [r7, #10]
 800b220:	897b      	ldrh	r3, [r7, #10]
 800b222:	f083 0310 	eor.w	r3, r3, #16
 800b226:	817b      	strh	r3, [r7, #10]
 800b228:	897b      	ldrh	r3, [r7, #10]
 800b22a:	f083 0320 	eor.w	r3, r3, #32
 800b22e:	817b      	strh	r3, [r7, #10]
 800b230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b23e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	441a      	add	r2, r3
 800b24a:	897b      	ldrh	r3, [r7, #10]
 800b24c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	8013      	strh	r3, [r2, #0]
 800b260:	f000 bc9f 	b.w	800bba2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	7b1b      	ldrb	r3, [r3, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	f040 80ae 	bne.w	800b3d2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699a      	ldr	r2, [r3, #24]
 800b282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d917      	bls.n	800b2c2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b2:	1ad2      	subs	r2, r2, r3
 800b2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	619a      	str	r2, [r3, #24]
 800b2c0:	e00e      	b.n	800b2e0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b304:	4413      	add	r3, r2
 800b306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	00da      	lsls	r2, r3, #3
 800b318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b31c:	4413      	add	r3, r2
 800b31e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32a:	2b3e      	cmp	r3, #62	; 0x3e
 800b32c:	d91d      	bls.n	800b36a <USB_EPStartXfer+0xe28>
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b332:	095b      	lsrs	r3, r3, #5
 800b334:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	f003 031f 	and.w	r3, r3, #31
 800b340:	2b00      	cmp	r3, #0
 800b342:	d104      	bne.n	800b34e <USB_EPStartXfer+0xe0c>
 800b344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b348:	3b01      	subs	r3, #1
 800b34a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b34e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b352:	b29b      	uxth	r3, r3
 800b354:	029b      	lsls	r3, r3, #10
 800b356:	b29b      	uxth	r3, r3
 800b358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b35c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b360:	b29a      	uxth	r2, r3
 800b362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b366:	801a      	strh	r2, [r3, #0]
 800b368:	e3e1      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
 800b36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d116      	bne.n	800b3a0 <USB_EPStartXfer+0xe5e>
 800b372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b37e:	b29a      	uxth	r2, r3
 800b380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b384:	801a      	strh	r2, [r3, #0]
 800b386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b38a:	881b      	ldrh	r3, [r3, #0]
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b396:	b29a      	uxth	r2, r3
 800b398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b39c:	801a      	strh	r2, [r3, #0]
 800b39e:	e3c6      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
 800b3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a4:	085b      	lsrs	r3, r3, #1
 800b3a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d004      	beq.n	800b3c0 <USB_EPStartXfer+0xe7e>
 800b3b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	029b      	lsls	r3, r3, #10
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ce:	801a      	strh	r2, [r3, #0]
 800b3d0:	e3ad      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	78db      	ldrb	r3, [r3, #3]
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	f040 8200 	bne.w	800b7e4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f040 8091 	bne.w	800b518 <USB_EPStartXfer+0xfd6>
 800b3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b412:	b29b      	uxth	r3, r3
 800b414:	461a      	mov	r2, r3
 800b416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b41a:	4413      	add	r3, r2
 800b41c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	00da      	lsls	r2, r3, #3
 800b42e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b432:	4413      	add	r3, r2
 800b434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	2b3e      	cmp	r3, #62	; 0x3e
 800b44a:	d925      	bls.n	800b498 <USB_EPStartXfer+0xf56>
 800b44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	095b      	lsrs	r3, r3, #5
 800b45a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	f003 031f 	and.w	r3, r3, #31
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d104      	bne.n	800b47c <USB_EPStartXfer+0xf3a>
 800b472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b476:	3b01      	subs	r3, #1
 800b478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b480:	b29b      	uxth	r3, r3
 800b482:	029b      	lsls	r3, r3, #10
 800b484:	b29b      	uxth	r3, r3
 800b486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b48a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b48e:	b29a      	uxth	r2, r3
 800b490:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b494:	801a      	strh	r2, [r3, #0]
 800b496:	e074      	b.n	800b582 <USB_EPStartXfer+0x1040>
 800b498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d116      	bne.n	800b4d6 <USB_EPStartXfer+0xf94>
 800b4a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4ba:	801a      	strh	r2, [r3, #0]
 800b4bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4d2:	801a      	strh	r2, [r3, #0]
 800b4d4:	e055      	b.n	800b582 <USB_EPStartXfer+0x1040>
 800b4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	085b      	lsrs	r3, r3, #1
 800b4e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d004      	beq.n	800b506 <USB_EPStartXfer+0xfc4>
 800b4fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b500:	3301      	adds	r3, #1
 800b502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	029b      	lsls	r3, r3, #10
 800b50e:	b29a      	uxth	r2, r3
 800b510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	e034      	b.n	800b582 <USB_EPStartXfer+0x1040>
 800b518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	785b      	ldrb	r3, [r3, #1]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d12c      	bne.n	800b582 <USB_EPStartXfer+0x1040>
 800b528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b52c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b53a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b544:	b29b      	uxth	r3, r3
 800b546:	461a      	mov	r2, r3
 800b548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b54c:	4413      	add	r3, r2
 800b54e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	00da      	lsls	r2, r3, #3
 800b560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b564:	4413      	add	r3, r2
 800b566:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b56a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b580:	801a      	strh	r2, [r3, #0]
 800b582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	785b      	ldrb	r3, [r3, #1]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 8091 	bne.w	800b6c4 <USB_EPStartXfer+0x1182>
 800b5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	00da      	lsls	r2, r3, #3
 800b5da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5de:	4413      	add	r3, r2
 800b5e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b3e      	cmp	r3, #62	; 0x3e
 800b5f6:	d925      	bls.n	800b644 <USB_EPStartXfer+0x1102>
 800b5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	095b      	lsrs	r3, r3, #5
 800b606:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	f003 031f 	and.w	r3, r3, #31
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d104      	bne.n	800b628 <USB_EPStartXfer+0x10e6>
 800b61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b622:	3b01      	subs	r3, #1
 800b624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	029b      	lsls	r3, r3, #10
 800b630:	b29b      	uxth	r3, r3
 800b632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b640:	801a      	strh	r2, [r3, #0]
 800b642:	e06d      	b.n	800b720 <USB_EPStartXfer+0x11de>
 800b644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d116      	bne.n	800b682 <USB_EPStartXfer+0x1140>
 800b654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b658:	881b      	ldrh	r3, [r3, #0]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b660:	b29a      	uxth	r2, r3
 800b662:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b666:	801a      	strh	r2, [r3, #0]
 800b668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b678:	b29a      	uxth	r2, r3
 800b67a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b67e:	801a      	strh	r2, [r3, #0]
 800b680:	e04e      	b.n	800b720 <USB_EPStartXfer+0x11de>
 800b682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	085b      	lsrs	r3, r3, #1
 800b690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d004      	beq.n	800b6b2 <USB_EPStartXfer+0x1170>
 800b6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	029b      	lsls	r3, r3, #10
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6c0:	801a      	strh	r2, [r3, #0]
 800b6c2:	e02d      	b.n	800b720 <USB_EPStartXfer+0x11de>
 800b6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	785b      	ldrb	r3, [r3, #1]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d125      	bne.n	800b720 <USB_EPStartXfer+0x11de>
 800b6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	00da      	lsls	r2, r3, #3
 800b6fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b702:	4413      	add	r3, r2
 800b704:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	b29a      	uxth	r2, r3
 800b71a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b71e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 81fe 	beq.w	800bb2e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b752:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d005      	beq.n	800b76a <USB_EPStartXfer+0x1228>
 800b75e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10d      	bne.n	800b786 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b76a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b76e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 81db 	bne.w	800bb2e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b778:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b780:	2b00      	cmp	r3, #0
 800b782:	f040 81d4 	bne.w	800bb2e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	881b      	ldrh	r3, [r3, #0]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	441a      	add	r2, r3
 800b7ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	8013      	strh	r3, [r2, #0]
 800b7e2:	e1a4      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	78db      	ldrb	r3, [r3, #3]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	f040 819a 	bne.w	800bb2a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	699a      	ldr	r2, [r3, #24]
 800b802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d917      	bls.n	800b842 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	699a      	ldr	r2, [r3, #24]
 800b82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b832:	1ad2      	subs	r2, r2, r3
 800b834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	619a      	str	r2, [r3, #24]
 800b840:	e00e      	b.n	800b860 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2200      	movs	r2, #0
 800b85e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	785b      	ldrb	r3, [r3, #1]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d178      	bne.n	800b962 <USB_EPStartXfer+0x1420>
 800b870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	461a      	mov	r2, r3
 800b890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b894:	4413      	add	r3, r2
 800b896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	00da      	lsls	r2, r3, #3
 800b8a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ba:	2b3e      	cmp	r3, #62	; 0x3e
 800b8bc:	d91d      	bls.n	800b8fa <USB_EPStartXfer+0x13b8>
 800b8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8cc:	f003 031f 	and.w	r3, r3, #31
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d104      	bne.n	800b8de <USB_EPStartXfer+0x139c>
 800b8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	029b      	lsls	r3, r3, #10
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8f6:	801a      	strh	r2, [r3, #0]
 800b8f8:	e064      	b.n	800b9c4 <USB_EPStartXfer+0x1482>
 800b8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d116      	bne.n	800b930 <USB_EPStartXfer+0x13ee>
 800b902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	b29b      	uxth	r3, r3
 800b90a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b90e:	b29a      	uxth	r2, r3
 800b910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b914:	801a      	strh	r2, [r3, #0]
 800b916:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b926:	b29a      	uxth	r2, r3
 800b928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b92c:	801a      	strh	r2, [r3, #0]
 800b92e:	e049      	b.n	800b9c4 <USB_EPStartXfer+0x1482>
 800b930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b934:	085b      	lsrs	r3, r3, #1
 800b936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	2b00      	cmp	r3, #0
 800b944:	d004      	beq.n	800b950 <USB_EPStartXfer+0x140e>
 800b946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b94a:	3301      	adds	r3, #1
 800b94c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b954:	b29b      	uxth	r3, r3
 800b956:	029b      	lsls	r3, r3, #10
 800b958:	b29a      	uxth	r2, r3
 800b95a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b95e:	801a      	strh	r2, [r3, #0]
 800b960:	e030      	b.n	800b9c4 <USB_EPStartXfer+0x1482>
 800b962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d128      	bne.n	800b9c4 <USB_EPStartXfer+0x1482>
 800b972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b98e:	b29b      	uxth	r3, r3
 800b990:	461a      	mov	r2, r3
 800b992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b996:	4413      	add	r3, r2
 800b998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	00da      	lsls	r2, r3, #3
 800b9aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b9c2:	801a      	strh	r2, [r3, #0]
 800b9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d178      	bne.n	800bad4 <USB_EPStartXfer+0x1592>
 800b9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	461a      	mov	r2, r3
 800ba02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba06:	4413      	add	r3, r2
 800ba08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	00da      	lsls	r2, r3, #3
 800ba1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba1e:	4413      	add	r3, r2
 800ba20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	2b3e      	cmp	r3, #62	; 0x3e
 800ba2e:	d91d      	bls.n	800ba6c <USB_EPStartXfer+0x152a>
 800ba30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba34:	095b      	lsrs	r3, r3, #5
 800ba36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3e:	f003 031f 	and.w	r3, r3, #31
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d104      	bne.n	800ba50 <USB_EPStartXfer+0x150e>
 800ba46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	029b      	lsls	r3, r3, #10
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba68:	801a      	strh	r2, [r3, #0]
 800ba6a:	e060      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
 800ba6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d116      	bne.n	800baa2 <USB_EPStartXfer+0x1560>
 800ba74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba86:	801a      	strh	r2, [r3, #0]
 800ba88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba9e:	801a      	strh	r2, [r3, #0]
 800baa0:	e045      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
 800baa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa6:	085b      	lsrs	r3, r3, #1
 800baa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d004      	beq.n	800bac2 <USB_EPStartXfer+0x1580>
 800bab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800babc:	3301      	adds	r3, #1
 800babe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	029b      	lsls	r3, r3, #10
 800baca:	b29a      	uxth	r2, r3
 800bacc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bad0:	801a      	strh	r2, [r3, #0]
 800bad2:	e02c      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
 800bad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	785b      	ldrb	r3, [r3, #1]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d124      	bne.n	800bb2e <USB_EPStartXfer+0x15ec>
 800bae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	461a      	mov	r2, r3
 800baf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bafa:	4413      	add	r3, r2
 800bafc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	00da      	lsls	r2, r3, #3
 800bb0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bb12:	4413      	add	r3, r2
 800bb14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb26:	801a      	strh	r2, [r3, #0]
 800bb28:	e001      	b.n	800bb2e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e03a      	b.n	800bba4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bb60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bb6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	441a      	add	r2, r3
 800bb8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b085      	sub	sp, #20
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	785b      	ldrb	r3, [r3, #1]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d020      	beq.n	800bc02 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	881b      	ldrh	r3, [r3, #0]
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd6:	81bb      	strh	r3, [r7, #12]
 800bbd8:	89bb      	ldrh	r3, [r7, #12]
 800bbda:	f083 0310 	eor.w	r3, r3, #16
 800bbde:	81bb      	strh	r3, [r7, #12]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	441a      	add	r2, r3
 800bbea:	89bb      	ldrh	r3, [r7, #12]
 800bbec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	8013      	strh	r3, [r2, #0]
 800bc00:	e01f      	b.n	800bc42 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc18:	81fb      	strh	r3, [r7, #14]
 800bc1a:	89fb      	ldrh	r3, [r7, #14]
 800bc1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc20:	81fb      	strh	r3, [r7, #14]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	441a      	add	r2, r3
 800bc2c:	89fb      	ldrh	r3, [r7, #14]
 800bc2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	7b1b      	ldrb	r3, [r3, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f040 809d 	bne.w	800bd9e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	785b      	ldrb	r3, [r3, #1]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d04c      	beq.n	800bd06 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	823b      	strh	r3, [r7, #16]
 800bc7a:	8a3b      	ldrh	r3, [r7, #16]
 800bc7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d01b      	beq.n	800bcbc <USB_EPClearStall+0x6c>
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	881b      	ldrh	r3, [r3, #0]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc9a:	81fb      	strh	r3, [r7, #14]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	441a      	add	r2, r3
 800bca6:	89fb      	ldrh	r3, [r7, #14]
 800bca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	78db      	ldrb	r3, [r3, #3]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d06c      	beq.n	800bd9e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	4413      	add	r3, r2
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcda:	81bb      	strh	r3, [r7, #12]
 800bcdc:	89bb      	ldrh	r3, [r7, #12]
 800bcde:	f083 0320 	eor.w	r3, r3, #32
 800bce2:	81bb      	strh	r3, [r7, #12]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	441a      	add	r2, r3
 800bcee:	89bb      	ldrh	r3, [r7, #12]
 800bcf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	8013      	strh	r3, [r2, #0]
 800bd04:	e04b      	b.n	800bd9e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	82fb      	strh	r3, [r7, #22]
 800bd14:	8afb      	ldrh	r3, [r7, #22]
 800bd16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01b      	beq.n	800bd56 <USB_EPClearStall+0x106>
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd34:	82bb      	strh	r3, [r7, #20]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	441a      	add	r2, r3
 800bd40:	8abb      	ldrh	r3, [r7, #20]
 800bd42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6c:	827b      	strh	r3, [r7, #18]
 800bd6e:	8a7b      	ldrh	r3, [r7, #18]
 800bd70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bd74:	827b      	strh	r3, [r7, #18]
 800bd76:	8a7b      	ldrh	r3, [r7, #18]
 800bd78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd7c:	827b      	strh	r3, [r7, #18]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	441a      	add	r2, r3
 800bd88:	8a7b      	ldrh	r3, [r7, #18]
 800bd8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	371c      	adds	r7, #28
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bdb8:	78fb      	ldrb	r3, [r7, #3]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d103      	bne.n	800bdc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2280      	movs	r2, #128	; 0x80
 800bdc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bde8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr

0800be02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800be02:	b480      	push	{r7}
 800be04:	b085      	sub	sp, #20
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be10:	b29b      	uxth	r3, r3
 800be12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800be14:	68fb      	ldr	r3, [r7, #12]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be22:	b480      	push	{r7}
 800be24:	b08d      	sub	sp, #52	; 0x34
 800be26:	af00      	add	r7, sp, #0
 800be28:	60f8      	str	r0, [r7, #12]
 800be2a:	60b9      	str	r1, [r7, #8]
 800be2c:	4611      	mov	r1, r2
 800be2e:	461a      	mov	r2, r3
 800be30:	460b      	mov	r3, r1
 800be32:	80fb      	strh	r3, [r7, #6]
 800be34:	4613      	mov	r3, r2
 800be36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be38:	88bb      	ldrh	r3, [r7, #4]
 800be3a:	3301      	adds	r3, #1
 800be3c:	085b      	lsrs	r3, r3, #1
 800be3e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be48:	88fa      	ldrh	r2, [r7, #6]
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	4413      	add	r3, r2
 800be4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be58:	e01b      	b.n	800be92 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	3301      	adds	r3, #1
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	b29b      	uxth	r3, r3
 800be70:	461a      	mov	r2, r3
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	4313      	orrs	r3, r2
 800be76:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	3302      	adds	r3, #2
 800be84:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	3301      	adds	r3, #1
 800be8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	3b01      	subs	r3, #1
 800be90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e0      	bne.n	800be5a <USB_WritePMA+0x38>
  }
}
 800be98:	bf00      	nop
 800be9a:	bf00      	nop
 800be9c:	3734      	adds	r7, #52	; 0x34
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b08b      	sub	sp, #44	; 0x2c
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	4611      	mov	r1, r2
 800beb2:	461a      	mov	r2, r3
 800beb4:	460b      	mov	r3, r1
 800beb6:	80fb      	strh	r3, [r7, #6]
 800beb8:	4613      	mov	r3, r2
 800beba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bebc:	88bb      	ldrh	r3, [r7, #4]
 800bebe:	085b      	lsrs	r3, r3, #1
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800becc:	88fa      	ldrh	r2, [r7, #6]
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	4413      	add	r3, r2
 800bed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bed6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
 800bedc:	e018      	b.n	800bf10 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	3302      	adds	r3, #2
 800beea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	3301      	adds	r3, #1
 800bef8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	0a1b      	lsrs	r3, r3, #8
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	3301      	adds	r3, #1
 800bf08:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e3      	bne.n	800bede <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bf16:	88bb      	ldrh	r3, [r7, #4]
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d007      	beq.n	800bf32 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	701a      	strb	r2, [r3, #0]
  }
}
 800bf32:	bf00      	nop
 800bf34:	372c      	adds	r7, #44	; 0x2c
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	460b      	mov	r3, r1
 800bf48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800bf4a:	2010      	movs	r0, #16
 800bf4c:	f001 fe6a 	bl	800dc24 <USBD_static_malloc>
 800bf50:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d105      	bne.n	800bf64 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bf60:	2302      	movs	r3, #2
 800bf62:	e01b      	b.n	800bf9c <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7c1b      	ldrb	r3, [r3, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d103      	bne.n	800bf7c <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2207      	movs	r2, #7
 800bf78:	875a      	strh	r2, [r3, #58]	; 0x3a
 800bf7a:	e002      	b.n	800bf82 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	220a      	movs	r2, #10
 800bf80:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800bf82:	2304      	movs	r3, #4
 800bf84:	2203      	movs	r2, #3
 800bf86:	2181      	movs	r1, #129	; 0x81
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f001 fd04 	bl	800d996 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800bfb0:	2181      	movs	r1, #129	; 0x81
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f001 fd15 	bl	800d9e2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d009      	beq.n	800bfe2 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 fe33 	bl	800dc40 <USBD_static_free>
    pdev->pClassData = NULL;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bffc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800c002:	2300      	movs	r3, #0
 800c004:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d101      	bne.n	800c010 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e0e8      	b.n	800c1e2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d046      	beq.n	800c0aa <USBD_HID_Setup+0xbe>
 800c01c:	2b20      	cmp	r3, #32
 800c01e:	f040 80d8 	bne.w	800c1d2 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	785b      	ldrb	r3, [r3, #1]
 800c026:	3b02      	subs	r3, #2
 800c028:	2b09      	cmp	r3, #9
 800c02a:	d836      	bhi.n	800c09a <USBD_HID_Setup+0xae>
 800c02c:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <USBD_HID_Setup+0x48>)
 800c02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c032:	bf00      	nop
 800c034:	0800c08b 	.word	0x0800c08b
 800c038:	0800c06b 	.word	0x0800c06b
 800c03c:	0800c09b 	.word	0x0800c09b
 800c040:	0800c09b 	.word	0x0800c09b
 800c044:	0800c09b 	.word	0x0800c09b
 800c048:	0800c09b 	.word	0x0800c09b
 800c04c:	0800c09b 	.word	0x0800c09b
 800c050:	0800c09b 	.word	0x0800c09b
 800c054:	0800c079 	.word	0x0800c079
 800c058:	0800c05d 	.word	0x0800c05d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	885b      	ldrh	r3, [r3, #2]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	461a      	mov	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	601a      	str	r2, [r3, #0]
          break;
 800c068:	e01e      	b.n	800c0a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f001 f9b0 	bl	800d3d6 <USBD_CtlSendData>
          break;
 800c076:	e017      	b.n	800c0a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	885b      	ldrh	r3, [r3, #2]
 800c07c:	0a1b      	lsrs	r3, r3, #8
 800c07e:	b29b      	uxth	r3, r3
 800c080:	b2db      	uxtb	r3, r3
 800c082:	461a      	mov	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	605a      	str	r2, [r3, #4]
          break;
 800c088:	e00e      	b.n	800c0a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	3304      	adds	r3, #4
 800c08e:	2201      	movs	r2, #1
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f001 f99f 	bl	800d3d6 <USBD_CtlSendData>
          break;
 800c098:	e006      	b.n	800c0a8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 f929 	bl	800d2f4 <USBD_CtlError>
          ret = USBD_FAIL;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	75fb      	strb	r3, [r7, #23]
          break;
 800c0a6:	bf00      	nop
      }
      break;
 800c0a8:	e09a      	b.n	800c1e0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	2b0b      	cmp	r3, #11
 800c0b0:	f200 8086 	bhi.w	800c1c0 <USBD_HID_Setup+0x1d4>
 800c0b4:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <USBD_HID_Setup+0xd0>)
 800c0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ba:	bf00      	nop
 800c0bc:	0800c0ed 	.word	0x0800c0ed
 800c0c0:	0800c1cf 	.word	0x0800c1cf
 800c0c4:	0800c1c1 	.word	0x0800c1c1
 800c0c8:	0800c1c1 	.word	0x0800c1c1
 800c0cc:	0800c1c1 	.word	0x0800c1c1
 800c0d0:	0800c1c1 	.word	0x0800c1c1
 800c0d4:	0800c117 	.word	0x0800c117
 800c0d8:	0800c1c1 	.word	0x0800c1c1
 800c0dc:	0800c1c1 	.word	0x0800c1c1
 800c0e0:	0800c1c1 	.word	0x0800c1c1
 800c0e4:	0800c16f 	.word	0x0800c16f
 800c0e8:	0800c199 	.word	0x0800c199
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d107      	bne.n	800c108 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c0f8:	f107 030a 	add.w	r3, r7, #10
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f001 f968 	bl	800d3d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c106:	e063      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f001 f8f2 	bl	800d2f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c110:	2303      	movs	r3, #3
 800c112:	75fb      	strb	r3, [r7, #23]
          break;
 800c114:	e05c      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	885b      	ldrh	r3, [r3, #2]
 800c11a:	0a1b      	lsrs	r3, r3, #8
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	2b22      	cmp	r3, #34	; 0x22
 800c120:	d108      	bne.n	800c134 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	88db      	ldrh	r3, [r3, #6]
 800c126:	2b4a      	cmp	r3, #74	; 0x4a
 800c128:	bf28      	it	cs
 800c12a:	234a      	movcs	r3, #74	; 0x4a
 800c12c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800c12e:	4b2f      	ldr	r3, [pc, #188]	; (800c1ec <USBD_HID_Setup+0x200>)
 800c130:	613b      	str	r3, [r7, #16]
 800c132:	e015      	b.n	800c160 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	885b      	ldrh	r3, [r3, #2]
 800c138:	0a1b      	lsrs	r3, r3, #8
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	2b21      	cmp	r3, #33	; 0x21
 800c13e:	d108      	bne.n	800c152 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800c140:	4b2b      	ldr	r3, [pc, #172]	; (800c1f0 <USBD_HID_Setup+0x204>)
 800c142:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	88db      	ldrh	r3, [r3, #6]
 800c148:	2b09      	cmp	r3, #9
 800c14a:	bf28      	it	cs
 800c14c:	2309      	movcs	r3, #9
 800c14e:	82bb      	strh	r3, [r7, #20]
 800c150:	e006      	b.n	800c160 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 f8cd 	bl	800d2f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c15a:	2303      	movs	r3, #3
 800c15c:	75fb      	strb	r3, [r7, #23]
            break;
 800c15e:	e037      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800c160:	8abb      	ldrh	r3, [r7, #20]
 800c162:	461a      	mov	r2, r3
 800c164:	6939      	ldr	r1, [r7, #16]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f001 f935 	bl	800d3d6 <USBD_CtlSendData>
          break;
 800c16c:	e030      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b03      	cmp	r3, #3
 800c178:	d107      	bne.n	800c18a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3308      	adds	r3, #8
 800c17e:	2201      	movs	r2, #1
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f001 f927 	bl	800d3d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c188:	e022      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f001 f8b1 	bl	800d2f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c192:	2303      	movs	r3, #3
 800c194:	75fb      	strb	r3, [r7, #23]
          break;
 800c196:	e01b      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d106      	bne.n	800c1b2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	885b      	ldrh	r3, [r3, #2]
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1b0:	e00e      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f001 f89d 	bl	800d2f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c1be:	e007      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 f896 	bl	800d2f4 <USBD_CtlError>
          ret = USBD_FAIL;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	75fb      	strb	r3, [r7, #23]
          break;
 800c1cc:	e000      	b.n	800c1d0 <USBD_HID_Setup+0x1e4>
          break;
 800c1ce:	bf00      	nop
      }
      break;
 800c1d0:	e006      	b.n	800c1e0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f001 f88d 	bl	800d2f4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	75fb      	strb	r3, [r7, #23]
      break;
 800c1de:	bf00      	nop
  }

  return (uint8_t)ret;
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	200000fc 	.word	0x200000fc
 800c1f0:	200000e4 	.word	0x200000e4

0800c1f4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2222      	movs	r2, #34	; 0x22
 800c200:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800c202:	4b03      	ldr	r3, [pc, #12]	; (800c210 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800c204:	4618      	mov	r0, r3
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	20000078 	.word	0x20000078

0800c214 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2222      	movs	r2, #34	; 0x22
 800c220:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800c222:	4b03      	ldr	r3, [pc, #12]	; (800c230 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	2000009c 	.word	0x2000009c

0800c234 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2222      	movs	r2, #34	; 0x22
 800c240:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800c242:	4b03      	ldr	r3, [pc, #12]	; (800c250 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	200000c0 	.word	0x200000c0

0800c254 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c266:	2200      	movs	r2, #0
 800c268:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	220a      	movs	r2, #10
 800c284:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800c286:	4b03      	ldr	r3, [pc, #12]	; (800c294 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	200000f0 	.word	0x200000f0

0800c298 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e01f      	b.n	800c2f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	79fa      	ldrb	r2, [r7, #7]
 800c2e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f001 faed 	bl	800d8c4 <USBD_LL_Init>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c302:	2300      	movs	r3, #0
 800c304:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e016      	b.n	800c33e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	f107 020e 	add.w	r2, r7, #14
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	4602      	mov	r2, r0
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f001 fb06 	bl	800d960 <USBD_LL_Start>
 800c354:	4603      	mov	r3, r0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d009      	beq.n	800c3a2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	4611      	mov	r1, r2
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	4798      	blx	r3
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	78fa      	ldrb	r2, [r7, #3]
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	4798      	blx	r3
  }

  return USBD_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 ff46 	bl	800d280 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c402:	461a      	mov	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c410:	f003 031f 	and.w	r3, r3, #31
 800c414:	2b02      	cmp	r3, #2
 800c416:	d01a      	beq.n	800c44e <USBD_LL_SetupStage+0x72>
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d822      	bhi.n	800c462 <USBD_LL_SetupStage+0x86>
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <USBD_LL_SetupStage+0x4a>
 800c420:	2b01      	cmp	r3, #1
 800c422:	d00a      	beq.n	800c43a <USBD_LL_SetupStage+0x5e>
 800c424:	e01d      	b.n	800c462 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f9ee 	bl	800c810 <USBD_StdDevReq>
 800c434:	4603      	mov	r3, r0
 800c436:	73fb      	strb	r3, [r7, #15]
      break;
 800c438:	e020      	b.n	800c47c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fa52 	bl	800c8ec <USBD_StdItfReq>
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]
      break;
 800c44c:	e016      	b.n	800c47c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa91 	bl	800c97e <USBD_StdEPReq>
 800c45c:	4603      	mov	r3, r0
 800c45e:	73fb      	strb	r3, [r7, #15]
      break;
 800c460:	e00c      	b.n	800c47c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c468:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 fad5 	bl	800da20 <USBD_LL_StallEP>
 800c476:	4603      	mov	r3, r0
 800c478:	73fb      	strb	r3, [r7, #15]
      break;
 800c47a:	bf00      	nop
  }

  return ret;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b086      	sub	sp, #24
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	60f8      	str	r0, [r7, #12]
 800c48e:	460b      	mov	r3, r1
 800c490:	607a      	str	r2, [r7, #4]
 800c492:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d138      	bne.n	800c50c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c4a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d14a      	bne.n	800c542 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	689a      	ldr	r2, [r3, #8]
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d913      	bls.n	800c4e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	1ad2      	subs	r2, r2, r3
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	68da      	ldr	r2, [r3, #12]
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	bf28      	it	cs
 800c4d2:	4613      	movcs	r3, r2
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 ffa8 	bl	800d42e <USBD_CtlContinueRx>
 800c4de:	e030      	b.n	800c542 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d10b      	bne.n	800c504 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f000 ffa3 	bl	800d450 <USBD_CtlSendStatus>
 800c50a:	e01a      	b.n	800c542 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b03      	cmp	r3, #3
 800c516:	d114      	bne.n	800c542 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00e      	beq.n	800c542 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	7afa      	ldrb	r2, [r7, #11]
 800c52e:	4611      	mov	r1, r2
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	4798      	blx	r3
 800c534:	4603      	mov	r3, r0
 800c536:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	e000      	b.n	800c544 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3718      	adds	r7, #24
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	460b      	mov	r3, r1
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c55a:	7afb      	ldrb	r3, [r7, #11]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d16b      	bne.n	800c638 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3314      	adds	r3, #20
 800c564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d156      	bne.n	800c61e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	689a      	ldr	r2, [r3, #8]
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d914      	bls.n	800c5a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	1ad2      	subs	r2, r2, r3
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	461a      	mov	r2, r3
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 ff3a 	bl	800d40c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c598:	2300      	movs	r3, #0
 800c59a:	2200      	movs	r2, #0
 800c59c:	2100      	movs	r1, #0
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f001 fae9 	bl	800db76 <USBD_LL_PrepareReceive>
 800c5a4:	e03b      	b.n	800c61e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	68da      	ldr	r2, [r3, #12]
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d11c      	bne.n	800c5ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d316      	bcc.n	800c5ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d20f      	bcs.n	800c5ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 ff1b 	bl	800d40c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5de:	2300      	movs	r3, #0
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f001 fac6 	bl	800db76 <USBD_LL_PrepareReceive>
 800c5ea:	e018      	b.n	800c61e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b03      	cmp	r3, #3
 800c5f6:	d10b      	bne.n	800c610 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d005      	beq.n	800c610 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c610:	2180      	movs	r1, #128	; 0x80
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f001 fa04 	bl	800da20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f000 ff2c 	bl	800d476 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c624:	2b01      	cmp	r3, #1
 800c626:	d122      	bne.n	800c66e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f7ff fe98 	bl	800c35e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c636:	e01a      	b.n	800c66e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b03      	cmp	r3, #3
 800c642:	d114      	bne.n	800c66e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00e      	beq.n	800c66e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	7afa      	ldrb	r2, [r7, #11]
 800c65a:	4611      	mov	r1, r2
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	4798      	blx	r3
 800c660:	4603      	mov	r3, r0
 800c662:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c66a:	7dfb      	ldrb	r3, [r7, #23]
 800c66c:	e000      	b.n	800c670 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e02f      	b.n	800c70c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00f      	beq.n	800c6d6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d009      	beq.n	800c6d6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	6852      	ldr	r2, [r2, #4]
 800c6ce:	b2d2      	uxtb	r2, r2
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6d6:	2340      	movs	r3, #64	; 0x40
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2100      	movs	r1, #0
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f001 f95a 	bl	800d996 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2240      	movs	r2, #64	; 0x40
 800c6ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6f2:	2340      	movs	r3, #64	; 0x40
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2180      	movs	r1, #128	; 0x80
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 f94c 	bl	800d996 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2201      	movs	r2, #1
 800c702:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2240      	movs	r2, #64	; 0x40
 800c708:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	460b      	mov	r3, r1
 800c71e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	78fa      	ldrb	r2, [r7, #3]
 800c724:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c742:	b2da      	uxtb	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2204      	movs	r2, #4
 800c74e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b04      	cmp	r3, #4
 800c772:	d106      	bne.n	800c782 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e012      	b.n	800c7cc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d10b      	bne.n	800c7ca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d005      	beq.n	800c7ca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b087      	sub	sp, #28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c7f2:	8a3b      	ldrh	r3, [r7, #16]
 800c7f4:	021b      	lsls	r3, r3, #8
 800c7f6:	b21a      	sxth	r2, r3
 800c7f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	b21b      	sxth	r3, r3
 800c800:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c802:	89fb      	ldrh	r3, [r7, #14]
}
 800c804:	4618      	mov	r0, r3
 800c806:	371c      	adds	r7, #28
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c826:	2b40      	cmp	r3, #64	; 0x40
 800c828:	d005      	beq.n	800c836 <USBD_StdDevReq+0x26>
 800c82a:	2b40      	cmp	r3, #64	; 0x40
 800c82c:	d853      	bhi.n	800c8d6 <USBD_StdDevReq+0xc6>
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00b      	beq.n	800c84a <USBD_StdDevReq+0x3a>
 800c832:	2b20      	cmp	r3, #32
 800c834:	d14f      	bne.n	800c8d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	4798      	blx	r3
 800c844:	4603      	mov	r3, r0
 800c846:	73fb      	strb	r3, [r7, #15]
      break;
 800c848:	e04a      	b.n	800c8e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	785b      	ldrb	r3, [r3, #1]
 800c84e:	2b09      	cmp	r3, #9
 800c850:	d83b      	bhi.n	800c8ca <USBD_StdDevReq+0xba>
 800c852:	a201      	add	r2, pc, #4	; (adr r2, 800c858 <USBD_StdDevReq+0x48>)
 800c854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c858:	0800c8ad 	.word	0x0800c8ad
 800c85c:	0800c8c1 	.word	0x0800c8c1
 800c860:	0800c8cb 	.word	0x0800c8cb
 800c864:	0800c8b7 	.word	0x0800c8b7
 800c868:	0800c8cb 	.word	0x0800c8cb
 800c86c:	0800c88b 	.word	0x0800c88b
 800c870:	0800c881 	.word	0x0800c881
 800c874:	0800c8cb 	.word	0x0800c8cb
 800c878:	0800c8a3 	.word	0x0800c8a3
 800c87c:	0800c895 	.word	0x0800c895
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f9de 	bl	800cc44 <USBD_GetDescriptor>
          break;
 800c888:	e024      	b.n	800c8d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fb6d 	bl	800cf6c <USBD_SetAddress>
          break;
 800c892:	e01f      	b.n	800c8d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fbac 	bl	800cff4 <USBD_SetConfig>
 800c89c:	4603      	mov	r3, r0
 800c89e:	73fb      	strb	r3, [r7, #15]
          break;
 800c8a0:	e018      	b.n	800c8d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fc4b 	bl	800d140 <USBD_GetConfig>
          break;
 800c8aa:	e013      	b.n	800c8d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fc7c 	bl	800d1ac <USBD_GetStatus>
          break;
 800c8b4:	e00e      	b.n	800c8d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fcab 	bl	800d214 <USBD_SetFeature>
          break;
 800c8be:	e009      	b.n	800c8d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fcba 	bl	800d23c <USBD_ClrFeature>
          break;
 800c8c8:	e004      	b.n	800c8d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fd11 	bl	800d2f4 <USBD_CtlError>
          break;
 800c8d2:	bf00      	nop
      }
      break;
 800c8d4:	e004      	b.n	800c8e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fd0b 	bl	800d2f4 <USBD_CtlError>
      break;
 800c8de:	bf00      	nop
  }

  return ret;
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop

0800c8ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c902:	2b40      	cmp	r3, #64	; 0x40
 800c904:	d005      	beq.n	800c912 <USBD_StdItfReq+0x26>
 800c906:	2b40      	cmp	r3, #64	; 0x40
 800c908:	d82f      	bhi.n	800c96a <USBD_StdItfReq+0x7e>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <USBD_StdItfReq+0x26>
 800c90e:	2b20      	cmp	r3, #32
 800c910:	d12b      	bne.n	800c96a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	3b01      	subs	r3, #1
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d81d      	bhi.n	800c95c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	889b      	ldrh	r3, [r3, #4]
 800c924:	b2db      	uxtb	r3, r3
 800c926:	2b01      	cmp	r3, #1
 800c928:	d813      	bhi.n	800c952 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	4798      	blx	r3
 800c938:	4603      	mov	r3, r0
 800c93a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	88db      	ldrh	r3, [r3, #6]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d110      	bne.n	800c966 <USBD_StdItfReq+0x7a>
 800c944:	7bfb      	ldrb	r3, [r7, #15]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10d      	bne.n	800c966 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fd80 	bl	800d450 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c950:	e009      	b.n	800c966 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c952:	6839      	ldr	r1, [r7, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fccd 	bl	800d2f4 <USBD_CtlError>
          break;
 800c95a:	e004      	b.n	800c966 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fcc8 	bl	800d2f4 <USBD_CtlError>
          break;
 800c964:	e000      	b.n	800c968 <USBD_StdItfReq+0x7c>
          break;
 800c966:	bf00      	nop
      }
      break;
 800c968:	e004      	b.n	800c974 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fcc1 	bl	800d2f4 <USBD_CtlError>
      break;
 800c972:	bf00      	nop
  }

  return ret;
 800c974:	7bfb      	ldrb	r3, [r7, #15]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	889b      	ldrh	r3, [r3, #4]
 800c990:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c99a:	2b40      	cmp	r3, #64	; 0x40
 800c99c:	d007      	beq.n	800c9ae <USBD_StdEPReq+0x30>
 800c99e:	2b40      	cmp	r3, #64	; 0x40
 800c9a0:	f200 8145 	bhi.w	800cc2e <USBD_StdEPReq+0x2b0>
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00c      	beq.n	800c9c2 <USBD_StdEPReq+0x44>
 800c9a8:	2b20      	cmp	r3, #32
 800c9aa:	f040 8140 	bne.w	800cc2e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	4798      	blx	r3
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
      break;
 800c9c0:	e13a      	b.n	800cc38 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	785b      	ldrb	r3, [r3, #1]
 800c9c6:	2b03      	cmp	r3, #3
 800c9c8:	d007      	beq.n	800c9da <USBD_StdEPReq+0x5c>
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	f300 8129 	bgt.w	800cc22 <USBD_StdEPReq+0x2a4>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d07f      	beq.n	800cad4 <USBD_StdEPReq+0x156>
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d03c      	beq.n	800ca52 <USBD_StdEPReq+0xd4>
 800c9d8:	e123      	b.n	800cc22 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d002      	beq.n	800c9ec <USBD_StdEPReq+0x6e>
 800c9e6:	2b03      	cmp	r3, #3
 800c9e8:	d016      	beq.n	800ca18 <USBD_StdEPReq+0x9a>
 800c9ea:	e02c      	b.n	800ca46 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00d      	beq.n	800ca0e <USBD_StdEPReq+0x90>
 800c9f2:	7bbb      	ldrb	r3, [r7, #14]
 800c9f4:	2b80      	cmp	r3, #128	; 0x80
 800c9f6:	d00a      	beq.n	800ca0e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9f8:	7bbb      	ldrb	r3, [r7, #14]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 f80f 	bl	800da20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca02:	2180      	movs	r1, #128	; 0x80
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f001 f80b 	bl	800da20 <USBD_LL_StallEP>
 800ca0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca0c:	e020      	b.n	800ca50 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fc6f 	bl	800d2f4 <USBD_CtlError>
              break;
 800ca16:	e01b      	b.n	800ca50 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	885b      	ldrh	r3, [r3, #2]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10e      	bne.n	800ca3e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <USBD_StdEPReq+0xc0>
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	2b80      	cmp	r3, #128	; 0x80
 800ca2a:	d008      	beq.n	800ca3e <USBD_StdEPReq+0xc0>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	88db      	ldrh	r3, [r3, #6]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d104      	bne.n	800ca3e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca34:	7bbb      	ldrb	r3, [r7, #14]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fff1 	bl	800da20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fd06 	bl	800d450 <USBD_CtlSendStatus>

              break;
 800ca44:	e004      	b.n	800ca50 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fc53 	bl	800d2f4 <USBD_CtlError>
              break;
 800ca4e:	bf00      	nop
          }
          break;
 800ca50:	e0ec      	b.n	800cc2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	d002      	beq.n	800ca64 <USBD_StdEPReq+0xe6>
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d016      	beq.n	800ca90 <USBD_StdEPReq+0x112>
 800ca62:	e030      	b.n	800cac6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca64:	7bbb      	ldrb	r3, [r7, #14]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00d      	beq.n	800ca86 <USBD_StdEPReq+0x108>
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
 800ca6c:	2b80      	cmp	r3, #128	; 0x80
 800ca6e:	d00a      	beq.n	800ca86 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca70:	7bbb      	ldrb	r3, [r7, #14]
 800ca72:	4619      	mov	r1, r3
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 ffd3 	bl	800da20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca7a:	2180      	movs	r1, #128	; 0x80
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 ffcf 	bl	800da20 <USBD_LL_StallEP>
 800ca82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca84:	e025      	b.n	800cad2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fc33 	bl	800d2f4 <USBD_CtlError>
              break;
 800ca8e:	e020      	b.n	800cad2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	885b      	ldrh	r3, [r3, #2]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d11b      	bne.n	800cad0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca98:	7bbb      	ldrb	r3, [r7, #14]
 800ca9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d004      	beq.n	800caac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 ffd9 	bl	800da5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fccf 	bl	800d450 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	4798      	blx	r3
 800cac0:	4603      	mov	r3, r0
 800cac2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cac4:	e004      	b.n	800cad0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cac6:	6839      	ldr	r1, [r7, #0]
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fc13 	bl	800d2f4 <USBD_CtlError>
              break;
 800cace:	e000      	b.n	800cad2 <USBD_StdEPReq+0x154>
              break;
 800cad0:	bf00      	nop
          }
          break;
 800cad2:	e0ab      	b.n	800cc2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d002      	beq.n	800cae6 <USBD_StdEPReq+0x168>
 800cae0:	2b03      	cmp	r3, #3
 800cae2:	d032      	beq.n	800cb4a <USBD_StdEPReq+0x1cc>
 800cae4:	e097      	b.n	800cc16 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cae6:	7bbb      	ldrb	r3, [r7, #14]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d007      	beq.n	800cafc <USBD_StdEPReq+0x17e>
 800caec:	7bbb      	ldrb	r3, [r7, #14]
 800caee:	2b80      	cmp	r3, #128	; 0x80
 800caf0:	d004      	beq.n	800cafc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fbfd 	bl	800d2f4 <USBD_CtlError>
                break;
 800cafa:	e091      	b.n	800cc20 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cafc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	da0b      	bge.n	800cb1c <USBD_StdEPReq+0x19e>
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	3310      	adds	r3, #16
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	4413      	add	r3, r2
 800cb18:	3304      	adds	r3, #4
 800cb1a:	e00b      	b.n	800cb34 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
 800cb1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb22:	4613      	mov	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	4413      	add	r3, r2
 800cb32:	3304      	adds	r3, #4
 800cb34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2202      	movs	r2, #2
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fc47 	bl	800d3d6 <USBD_CtlSendData>
              break;
 800cb48:	e06a      	b.n	800cc20 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	da11      	bge.n	800cb76 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb52:	7bbb      	ldrb	r3, [r7, #14]
 800cb54:	f003 020f 	and.w	r2, r3, #15
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	440b      	add	r3, r1
 800cb64:	3324      	adds	r3, #36	; 0x24
 800cb66:	881b      	ldrh	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d117      	bne.n	800cb9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fbc0 	bl	800d2f4 <USBD_CtlError>
                  break;
 800cb74:	e054      	b.n	800cc20 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cb76:	7bbb      	ldrb	r3, [r7, #14]
 800cb78:	f003 020f 	and.w	r2, r3, #15
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	440b      	add	r3, r1
 800cb88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb8c:	881b      	ldrh	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d104      	bne.n	800cb9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fbad 	bl	800d2f4 <USBD_CtlError>
                  break;
 800cb9a:	e041      	b.n	800cc20 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	da0b      	bge.n	800cbbc <USBD_StdEPReq+0x23e>
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
 800cba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbaa:	4613      	mov	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	4413      	add	r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	3310      	adds	r3, #16
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	3304      	adds	r3, #4
 800cbba:	e00b      	b.n	800cbd4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
 800cbbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4413      	add	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cbd6:	7bbb      	ldrb	r3, [r7, #14]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <USBD_StdEPReq+0x264>
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	2b80      	cmp	r3, #128	; 0x80
 800cbe0:	d103      	bne.n	800cbea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	601a      	str	r2, [r3, #0]
 800cbe8:	e00e      	b.n	800cc08 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cbea:	7bbb      	ldrb	r3, [r7, #14]
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 ff54 	bl	800da9c <USBD_LL_IsStallEP>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	e002      	b.n	800cc08 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2200      	movs	r2, #0
 800cc06:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fbe1 	bl	800d3d6 <USBD_CtlSendData>
              break;
 800cc14:	e004      	b.n	800cc20 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fb6b 	bl	800d2f4 <USBD_CtlError>
              break;
 800cc1e:	bf00      	nop
          }
          break;
 800cc20:	e004      	b.n	800cc2c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fb65 	bl	800d2f4 <USBD_CtlError>
          break;
 800cc2a:	bf00      	nop
      }
      break;
 800cc2c:	e004      	b.n	800cc38 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fb5f 	bl	800d2f4 <USBD_CtlError>
      break;
 800cc36:	bf00      	nop
  }

  return ret;
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
	...

0800cc44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc56:	2300      	movs	r3, #0
 800cc58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	885b      	ldrh	r3, [r3, #2]
 800cc5e:	0a1b      	lsrs	r3, r3, #8
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	3b01      	subs	r3, #1
 800cc64:	2b0e      	cmp	r3, #14
 800cc66:	f200 8152 	bhi.w	800cf0e <USBD_GetDescriptor+0x2ca>
 800cc6a:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <USBD_GetDescriptor+0x2c>)
 800cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc70:	0800cce1 	.word	0x0800cce1
 800cc74:	0800ccf9 	.word	0x0800ccf9
 800cc78:	0800cd39 	.word	0x0800cd39
 800cc7c:	0800cf0f 	.word	0x0800cf0f
 800cc80:	0800cf0f 	.word	0x0800cf0f
 800cc84:	0800ceaf 	.word	0x0800ceaf
 800cc88:	0800cedb 	.word	0x0800cedb
 800cc8c:	0800cf0f 	.word	0x0800cf0f
 800cc90:	0800cf0f 	.word	0x0800cf0f
 800cc94:	0800cf0f 	.word	0x0800cf0f
 800cc98:	0800cf0f 	.word	0x0800cf0f
 800cc9c:	0800cf0f 	.word	0x0800cf0f
 800cca0:	0800cf0f 	.word	0x0800cf0f
 800cca4:	0800cf0f 	.word	0x0800cf0f
 800cca8:	0800ccad 	.word	0x0800ccad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb2:	69db      	ldr	r3, [r3, #28]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00b      	beq.n	800ccd0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccbe:	69db      	ldr	r3, [r3, #28]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	7c12      	ldrb	r2, [r2, #16]
 800ccc4:	f107 0108 	add.w	r1, r7, #8
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4798      	blx	r3
 800cccc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccce:	e126      	b.n	800cf1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fb0e 	bl	800d2f4 <USBD_CtlError>
        err++;
 800ccd8:	7afb      	ldrb	r3, [r7, #11]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	72fb      	strb	r3, [r7, #11]
      break;
 800ccde:	e11e      	b.n	800cf1e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	7c12      	ldrb	r2, [r2, #16]
 800ccec:	f107 0108 	add.w	r1, r7, #8
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	4798      	blx	r3
 800ccf4:	60f8      	str	r0, [r7, #12]
      break;
 800ccf6:	e112      	b.n	800cf1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	7c1b      	ldrb	r3, [r3, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10d      	bne.n	800cd1c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd08:	f107 0208 	add.w	r2, r7, #8
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4798      	blx	r3
 800cd10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3301      	adds	r3, #1
 800cd16:	2202      	movs	r2, #2
 800cd18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd1a:	e100      	b.n	800cf1e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd24:	f107 0208 	add.w	r2, r7, #8
 800cd28:	4610      	mov	r0, r2
 800cd2a:	4798      	blx	r3
 800cd2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3301      	adds	r3, #1
 800cd32:	2202      	movs	r2, #2
 800cd34:	701a      	strb	r2, [r3, #0]
      break;
 800cd36:	e0f2      	b.n	800cf1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	885b      	ldrh	r3, [r3, #2]
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b05      	cmp	r3, #5
 800cd40:	f200 80ac 	bhi.w	800ce9c <USBD_GetDescriptor+0x258>
 800cd44:	a201      	add	r2, pc, #4	; (adr r2, 800cd4c <USBD_GetDescriptor+0x108>)
 800cd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4a:	bf00      	nop
 800cd4c:	0800cd65 	.word	0x0800cd65
 800cd50:	0800cd99 	.word	0x0800cd99
 800cd54:	0800cdcd 	.word	0x0800cdcd
 800cd58:	0800ce01 	.word	0x0800ce01
 800cd5c:	0800ce35 	.word	0x0800ce35
 800cd60:	0800ce69 	.word	0x0800ce69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	7c12      	ldrb	r2, [r2, #16]
 800cd7c:	f107 0108 	add.w	r1, r7, #8
 800cd80:	4610      	mov	r0, r2
 800cd82:	4798      	blx	r3
 800cd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd86:	e091      	b.n	800ceac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd88:	6839      	ldr	r1, [r7, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fab2 	bl	800d2f4 <USBD_CtlError>
            err++;
 800cd90:	7afb      	ldrb	r3, [r7, #11]
 800cd92:	3301      	adds	r3, #1
 800cd94:	72fb      	strb	r3, [r7, #11]
          break;
 800cd96:	e089      	b.n	800ceac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	7c12      	ldrb	r2, [r2, #16]
 800cdb0:	f107 0108 	add.w	r1, r7, #8
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4798      	blx	r3
 800cdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdba:	e077      	b.n	800ceac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fa98 	bl	800d2f4 <USBD_CtlError>
            err++;
 800cdc4:	7afb      	ldrb	r3, [r7, #11]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdca:	e06f      	b.n	800ceac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00b      	beq.n	800cdf0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	7c12      	ldrb	r2, [r2, #16]
 800cde4:	f107 0108 	add.w	r1, r7, #8
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdee:	e05d      	b.n	800ceac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fa7e 	bl	800d2f4 <USBD_CtlError>
            err++;
 800cdf8:	7afb      	ldrb	r3, [r7, #11]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800cdfe:	e055      	b.n	800ceac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce12:	691b      	ldr	r3, [r3, #16]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	7c12      	ldrb	r2, [r2, #16]
 800ce18:	f107 0108 	add.w	r1, r7, #8
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	4798      	blx	r3
 800ce20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce22:	e043      	b.n	800ceac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fa64 	bl	800d2f4 <USBD_CtlError>
            err++;
 800ce2c:	7afb      	ldrb	r3, [r7, #11]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	72fb      	strb	r3, [r7, #11]
          break;
 800ce32:	e03b      	b.n	800ceac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00b      	beq.n	800ce58 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	7c12      	ldrb	r2, [r2, #16]
 800ce4c:	f107 0108 	add.w	r1, r7, #8
 800ce50:	4610      	mov	r0, r2
 800ce52:	4798      	blx	r3
 800ce54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce56:	e029      	b.n	800ceac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fa4a 	bl	800d2f4 <USBD_CtlError>
            err++;
 800ce60:	7afb      	ldrb	r3, [r7, #11]
 800ce62:	3301      	adds	r3, #1
 800ce64:	72fb      	strb	r3, [r7, #11]
          break;
 800ce66:	e021      	b.n	800ceac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce6e:	699b      	ldr	r3, [r3, #24]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00b      	beq.n	800ce8c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	7c12      	ldrb	r2, [r2, #16]
 800ce80:	f107 0108 	add.w	r1, r7, #8
 800ce84:	4610      	mov	r0, r2
 800ce86:	4798      	blx	r3
 800ce88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce8a:	e00f      	b.n	800ceac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fa30 	bl	800d2f4 <USBD_CtlError>
            err++;
 800ce94:	7afb      	ldrb	r3, [r7, #11]
 800ce96:	3301      	adds	r3, #1
 800ce98:	72fb      	strb	r3, [r7, #11]
          break;
 800ce9a:	e007      	b.n	800ceac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fa28 	bl	800d2f4 <USBD_CtlError>
          err++;
 800cea4:	7afb      	ldrb	r3, [r7, #11]
 800cea6:	3301      	adds	r3, #1
 800cea8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ceaa:	bf00      	nop
      }
      break;
 800ceac:	e037      	b.n	800cf1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	7c1b      	ldrb	r3, [r3, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d109      	bne.n	800ceca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cebe:	f107 0208 	add.w	r2, r7, #8
 800cec2:	4610      	mov	r0, r2
 800cec4:	4798      	blx	r3
 800cec6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cec8:	e029      	b.n	800cf1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ceca:	6839      	ldr	r1, [r7, #0]
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fa11 	bl	800d2f4 <USBD_CtlError>
        err++;
 800ced2:	7afb      	ldrb	r3, [r7, #11]
 800ced4:	3301      	adds	r3, #1
 800ced6:	72fb      	strb	r3, [r7, #11]
      break;
 800ced8:	e021      	b.n	800cf1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	7c1b      	ldrb	r3, [r3, #16]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10d      	bne.n	800cefe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceea:	f107 0208 	add.w	r2, r7, #8
 800ceee:	4610      	mov	r0, r2
 800cef0:	4798      	blx	r3
 800cef2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	3301      	adds	r3, #1
 800cef8:	2207      	movs	r2, #7
 800cefa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cefc:	e00f      	b.n	800cf1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f9f7 	bl	800d2f4 <USBD_CtlError>
        err++;
 800cf06:	7afb      	ldrb	r3, [r7, #11]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf0c:	e007      	b.n	800cf1e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cf0e:	6839      	ldr	r1, [r7, #0]
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f9ef 	bl	800d2f4 <USBD_CtlError>
      err++;
 800cf16:	7afb      	ldrb	r3, [r7, #11]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf1c:	bf00      	nop
  }

  if (err != 0U)
 800cf1e:	7afb      	ldrb	r3, [r7, #11]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d11e      	bne.n	800cf62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	88db      	ldrh	r3, [r3, #6]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d016      	beq.n	800cf5a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cf2c:	893b      	ldrh	r3, [r7, #8]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00e      	beq.n	800cf50 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	88da      	ldrh	r2, [r3, #6]
 800cf36:	893b      	ldrh	r3, [r7, #8]
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	bf28      	it	cs
 800cf3c:	4613      	movcs	r3, r2
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf42:	893b      	ldrh	r3, [r7, #8]
 800cf44:	461a      	mov	r2, r3
 800cf46:	68f9      	ldr	r1, [r7, #12]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fa44 	bl	800d3d6 <USBD_CtlSendData>
 800cf4e:	e009      	b.n	800cf64 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f9ce 	bl	800d2f4 <USBD_CtlError>
 800cf58:	e004      	b.n	800cf64 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fa78 	bl	800d450 <USBD_CtlSendStatus>
 800cf60:	e000      	b.n	800cf64 <USBD_GetDescriptor+0x320>
    return;
 800cf62:	bf00      	nop
  }
}
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop

0800cf6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	889b      	ldrh	r3, [r3, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d131      	bne.n	800cfe2 <USBD_SetAddress+0x76>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	88db      	ldrh	r3, [r3, #6]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d12d      	bne.n	800cfe2 <USBD_SetAddress+0x76>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	885b      	ldrh	r3, [r3, #2]
 800cf8a:	2b7f      	cmp	r3, #127	; 0x7f
 800cf8c:	d829      	bhi.n	800cfe2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	885b      	ldrh	r3, [r3, #2]
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b03      	cmp	r3, #3
 800cfa4:	d104      	bne.n	800cfb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cfa6:	6839      	ldr	r1, [r7, #0]
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 f9a3 	bl	800d2f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfae:	e01d      	b.n	800cfec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7bfa      	ldrb	r2, [r7, #15]
 800cfb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fd9a 	bl	800daf6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fa44 	bl	800d450 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d004      	beq.n	800cfd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfd6:	e009      	b.n	800cfec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe0:	e004      	b.n	800cfec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 f985 	bl	800d2f4 <USBD_CtlError>
  }
}
 800cfea:	bf00      	nop
 800cfec:	bf00      	nop
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	885b      	ldrh	r3, [r3, #2]
 800d006:	b2da      	uxtb	r2, r3
 800d008:	4b4c      	ldr	r3, [pc, #304]	; (800d13c <USBD_SetConfig+0x148>)
 800d00a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d00c:	4b4b      	ldr	r3, [pc, #300]	; (800d13c <USBD_SetConfig+0x148>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d905      	bls.n	800d020 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 f96c 	bl	800d2f4 <USBD_CtlError>
    return USBD_FAIL;
 800d01c:	2303      	movs	r3, #3
 800d01e:	e088      	b.n	800d132 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d002      	beq.n	800d032 <USBD_SetConfig+0x3e>
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	d025      	beq.n	800d07c <USBD_SetConfig+0x88>
 800d030:	e071      	b.n	800d116 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d032:	4b42      	ldr	r3, [pc, #264]	; (800d13c <USBD_SetConfig+0x148>)
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d01c      	beq.n	800d074 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d03a:	4b40      	ldr	r3, [pc, #256]	; (800d13c <USBD_SetConfig+0x148>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d044:	4b3d      	ldr	r3, [pc, #244]	; (800d13c <USBD_SetConfig+0x148>)
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff f992 	bl	800c374 <USBD_SetClassConfig>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d054:	7bfb      	ldrb	r3, [r7, #15]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d004      	beq.n	800d064 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d05a:	6839      	ldr	r1, [r7, #0]
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f949 	bl	800d2f4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d062:	e065      	b.n	800d130 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f9f3 	bl	800d450 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2203      	movs	r2, #3
 800d06e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d072:	e05d      	b.n	800d130 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f9eb 	bl	800d450 <USBD_CtlSendStatus>
      break;
 800d07a:	e059      	b.n	800d130 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d07c:	4b2f      	ldr	r3, [pc, #188]	; (800d13c <USBD_SetConfig+0x148>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d112      	bne.n	800d0aa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2202      	movs	r2, #2
 800d088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d08c:	4b2b      	ldr	r3, [pc, #172]	; (800d13c <USBD_SetConfig+0x148>)
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	461a      	mov	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d096:	4b29      	ldr	r3, [pc, #164]	; (800d13c <USBD_SetConfig+0x148>)
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7ff f985 	bl	800c3ac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 f9d4 	bl	800d450 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0a8:	e042      	b.n	800d130 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d0aa:	4b24      	ldr	r3, [pc, #144]	; (800d13c <USBD_SetConfig+0x148>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d02a      	beq.n	800d10e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	4619      	mov	r1, r3
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7ff f973 	bl	800c3ac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d0c6:	4b1d      	ldr	r3, [pc, #116]	; (800d13c <USBD_SetConfig+0x148>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0d0:	4b1a      	ldr	r3, [pc, #104]	; (800d13c <USBD_SetConfig+0x148>)
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7ff f94c 	bl	800c374 <USBD_SetClassConfig>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00f      	beq.n	800d106 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 f903 	bl	800d2f4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff f958 	bl	800c3ac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2202      	movs	r2, #2
 800d100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d104:	e014      	b.n	800d130 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f9a2 	bl	800d450 <USBD_CtlSendStatus>
      break;
 800d10c:	e010      	b.n	800d130 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f99e 	bl	800d450 <USBD_CtlSendStatus>
      break;
 800d114:	e00c      	b.n	800d130 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f8eb 	bl	800d2f4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d11e:	4b07      	ldr	r3, [pc, #28]	; (800d13c <USBD_SetConfig+0x148>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff f941 	bl	800c3ac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d12a:	2303      	movs	r3, #3
 800d12c:	73fb      	strb	r3, [r7, #15]
      break;
 800d12e:	bf00      	nop
  }

  return ret;
 800d130:	7bfb      	ldrb	r3, [r7, #15]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	200047e8 	.word	0x200047e8

0800d140 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	88db      	ldrh	r3, [r3, #6]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d004      	beq.n	800d15c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f8cd 	bl	800d2f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d15a:	e023      	b.n	800d1a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b02      	cmp	r3, #2
 800d166:	dc02      	bgt.n	800d16e <USBD_GetConfig+0x2e>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	dc03      	bgt.n	800d174 <USBD_GetConfig+0x34>
 800d16c:	e015      	b.n	800d19a <USBD_GetConfig+0x5a>
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d00b      	beq.n	800d18a <USBD_GetConfig+0x4a>
 800d172:	e012      	b.n	800d19a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	3308      	adds	r3, #8
 800d17e:	2201      	movs	r2, #1
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f927 	bl	800d3d6 <USBD_CtlSendData>
        break;
 800d188:	e00c      	b.n	800d1a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	3304      	adds	r3, #4
 800d18e:	2201      	movs	r2, #1
 800d190:	4619      	mov	r1, r3
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f91f 	bl	800d3d6 <USBD_CtlSendData>
        break;
 800d198:	e004      	b.n	800d1a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f8a9 	bl	800d2f4 <USBD_CtlError>
        break;
 800d1a2:	bf00      	nop
}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d81e      	bhi.n	800d202 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	88db      	ldrh	r3, [r3, #6]
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d004      	beq.n	800d1d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f890 	bl	800d2f4 <USBD_CtlError>
        break;
 800d1d4:	e01a      	b.n	800d20c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d005      	beq.n	800d1f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	f043 0202 	orr.w	r2, r3, #2
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	330c      	adds	r3, #12
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f8eb 	bl	800d3d6 <USBD_CtlSendData>
      break;
 800d200:	e004      	b.n	800d20c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f875 	bl	800d2f4 <USBD_CtlError>
      break;
 800d20a:	bf00      	nop
  }
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	885b      	ldrh	r3, [r3, #2]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d106      	bne.n	800d234 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f90e 	bl	800d450 <USBD_CtlSendStatus>
  }
}
 800d234:	bf00      	nop
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	2b02      	cmp	r3, #2
 800d252:	d80b      	bhi.n	800d26c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	885b      	ldrh	r3, [r3, #2]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d10c      	bne.n	800d276 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f8f3 	bl	800d450 <USBD_CtlSendStatus>
      }
      break;
 800d26a:	e004      	b.n	800d276 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f840 	bl	800d2f4 <USBD_CtlError>
      break;
 800d274:	e000      	b.n	800d278 <USBD_ClrFeature+0x3c>
      break;
 800d276:	bf00      	nop
  }
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	781a      	ldrb	r2, [r3, #0]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	3301      	adds	r3, #1
 800d29a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	781a      	ldrb	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f7ff fa92 	bl	800c7d4 <SWAPBYTE>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7ff fa85 	bl	800c7d4 <SWAPBYTE>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7ff fa78 	bl	800c7d4 <SWAPBYTE>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	80da      	strh	r2, [r3, #6]
}
 800d2ec:	bf00      	nop
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2fe:	2180      	movs	r1, #128	; 0x80
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 fb8d 	bl	800da20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d306:	2100      	movs	r1, #0
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fb89 	bl	800da20 <USBD_LL_StallEP>
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b086      	sub	sp, #24
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d322:	2300      	movs	r3, #0
 800d324:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d036      	beq.n	800d39a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d330:	6938      	ldr	r0, [r7, #16]
 800d332:	f000 f836 	bl	800d3a2 <USBD_GetLen>
 800d336:	4603      	mov	r3, r0
 800d338:	3301      	adds	r3, #1
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	b29a      	uxth	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d344:	7dfb      	ldrb	r3, [r7, #23]
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	4413      	add	r3, r2
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	7812      	ldrb	r2, [r2, #0]
 800d34e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d350:	7dfb      	ldrb	r3, [r7, #23]
 800d352:	3301      	adds	r3, #1
 800d354:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d356:	7dfb      	ldrb	r3, [r7, #23]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	4413      	add	r3, r2
 800d35c:	2203      	movs	r2, #3
 800d35e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
 800d362:	3301      	adds	r3, #1
 800d364:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d366:	e013      	b.n	800d390 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d368:	7dfb      	ldrb	r3, [r7, #23]
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	4413      	add	r3, r2
 800d36e:	693a      	ldr	r2, [r7, #16]
 800d370:	7812      	ldrb	r2, [r2, #0]
 800d372:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	3301      	adds	r3, #1
 800d378:	613b      	str	r3, [r7, #16]
    idx++;
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	3301      	adds	r3, #1
 800d37e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	4413      	add	r3, r2
 800d386:	2200      	movs	r2, #0
 800d388:	701a      	strb	r2, [r3, #0]
    idx++;
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	3301      	adds	r3, #1
 800d38e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e7      	bne.n	800d368 <USBD_GetString+0x52>
 800d398:	e000      	b.n	800d39c <USBD_GetString+0x86>
    return;
 800d39a:	bf00      	nop
  }
}
 800d39c:	3718      	adds	r7, #24
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b085      	sub	sp, #20
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d3b2:	e005      	b.n	800d3c0 <USBD_GetLen+0x1e>
  {
    len++;
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1f5      	bne.n	800d3b4 <USBD_GetLen+0x12>
  }

  return len;
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b084      	sub	sp, #16
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	60f8      	str	r0, [r7, #12]
 800d3de:	60b9      	str	r1, [r7, #8]
 800d3e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2202      	movs	r2, #2
 800d3e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f000 fb99 	bl	800db34 <USBD_LL_Transmit>

  return USBD_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	68ba      	ldr	r2, [r7, #8]
 800d41c:	2100      	movs	r1, #0
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 fb88 	bl	800db34 <USBD_LL_Transmit>

  return USBD_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b084      	sub	sp, #16
 800d432:	af00      	add	r7, sp, #0
 800d434:	60f8      	str	r0, [r7, #12]
 800d436:	60b9      	str	r1, [r7, #8]
 800d438:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	2100      	movs	r1, #0
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f000 fb98 	bl	800db76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2204      	movs	r2, #4
 800d45c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d460:	2300      	movs	r3, #0
 800d462:	2200      	movs	r2, #0
 800d464:	2100      	movs	r1, #0
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fb64 	bl	800db34 <USBD_LL_Transmit>

  return USBD_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b082      	sub	sp, #8
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2205      	movs	r2, #5
 800d482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d486:	2300      	movs	r3, #0
 800d488:	2200      	movs	r2, #0
 800d48a:	2100      	movs	r1, #0
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fb72 	bl	800db76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	490e      	ldr	r1, [pc, #56]	; (800d4dc <MX_USB_Device_Init+0x40>)
 800d4a4:	480e      	ldr	r0, [pc, #56]	; (800d4e0 <MX_USB_Device_Init+0x44>)
 800d4a6:	f7fe fef7 	bl	800c298 <USBD_Init>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d4b0:	f7f5 fd06 	bl	8002ec0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800d4b4:	490b      	ldr	r1, [pc, #44]	; (800d4e4 <MX_USB_Device_Init+0x48>)
 800d4b6:	480a      	ldr	r0, [pc, #40]	; (800d4e0 <MX_USB_Device_Init+0x44>)
 800d4b8:	f7fe ff1e 	bl	800c2f8 <USBD_RegisterClass>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d4c2:	f7f5 fcfd 	bl	8002ec0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d4c6:	4806      	ldr	r0, [pc, #24]	; (800d4e0 <MX_USB_Device_Init+0x44>)
 800d4c8:	f7fe ff3d 	bl	800c346 <USBD_Start>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800d4d2:	f7f5 fcf5 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d4d6:	bf00      	nop
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	20000148 	.word	0x20000148
 800d4e0:	200047ec 	.word	0x200047ec
 800d4e4:	20000040 	.word	0x20000040

0800d4e8 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	6039      	str	r1, [r7, #0]
 800d4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2212      	movs	r2, #18
 800d4f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800d4fa:	4b03      	ldr	r3, [pc, #12]	; (800d508 <USBD_HID_DeviceDescriptor+0x20>)
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	20000168 	.word	0x20000168

0800d50c <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	4603      	mov	r3, r0
 800d514:	6039      	str	r1, [r7, #0]
 800d516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	2204      	movs	r2, #4
 800d51c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d51e:	4b03      	ldr	r3, [pc, #12]	; (800d52c <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800d520:	4618      	mov	r0, r3
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	2000017c 	.word	0x2000017c

0800d530 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	6039      	str	r1, [r7, #0]
 800d53a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d105      	bne.n	800d54e <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	4907      	ldr	r1, [pc, #28]	; (800d564 <USBD_HID_ProductStrDescriptor+0x34>)
 800d546:	4808      	ldr	r0, [pc, #32]	; (800d568 <USBD_HID_ProductStrDescriptor+0x38>)
 800d548:	f7ff fee5 	bl	800d316 <USBD_GetString>
 800d54c:	e004      	b.n	800d558 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	4904      	ldr	r1, [pc, #16]	; (800d564 <USBD_HID_ProductStrDescriptor+0x34>)
 800d552:	4805      	ldr	r0, [pc, #20]	; (800d568 <USBD_HID_ProductStrDescriptor+0x38>)
 800d554:	f7ff fedf 	bl	800d316 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d558:	4b02      	ldr	r3, [pc, #8]	; (800d564 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	20004abc 	.word	0x20004abc
 800d568:	0800e644 	.word	0x0800e644

0800d56c <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	6039      	str	r1, [r7, #0]
 800d576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	4904      	ldr	r1, [pc, #16]	; (800d58c <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800d57c:	4804      	ldr	r0, [pc, #16]	; (800d590 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800d57e:	f7ff feca 	bl	800d316 <USBD_GetString>
  return USBD_StrDesc;
 800d582:	4b02      	ldr	r3, [pc, #8]	; (800d58c <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20004abc 	.word	0x20004abc
 800d590:	0800e644 	.word	0x0800e644

0800d594 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	6039      	str	r1, [r7, #0]
 800d59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	221a      	movs	r2, #26
 800d5a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5a6:	f000 f843 	bl	800d630 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d5aa:	4b02      	ldr	r3, [pc, #8]	; (800d5b4 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	20000180 	.word	0x20000180

0800d5b8 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	4603      	mov	r3, r0
 800d5c0:	6039      	str	r1, [r7, #0]
 800d5c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d105      	bne.n	800d5d6 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	4907      	ldr	r1, [pc, #28]	; (800d5ec <USBD_HID_ConfigStrDescriptor+0x34>)
 800d5ce:	4808      	ldr	r0, [pc, #32]	; (800d5f0 <USBD_HID_ConfigStrDescriptor+0x38>)
 800d5d0:	f7ff fea1 	bl	800d316 <USBD_GetString>
 800d5d4:	e004      	b.n	800d5e0 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	4904      	ldr	r1, [pc, #16]	; (800d5ec <USBD_HID_ConfigStrDescriptor+0x34>)
 800d5da:	4805      	ldr	r0, [pc, #20]	; (800d5f0 <USBD_HID_ConfigStrDescriptor+0x38>)
 800d5dc:	f7ff fe9b 	bl	800d316 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5e0:	4b02      	ldr	r3, [pc, #8]	; (800d5ec <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	20004abc 	.word	0x20004abc
 800d5f0:	0800e654 	.word	0x0800e654

0800d5f4 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	6039      	str	r1, [r7, #0]
 800d5fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d105      	bne.n	800d612 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	4907      	ldr	r1, [pc, #28]	; (800d628 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800d60a:	4808      	ldr	r0, [pc, #32]	; (800d62c <USBD_HID_InterfaceStrDescriptor+0x38>)
 800d60c:	f7ff fe83 	bl	800d316 <USBD_GetString>
 800d610:	e004      	b.n	800d61c <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d612:	683a      	ldr	r2, [r7, #0]
 800d614:	4904      	ldr	r1, [pc, #16]	; (800d628 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800d616:	4805      	ldr	r0, [pc, #20]	; (800d62c <USBD_HID_InterfaceStrDescriptor+0x38>)
 800d618:	f7ff fe7d 	bl	800d316 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d61c:	4b02      	ldr	r3, [pc, #8]	; (800d628 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	20004abc 	.word	0x20004abc
 800d62c:	0800e660 	.word	0x0800e660

0800d630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <Get_SerialNum+0x44>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d63c:	4b0e      	ldr	r3, [pc, #56]	; (800d678 <Get_SerialNum+0x48>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d642:	4b0e      	ldr	r3, [pc, #56]	; (800d67c <Get_SerialNum+0x4c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4413      	add	r3, r2
 800d64e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d009      	beq.n	800d66a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d656:	2208      	movs	r2, #8
 800d658:	4909      	ldr	r1, [pc, #36]	; (800d680 <Get_SerialNum+0x50>)
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f000 f814 	bl	800d688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d660:	2204      	movs	r2, #4
 800d662:	4908      	ldr	r1, [pc, #32]	; (800d684 <Get_SerialNum+0x54>)
 800d664:	68b8      	ldr	r0, [r7, #8]
 800d666:	f000 f80f 	bl	800d688 <IntToUnicode>
  }
}
 800d66a:	bf00      	nop
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	1fff7590 	.word	0x1fff7590
 800d678:	1fff7594 	.word	0x1fff7594
 800d67c:	1fff7598 	.word	0x1fff7598
 800d680:	20000182 	.word	0x20000182
 800d684:	20000192 	.word	0x20000192

0800d688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d688:	b480      	push	{r7}
 800d68a:	b087      	sub	sp, #28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	4613      	mov	r3, r2
 800d694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d69a:	2300      	movs	r3, #0
 800d69c:	75fb      	strb	r3, [r7, #23]
 800d69e:	e027      	b.n	800d6f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	0f1b      	lsrs	r3, r3, #28
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d80b      	bhi.n	800d6c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	0f1b      	lsrs	r3, r3, #28
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	440b      	add	r3, r1
 800d6b8:	3230      	adds	r2, #48	; 0x30
 800d6ba:	b2d2      	uxtb	r2, r2
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	e00a      	b.n	800d6d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	0f1b      	lsrs	r3, r3, #28
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3237      	adds	r2, #55	; 0x37
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	011b      	lsls	r3, r3, #4
 800d6da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6dc:	7dfb      	ldrb	r3, [r7, #23]
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	75fb      	strb	r3, [r7, #23]
 800d6f0:	7dfa      	ldrb	r2, [r7, #23]
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d3d3      	bcc.n	800d6a0 <IntToUnicode+0x18>
  }
}
 800d6f8:	bf00      	nop
 800d6fa:	bf00      	nop
 800d6fc:	371c      	adds	r7, #28
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
	...

0800d708 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b098      	sub	sp, #96	; 0x60
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d710:	f107 0310 	add.w	r3, r7, #16
 800d714:	2250      	movs	r2, #80	; 0x50
 800d716:	2100      	movs	r1, #0
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 faf7 	bl	800dd0c <memset>
  if(pcdHandle->Instance==USB)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a11      	ldr	r2, [pc, #68]	; (800d768 <HAL_PCD_MspInit+0x60>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d11a      	bne.n	800d75e <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d72c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d72e:	2300      	movs	r3, #0
 800d730:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d732:	f107 0310 	add.w	r3, r7, #16
 800d736:	4618      	mov	r0, r3
 800d738:	f7f9 f8b4 	bl	80068a4 <HAL_RCCEx_PeriphCLKConfig>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d742:	f7f5 fbbd 	bl	8002ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d746:	4b09      	ldr	r3, [pc, #36]	; (800d76c <HAL_PCD_MspInit+0x64>)
 800d748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d74a:	4a08      	ldr	r2, [pc, #32]	; (800d76c <HAL_PCD_MspInit+0x64>)
 800d74c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d750:	6593      	str	r3, [r2, #88]	; 0x58
 800d752:	4b06      	ldr	r3, [pc, #24]	; (800d76c <HAL_PCD_MspInit+0x64>)
 800d754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d75e:	bf00      	nop
 800d760:	3760      	adds	r7, #96	; 0x60
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	40005c00 	.word	0x40005c00
 800d76c:	40021000 	.word	0x40021000

0800d770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d784:	4619      	mov	r1, r3
 800d786:	4610      	mov	r0, r2
 800d788:	f7fe fe28 	bl	800c3dc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d7a6:	78fa      	ldrb	r2, [r7, #3]
 800d7a8:	6879      	ldr	r1, [r7, #4]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	440b      	add	r3, r1
 800d7b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	78fb      	ldrb	r3, [r7, #3]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f7fe fe62 	bl	800c486 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d7c2:	bf00      	nop
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d7dc:	78fa      	ldrb	r2, [r7, #3]
 800d7de:	6879      	ldr	r1, [r7, #4]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	440b      	add	r3, r1
 800d7ea:	333c      	adds	r3, #60	; 0x3c
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	78fb      	ldrb	r3, [r7, #3]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	f7fe feab 	bl	800c54c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d7f6:	bf00      	nop
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b082      	sub	sp, #8
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7fe ffbf 	bl	800c790 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d812:	bf00      	nop
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d822:	2301      	movs	r3, #1
 800d824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d001      	beq.n	800d832 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d82e:	f7f5 fb47 	bl	8002ec0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d838:	7bfa      	ldrb	r2, [r7, #15]
 800d83a:	4611      	mov	r1, r2
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fe ff69 	bl	800c714 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fe ff15 	bl	800c678 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d84e:	bf00      	nop
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
	...

0800d858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d866:	4618      	mov	r0, r3
 800d868:	f7fe ff64 	bl	800c734 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d005      	beq.n	800d880 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d874:	4b04      	ldr	r3, [pc, #16]	; (800d888 <HAL_PCD_SuspendCallback+0x30>)
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	4a03      	ldr	r2, [pc, #12]	; (800d888 <HAL_PCD_SuspendCallback+0x30>)
 800d87a:	f043 0306 	orr.w	r3, r3, #6
 800d87e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d880:	bf00      	nop
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	e000ed00 	.word	0xe000ed00

0800d88c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d007      	beq.n	800d8ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d89c:	4b08      	ldr	r3, [pc, #32]	; (800d8c0 <HAL_PCD_ResumeCallback+0x34>)
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	4a07      	ldr	r2, [pc, #28]	; (800d8c0 <HAL_PCD_ResumeCallback+0x34>)
 800d8a2:	f023 0306 	bic.w	r3, r3, #6
 800d8a6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d8a8:	f000 f9d4 	bl	800dc54 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fe ff54 	bl	800c760 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d8b8:	bf00      	nop
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	e000ed00 	.word	0xe000ed00

0800d8c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d8cc:	4a22      	ldr	r2, [pc, #136]	; (800d958 <USBD_LL_Init+0x94>)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a20      	ldr	r2, [pc, #128]	; (800d958 <USBD_LL_Init+0x94>)
 800d8d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d8dc:	4b1e      	ldr	r3, [pc, #120]	; (800d958 <USBD_LL_Init+0x94>)
 800d8de:	4a1f      	ldr	r2, [pc, #124]	; (800d95c <USBD_LL_Init+0x98>)
 800d8e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d8e2:	4b1d      	ldr	r3, [pc, #116]	; (800d958 <USBD_LL_Init+0x94>)
 800d8e4:	2208      	movs	r2, #8
 800d8e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d8e8:	4b1b      	ldr	r3, [pc, #108]	; (800d958 <USBD_LL_Init+0x94>)
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d8ee:	4b1a      	ldr	r3, [pc, #104]	; (800d958 <USBD_LL_Init+0x94>)
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d8f4:	4b18      	ldr	r3, [pc, #96]	; (800d958 <USBD_LL_Init+0x94>)
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d8fa:	4b17      	ldr	r3, [pc, #92]	; (800d958 <USBD_LL_Init+0x94>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d900:	4b15      	ldr	r3, [pc, #84]	; (800d958 <USBD_LL_Init+0x94>)
 800d902:	2200      	movs	r2, #0
 800d904:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d906:	4b14      	ldr	r3, [pc, #80]	; (800d958 <USBD_LL_Init+0x94>)
 800d908:	2200      	movs	r2, #0
 800d90a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d90c:	4812      	ldr	r0, [pc, #72]	; (800d958 <USBD_LL_Init+0x94>)
 800d90e:	f7f6 fd0d 	bl	800432c <HAL_PCD_Init>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d918:	f7f5 fad2 	bl	8002ec0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d922:	2318      	movs	r3, #24
 800d924:	2200      	movs	r2, #0
 800d926:	2100      	movs	r1, #0
 800d928:	f7f8 f9ae 	bl	8005c88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d932:	2358      	movs	r3, #88	; 0x58
 800d934:	2200      	movs	r2, #0
 800d936:	2180      	movs	r1, #128	; 0x80
 800d938:	f7f8 f9a6 	bl	8005c88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d942:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d946:	2200      	movs	r2, #0
 800d948:	2181      	movs	r1, #129	; 0x81
 800d94a:	f7f8 f99d 	bl	8005c88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20004cbc 	.word	0x20004cbc
 800d95c:	40005c00 	.word	0x40005c00

0800d960 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d976:	4618      	mov	r0, r3
 800d978:	f7f6 fdbd 	bl	80044f6 <HAL_PCD_Start>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	4618      	mov	r0, r3
 800d984:	f000 f96c 	bl	800dc60 <USBD_Get_USB_Status>
 800d988:	4603      	mov	r3, r0
 800d98a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b084      	sub	sp, #16
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	4608      	mov	r0, r1
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	70fb      	strb	r3, [r7, #3]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70bb      	strb	r3, [r7, #2]
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d9be:	78bb      	ldrb	r3, [r7, #2]
 800d9c0:	883a      	ldrh	r2, [r7, #0]
 800d9c2:	78f9      	ldrb	r1, [r7, #3]
 800d9c4:	f7f6 ff05 	bl	80047d2 <HAL_PCD_EP_Open>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 f946 	bl	800dc60 <USBD_Get_USB_Status>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9fc:	78fa      	ldrb	r2, [r7, #3]
 800d9fe:	4611      	mov	r1, r2
 800da00:	4618      	mov	r0, r3
 800da02:	f7f6 ff4c 	bl	800489e <HAL_PCD_EP_Close>
 800da06:	4603      	mov	r3, r0
 800da08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f000 f927 	bl	800dc60 <USBD_Get_USB_Status>
 800da12:	4603      	mov	r3, r0
 800da14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da16:	7bbb      	ldrb	r3, [r7, #14]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da30:	2300      	movs	r3, #0
 800da32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da3a:	78fa      	ldrb	r2, [r7, #3]
 800da3c:	4611      	mov	r1, r2
 800da3e:	4618      	mov	r0, r3
 800da40:	f7f6 fff5 	bl	8004a2e <HAL_PCD_EP_SetStall>
 800da44:	4603      	mov	r3, r0
 800da46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da48:	7bfb      	ldrb	r3, [r7, #15]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 f908 	bl	800dc60 <USBD_Get_USB_Status>
 800da50:	4603      	mov	r3, r0
 800da52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da54:	7bbb      	ldrb	r3, [r7, #14]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	460b      	mov	r3, r1
 800da68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da6e:	2300      	movs	r3, #0
 800da70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da78:	78fa      	ldrb	r2, [r7, #3]
 800da7a:	4611      	mov	r1, r2
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7f7 f828 	bl	8004ad2 <HAL_PCD_EP_ClrStall>
 800da82:	4603      	mov	r3, r0
 800da84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da86:	7bfb      	ldrb	r3, [r7, #15]
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 f8e9 	bl	800dc60 <USBD_Get_USB_Status>
 800da8e:	4603      	mov	r3, r0
 800da90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da92:	7bbb      	ldrb	r3, [r7, #14]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800daae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	da0c      	bge.n	800dad2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dab8:	78fb      	ldrb	r3, [r7, #3]
 800daba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	1c5a      	adds	r2, r3, #1
 800dac2:	4613      	mov	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	4413      	add	r3, r2
 800dac8:	00db      	lsls	r3, r3, #3
 800daca:	440b      	add	r3, r1
 800dacc:	3302      	adds	r3, #2
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	e00b      	b.n	800daea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dad2:	78fb      	ldrb	r3, [r7, #3]
 800dad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dad8:	68f9      	ldr	r1, [r7, #12]
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	440b      	add	r3, r1
 800dae4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dae8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800daea:	4618      	mov	r0, r3
 800daec:	3714      	adds	r7, #20
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	460b      	mov	r3, r1
 800db00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db10:	78fa      	ldrb	r2, [r7, #3]
 800db12:	4611      	mov	r1, r2
 800db14:	4618      	mov	r0, r3
 800db16:	f7f6 fe37 	bl	8004788 <HAL_PCD_SetAddress>
 800db1a:	4603      	mov	r3, r0
 800db1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	4618      	mov	r0, r3
 800db22:	f000 f89d 	bl	800dc60 <USBD_Get_USB_Status>
 800db26:	4603      	mov	r3, r0
 800db28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	607a      	str	r2, [r7, #4]
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	460b      	mov	r3, r1
 800db42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db52:	7af9      	ldrb	r1, [r7, #11]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	f7f6 ff26 	bl	80049a8 <HAL_PCD_EP_Transmit>
 800db5c:	4603      	mov	r3, r0
 800db5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db60:	7dfb      	ldrb	r3, [r7, #23]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 f87c 	bl	800dc60 <USBD_Get_USB_Status>
 800db68:	4603      	mov	r3, r0
 800db6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
 800db82:	460b      	mov	r3, r1
 800db84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db94:	7af9      	ldrb	r1, [r7, #11]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	f7f6 fec8 	bl	800492e <HAL_PCD_EP_Receive>
 800db9e:	4603      	mov	r3, r0
 800dba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 f85b 	bl	800dc60 <USBD_Get_USB_Status>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbae:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dbc4:	78fb      	ldrb	r3, [r7, #3]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <HAL_PCDEx_LPM_Callback+0x18>
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d013      	beq.n	800dbf6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dbce:	e023      	b.n	800dc18 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	699b      	ldr	r3, [r3, #24]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d007      	beq.n	800dbe8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dbd8:	f000 f83c 	bl	800dc54 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbdc:	4b10      	ldr	r3, [pc, #64]	; (800dc20 <HAL_PCDEx_LPM_Callback+0x68>)
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	4a0f      	ldr	r2, [pc, #60]	; (800dc20 <HAL_PCDEx_LPM_Callback+0x68>)
 800dbe2:	f023 0306 	bic.w	r3, r3, #6
 800dbe6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fdb6 	bl	800c760 <USBD_LL_Resume>
    break;
 800dbf4:	e010      	b.n	800dc18 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fe fd99 	bl	800c734 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	699b      	ldr	r3, [r3, #24]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d005      	beq.n	800dc16 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc0a:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <HAL_PCDEx_LPM_Callback+0x68>)
 800dc0c:	691b      	ldr	r3, [r3, #16]
 800dc0e:	4a04      	ldr	r2, [pc, #16]	; (800dc20 <HAL_PCDEx_LPM_Callback+0x68>)
 800dc10:	f043 0306 	orr.w	r3, r3, #6
 800dc14:	6113      	str	r3, [r2, #16]
    break;
 800dc16:	bf00      	nop
}
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	e000ed00 	.word	0xe000ed00

0800dc24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc2c:	4b03      	ldr	r3, [pc, #12]	; (800dc3c <USBD_static_malloc+0x18>)
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	20004fb0 	.word	0x20004fb0

0800dc40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]

}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dc58:	f7f5 f89b 	bl	8002d92 <SystemClock_Config>
}
 800dc5c:	bf00      	nop
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	4603      	mov	r3, r0
 800dc68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d817      	bhi.n	800dca4 <USBD_Get_USB_Status+0x44>
 800dc74:	a201      	add	r2, pc, #4	; (adr r2, 800dc7c <USBD_Get_USB_Status+0x1c>)
 800dc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7a:	bf00      	nop
 800dc7c:	0800dc8d 	.word	0x0800dc8d
 800dc80:	0800dc93 	.word	0x0800dc93
 800dc84:	0800dc99 	.word	0x0800dc99
 800dc88:	0800dc9f 	.word	0x0800dc9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc90:	e00b      	b.n	800dcaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc92:	2303      	movs	r3, #3
 800dc94:	73fb      	strb	r3, [r7, #15]
    break;
 800dc96:	e008      	b.n	800dcaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc9c:	e005      	b.n	800dcaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	73fb      	strb	r3, [r7, #15]
    break;
 800dca2:	e002      	b.n	800dcaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dca4:	2303      	movs	r3, #3
 800dca6:	73fb      	strb	r3, [r7, #15]
    break;
 800dca8:	bf00      	nop
  }
  return usb_status;
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <__errno>:
 800dcb8:	4b01      	ldr	r3, [pc, #4]	; (800dcc0 <__errno+0x8>)
 800dcba:	6818      	ldr	r0, [r3, #0]
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	2000019c 	.word	0x2000019c

0800dcc4 <__libc_init_array>:
 800dcc4:	b570      	push	{r4, r5, r6, lr}
 800dcc6:	4d0d      	ldr	r5, [pc, #52]	; (800dcfc <__libc_init_array+0x38>)
 800dcc8:	4c0d      	ldr	r4, [pc, #52]	; (800dd00 <__libc_init_array+0x3c>)
 800dcca:	1b64      	subs	r4, r4, r5
 800dccc:	10a4      	asrs	r4, r4, #2
 800dcce:	2600      	movs	r6, #0
 800dcd0:	42a6      	cmp	r6, r4
 800dcd2:	d109      	bne.n	800dce8 <__libc_init_array+0x24>
 800dcd4:	4d0b      	ldr	r5, [pc, #44]	; (800dd04 <__libc_init_array+0x40>)
 800dcd6:	4c0c      	ldr	r4, [pc, #48]	; (800dd08 <__libc_init_array+0x44>)
 800dcd8:	f000 fc8e 	bl	800e5f8 <_init>
 800dcdc:	1b64      	subs	r4, r4, r5
 800dcde:	10a4      	asrs	r4, r4, #2
 800dce0:	2600      	movs	r6, #0
 800dce2:	42a6      	cmp	r6, r4
 800dce4:	d105      	bne.n	800dcf2 <__libc_init_array+0x2e>
 800dce6:	bd70      	pop	{r4, r5, r6, pc}
 800dce8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcec:	4798      	blx	r3
 800dcee:	3601      	adds	r6, #1
 800dcf0:	e7ee      	b.n	800dcd0 <__libc_init_array+0xc>
 800dcf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcf6:	4798      	blx	r3
 800dcf8:	3601      	adds	r6, #1
 800dcfa:	e7f2      	b.n	800dce2 <__libc_init_array+0x1e>
 800dcfc:	0800eadc 	.word	0x0800eadc
 800dd00:	0800eadc 	.word	0x0800eadc
 800dd04:	0800eadc 	.word	0x0800eadc
 800dd08:	0800eae0 	.word	0x0800eae0

0800dd0c <memset>:
 800dd0c:	4402      	add	r2, r0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d100      	bne.n	800dd16 <memset+0xa>
 800dd14:	4770      	bx	lr
 800dd16:	f803 1b01 	strb.w	r1, [r3], #1
 800dd1a:	e7f9      	b.n	800dd10 <memset+0x4>

0800dd1c <siprintf>:
 800dd1c:	b40e      	push	{r1, r2, r3}
 800dd1e:	b500      	push	{lr}
 800dd20:	b09c      	sub	sp, #112	; 0x70
 800dd22:	ab1d      	add	r3, sp, #116	; 0x74
 800dd24:	9002      	str	r0, [sp, #8]
 800dd26:	9006      	str	r0, [sp, #24]
 800dd28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd2c:	4809      	ldr	r0, [pc, #36]	; (800dd54 <siprintf+0x38>)
 800dd2e:	9107      	str	r1, [sp, #28]
 800dd30:	9104      	str	r1, [sp, #16]
 800dd32:	4909      	ldr	r1, [pc, #36]	; (800dd58 <siprintf+0x3c>)
 800dd34:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd38:	9105      	str	r1, [sp, #20]
 800dd3a:	6800      	ldr	r0, [r0, #0]
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	a902      	add	r1, sp, #8
 800dd40:	f000 f868 	bl	800de14 <_svfiprintf_r>
 800dd44:	9b02      	ldr	r3, [sp, #8]
 800dd46:	2200      	movs	r2, #0
 800dd48:	701a      	strb	r2, [r3, #0]
 800dd4a:	b01c      	add	sp, #112	; 0x70
 800dd4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd50:	b003      	add	sp, #12
 800dd52:	4770      	bx	lr
 800dd54:	2000019c 	.word	0x2000019c
 800dd58:	ffff0208 	.word	0xffff0208

0800dd5c <__ssputs_r>:
 800dd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd60:	688e      	ldr	r6, [r1, #8]
 800dd62:	429e      	cmp	r6, r3
 800dd64:	4682      	mov	sl, r0
 800dd66:	460c      	mov	r4, r1
 800dd68:	4690      	mov	r8, r2
 800dd6a:	461f      	mov	r7, r3
 800dd6c:	d838      	bhi.n	800dde0 <__ssputs_r+0x84>
 800dd6e:	898a      	ldrh	r2, [r1, #12]
 800dd70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd74:	d032      	beq.n	800dddc <__ssputs_r+0x80>
 800dd76:	6825      	ldr	r5, [r4, #0]
 800dd78:	6909      	ldr	r1, [r1, #16]
 800dd7a:	eba5 0901 	sub.w	r9, r5, r1
 800dd7e:	6965      	ldr	r5, [r4, #20]
 800dd80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd88:	3301      	adds	r3, #1
 800dd8a:	444b      	add	r3, r9
 800dd8c:	106d      	asrs	r5, r5, #1
 800dd8e:	429d      	cmp	r5, r3
 800dd90:	bf38      	it	cc
 800dd92:	461d      	movcc	r5, r3
 800dd94:	0553      	lsls	r3, r2, #21
 800dd96:	d531      	bpl.n	800ddfc <__ssputs_r+0xa0>
 800dd98:	4629      	mov	r1, r5
 800dd9a:	f000 fb63 	bl	800e464 <_malloc_r>
 800dd9e:	4606      	mov	r6, r0
 800dda0:	b950      	cbnz	r0, 800ddb8 <__ssputs_r+0x5c>
 800dda2:	230c      	movs	r3, #12
 800dda4:	f8ca 3000 	str.w	r3, [sl]
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddae:	81a3      	strh	r3, [r4, #12]
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb8:	6921      	ldr	r1, [r4, #16]
 800ddba:	464a      	mov	r2, r9
 800ddbc:	f000 fabe 	bl	800e33c <memcpy>
 800ddc0:	89a3      	ldrh	r3, [r4, #12]
 800ddc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddca:	81a3      	strh	r3, [r4, #12]
 800ddcc:	6126      	str	r6, [r4, #16]
 800ddce:	6165      	str	r5, [r4, #20]
 800ddd0:	444e      	add	r6, r9
 800ddd2:	eba5 0509 	sub.w	r5, r5, r9
 800ddd6:	6026      	str	r6, [r4, #0]
 800ddd8:	60a5      	str	r5, [r4, #8]
 800ddda:	463e      	mov	r6, r7
 800dddc:	42be      	cmp	r6, r7
 800ddde:	d900      	bls.n	800dde2 <__ssputs_r+0x86>
 800dde0:	463e      	mov	r6, r7
 800dde2:	6820      	ldr	r0, [r4, #0]
 800dde4:	4632      	mov	r2, r6
 800dde6:	4641      	mov	r1, r8
 800dde8:	f000 fab6 	bl	800e358 <memmove>
 800ddec:	68a3      	ldr	r3, [r4, #8]
 800ddee:	1b9b      	subs	r3, r3, r6
 800ddf0:	60a3      	str	r3, [r4, #8]
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	4433      	add	r3, r6
 800ddf6:	6023      	str	r3, [r4, #0]
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	e7db      	b.n	800ddb4 <__ssputs_r+0x58>
 800ddfc:	462a      	mov	r2, r5
 800ddfe:	f000 fba5 	bl	800e54c <_realloc_r>
 800de02:	4606      	mov	r6, r0
 800de04:	2800      	cmp	r0, #0
 800de06:	d1e1      	bne.n	800ddcc <__ssputs_r+0x70>
 800de08:	6921      	ldr	r1, [r4, #16]
 800de0a:	4650      	mov	r0, sl
 800de0c:	f000 fabe 	bl	800e38c <_free_r>
 800de10:	e7c7      	b.n	800dda2 <__ssputs_r+0x46>
	...

0800de14 <_svfiprintf_r>:
 800de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de18:	4698      	mov	r8, r3
 800de1a:	898b      	ldrh	r3, [r1, #12]
 800de1c:	061b      	lsls	r3, r3, #24
 800de1e:	b09d      	sub	sp, #116	; 0x74
 800de20:	4607      	mov	r7, r0
 800de22:	460d      	mov	r5, r1
 800de24:	4614      	mov	r4, r2
 800de26:	d50e      	bpl.n	800de46 <_svfiprintf_r+0x32>
 800de28:	690b      	ldr	r3, [r1, #16]
 800de2a:	b963      	cbnz	r3, 800de46 <_svfiprintf_r+0x32>
 800de2c:	2140      	movs	r1, #64	; 0x40
 800de2e:	f000 fb19 	bl	800e464 <_malloc_r>
 800de32:	6028      	str	r0, [r5, #0]
 800de34:	6128      	str	r0, [r5, #16]
 800de36:	b920      	cbnz	r0, 800de42 <_svfiprintf_r+0x2e>
 800de38:	230c      	movs	r3, #12
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	e0d1      	b.n	800dfe6 <_svfiprintf_r+0x1d2>
 800de42:	2340      	movs	r3, #64	; 0x40
 800de44:	616b      	str	r3, [r5, #20]
 800de46:	2300      	movs	r3, #0
 800de48:	9309      	str	r3, [sp, #36]	; 0x24
 800de4a:	2320      	movs	r3, #32
 800de4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de50:	f8cd 800c 	str.w	r8, [sp, #12]
 800de54:	2330      	movs	r3, #48	; 0x30
 800de56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e000 <_svfiprintf_r+0x1ec>
 800de5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de5e:	f04f 0901 	mov.w	r9, #1
 800de62:	4623      	mov	r3, r4
 800de64:	469a      	mov	sl, r3
 800de66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de6a:	b10a      	cbz	r2, 800de70 <_svfiprintf_r+0x5c>
 800de6c:	2a25      	cmp	r2, #37	; 0x25
 800de6e:	d1f9      	bne.n	800de64 <_svfiprintf_r+0x50>
 800de70:	ebba 0b04 	subs.w	fp, sl, r4
 800de74:	d00b      	beq.n	800de8e <_svfiprintf_r+0x7a>
 800de76:	465b      	mov	r3, fp
 800de78:	4622      	mov	r2, r4
 800de7a:	4629      	mov	r1, r5
 800de7c:	4638      	mov	r0, r7
 800de7e:	f7ff ff6d 	bl	800dd5c <__ssputs_r>
 800de82:	3001      	adds	r0, #1
 800de84:	f000 80aa 	beq.w	800dfdc <_svfiprintf_r+0x1c8>
 800de88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de8a:	445a      	add	r2, fp
 800de8c:	9209      	str	r2, [sp, #36]	; 0x24
 800de8e:	f89a 3000 	ldrb.w	r3, [sl]
 800de92:	2b00      	cmp	r3, #0
 800de94:	f000 80a2 	beq.w	800dfdc <_svfiprintf_r+0x1c8>
 800de98:	2300      	movs	r3, #0
 800de9a:	f04f 32ff 	mov.w	r2, #4294967295
 800de9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea2:	f10a 0a01 	add.w	sl, sl, #1
 800dea6:	9304      	str	r3, [sp, #16]
 800dea8:	9307      	str	r3, [sp, #28]
 800deaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deae:	931a      	str	r3, [sp, #104]	; 0x68
 800deb0:	4654      	mov	r4, sl
 800deb2:	2205      	movs	r2, #5
 800deb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb8:	4851      	ldr	r0, [pc, #324]	; (800e000 <_svfiprintf_r+0x1ec>)
 800deba:	f7f2 f9b1 	bl	8000220 <memchr>
 800debe:	9a04      	ldr	r2, [sp, #16]
 800dec0:	b9d8      	cbnz	r0, 800defa <_svfiprintf_r+0xe6>
 800dec2:	06d0      	lsls	r0, r2, #27
 800dec4:	bf44      	itt	mi
 800dec6:	2320      	movmi	r3, #32
 800dec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800decc:	0711      	lsls	r1, r2, #28
 800dece:	bf44      	itt	mi
 800ded0:	232b      	movmi	r3, #43	; 0x2b
 800ded2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded6:	f89a 3000 	ldrb.w	r3, [sl]
 800deda:	2b2a      	cmp	r3, #42	; 0x2a
 800dedc:	d015      	beq.n	800df0a <_svfiprintf_r+0xf6>
 800dede:	9a07      	ldr	r2, [sp, #28]
 800dee0:	4654      	mov	r4, sl
 800dee2:	2000      	movs	r0, #0
 800dee4:	f04f 0c0a 	mov.w	ip, #10
 800dee8:	4621      	mov	r1, r4
 800deea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deee:	3b30      	subs	r3, #48	; 0x30
 800def0:	2b09      	cmp	r3, #9
 800def2:	d94e      	bls.n	800df92 <_svfiprintf_r+0x17e>
 800def4:	b1b0      	cbz	r0, 800df24 <_svfiprintf_r+0x110>
 800def6:	9207      	str	r2, [sp, #28]
 800def8:	e014      	b.n	800df24 <_svfiprintf_r+0x110>
 800defa:	eba0 0308 	sub.w	r3, r0, r8
 800defe:	fa09 f303 	lsl.w	r3, r9, r3
 800df02:	4313      	orrs	r3, r2
 800df04:	9304      	str	r3, [sp, #16]
 800df06:	46a2      	mov	sl, r4
 800df08:	e7d2      	b.n	800deb0 <_svfiprintf_r+0x9c>
 800df0a:	9b03      	ldr	r3, [sp, #12]
 800df0c:	1d19      	adds	r1, r3, #4
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	9103      	str	r1, [sp, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	bfbb      	ittet	lt
 800df16:	425b      	neglt	r3, r3
 800df18:	f042 0202 	orrlt.w	r2, r2, #2
 800df1c:	9307      	strge	r3, [sp, #28]
 800df1e:	9307      	strlt	r3, [sp, #28]
 800df20:	bfb8      	it	lt
 800df22:	9204      	strlt	r2, [sp, #16]
 800df24:	7823      	ldrb	r3, [r4, #0]
 800df26:	2b2e      	cmp	r3, #46	; 0x2e
 800df28:	d10c      	bne.n	800df44 <_svfiprintf_r+0x130>
 800df2a:	7863      	ldrb	r3, [r4, #1]
 800df2c:	2b2a      	cmp	r3, #42	; 0x2a
 800df2e:	d135      	bne.n	800df9c <_svfiprintf_r+0x188>
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	1d1a      	adds	r2, r3, #4
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	9203      	str	r2, [sp, #12]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	bfb8      	it	lt
 800df3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800df40:	3402      	adds	r4, #2
 800df42:	9305      	str	r3, [sp, #20]
 800df44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e010 <_svfiprintf_r+0x1fc>
 800df48:	7821      	ldrb	r1, [r4, #0]
 800df4a:	2203      	movs	r2, #3
 800df4c:	4650      	mov	r0, sl
 800df4e:	f7f2 f967 	bl	8000220 <memchr>
 800df52:	b140      	cbz	r0, 800df66 <_svfiprintf_r+0x152>
 800df54:	2340      	movs	r3, #64	; 0x40
 800df56:	eba0 000a 	sub.w	r0, r0, sl
 800df5a:	fa03 f000 	lsl.w	r0, r3, r0
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	4303      	orrs	r3, r0
 800df62:	3401      	adds	r4, #1
 800df64:	9304      	str	r3, [sp, #16]
 800df66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df6a:	4826      	ldr	r0, [pc, #152]	; (800e004 <_svfiprintf_r+0x1f0>)
 800df6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df70:	2206      	movs	r2, #6
 800df72:	f7f2 f955 	bl	8000220 <memchr>
 800df76:	2800      	cmp	r0, #0
 800df78:	d038      	beq.n	800dfec <_svfiprintf_r+0x1d8>
 800df7a:	4b23      	ldr	r3, [pc, #140]	; (800e008 <_svfiprintf_r+0x1f4>)
 800df7c:	bb1b      	cbnz	r3, 800dfc6 <_svfiprintf_r+0x1b2>
 800df7e:	9b03      	ldr	r3, [sp, #12]
 800df80:	3307      	adds	r3, #7
 800df82:	f023 0307 	bic.w	r3, r3, #7
 800df86:	3308      	adds	r3, #8
 800df88:	9303      	str	r3, [sp, #12]
 800df8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8c:	4433      	add	r3, r6
 800df8e:	9309      	str	r3, [sp, #36]	; 0x24
 800df90:	e767      	b.n	800de62 <_svfiprintf_r+0x4e>
 800df92:	fb0c 3202 	mla	r2, ip, r2, r3
 800df96:	460c      	mov	r4, r1
 800df98:	2001      	movs	r0, #1
 800df9a:	e7a5      	b.n	800dee8 <_svfiprintf_r+0xd4>
 800df9c:	2300      	movs	r3, #0
 800df9e:	3401      	adds	r4, #1
 800dfa0:	9305      	str	r3, [sp, #20]
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	f04f 0c0a 	mov.w	ip, #10
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfae:	3a30      	subs	r2, #48	; 0x30
 800dfb0:	2a09      	cmp	r2, #9
 800dfb2:	d903      	bls.n	800dfbc <_svfiprintf_r+0x1a8>
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d0c5      	beq.n	800df44 <_svfiprintf_r+0x130>
 800dfb8:	9105      	str	r1, [sp, #20]
 800dfba:	e7c3      	b.n	800df44 <_svfiprintf_r+0x130>
 800dfbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e7f0      	b.n	800dfa8 <_svfiprintf_r+0x194>
 800dfc6:	ab03      	add	r3, sp, #12
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	462a      	mov	r2, r5
 800dfcc:	4b0f      	ldr	r3, [pc, #60]	; (800e00c <_svfiprintf_r+0x1f8>)
 800dfce:	a904      	add	r1, sp, #16
 800dfd0:	4638      	mov	r0, r7
 800dfd2:	f3af 8000 	nop.w
 800dfd6:	1c42      	adds	r2, r0, #1
 800dfd8:	4606      	mov	r6, r0
 800dfda:	d1d6      	bne.n	800df8a <_svfiprintf_r+0x176>
 800dfdc:	89ab      	ldrh	r3, [r5, #12]
 800dfde:	065b      	lsls	r3, r3, #25
 800dfe0:	f53f af2c 	bmi.w	800de3c <_svfiprintf_r+0x28>
 800dfe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfe6:	b01d      	add	sp, #116	; 0x74
 800dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfec:	ab03      	add	r3, sp, #12
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	462a      	mov	r2, r5
 800dff2:	4b06      	ldr	r3, [pc, #24]	; (800e00c <_svfiprintf_r+0x1f8>)
 800dff4:	a904      	add	r1, sp, #16
 800dff6:	4638      	mov	r0, r7
 800dff8:	f000 f87a 	bl	800e0f0 <_printf_i>
 800dffc:	e7eb      	b.n	800dfd6 <_svfiprintf_r+0x1c2>
 800dffe:	bf00      	nop
 800e000:	0800eaa8 	.word	0x0800eaa8
 800e004:	0800eab2 	.word	0x0800eab2
 800e008:	00000000 	.word	0x00000000
 800e00c:	0800dd5d 	.word	0x0800dd5d
 800e010:	0800eaae 	.word	0x0800eaae

0800e014 <_printf_common>:
 800e014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e018:	4616      	mov	r6, r2
 800e01a:	4699      	mov	r9, r3
 800e01c:	688a      	ldr	r2, [r1, #8]
 800e01e:	690b      	ldr	r3, [r1, #16]
 800e020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e024:	4293      	cmp	r3, r2
 800e026:	bfb8      	it	lt
 800e028:	4613      	movlt	r3, r2
 800e02a:	6033      	str	r3, [r6, #0]
 800e02c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e030:	4607      	mov	r7, r0
 800e032:	460c      	mov	r4, r1
 800e034:	b10a      	cbz	r2, 800e03a <_printf_common+0x26>
 800e036:	3301      	adds	r3, #1
 800e038:	6033      	str	r3, [r6, #0]
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	0699      	lsls	r1, r3, #26
 800e03e:	bf42      	ittt	mi
 800e040:	6833      	ldrmi	r3, [r6, #0]
 800e042:	3302      	addmi	r3, #2
 800e044:	6033      	strmi	r3, [r6, #0]
 800e046:	6825      	ldr	r5, [r4, #0]
 800e048:	f015 0506 	ands.w	r5, r5, #6
 800e04c:	d106      	bne.n	800e05c <_printf_common+0x48>
 800e04e:	f104 0a19 	add.w	sl, r4, #25
 800e052:	68e3      	ldr	r3, [r4, #12]
 800e054:	6832      	ldr	r2, [r6, #0]
 800e056:	1a9b      	subs	r3, r3, r2
 800e058:	42ab      	cmp	r3, r5
 800e05a:	dc26      	bgt.n	800e0aa <_printf_common+0x96>
 800e05c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e060:	1e13      	subs	r3, r2, #0
 800e062:	6822      	ldr	r2, [r4, #0]
 800e064:	bf18      	it	ne
 800e066:	2301      	movne	r3, #1
 800e068:	0692      	lsls	r2, r2, #26
 800e06a:	d42b      	bmi.n	800e0c4 <_printf_common+0xb0>
 800e06c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e070:	4649      	mov	r1, r9
 800e072:	4638      	mov	r0, r7
 800e074:	47c0      	blx	r8
 800e076:	3001      	adds	r0, #1
 800e078:	d01e      	beq.n	800e0b8 <_printf_common+0xa4>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	68e5      	ldr	r5, [r4, #12]
 800e07e:	6832      	ldr	r2, [r6, #0]
 800e080:	f003 0306 	and.w	r3, r3, #6
 800e084:	2b04      	cmp	r3, #4
 800e086:	bf08      	it	eq
 800e088:	1aad      	subeq	r5, r5, r2
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	6922      	ldr	r2, [r4, #16]
 800e08e:	bf0c      	ite	eq
 800e090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e094:	2500      	movne	r5, #0
 800e096:	4293      	cmp	r3, r2
 800e098:	bfc4      	itt	gt
 800e09a:	1a9b      	subgt	r3, r3, r2
 800e09c:	18ed      	addgt	r5, r5, r3
 800e09e:	2600      	movs	r6, #0
 800e0a0:	341a      	adds	r4, #26
 800e0a2:	42b5      	cmp	r5, r6
 800e0a4:	d11a      	bne.n	800e0dc <_printf_common+0xc8>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e008      	b.n	800e0bc <_printf_common+0xa8>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	4652      	mov	r2, sl
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	47c0      	blx	r8
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d103      	bne.n	800e0c0 <_printf_common+0xac>
 800e0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c0:	3501      	adds	r5, #1
 800e0c2:	e7c6      	b.n	800e052 <_printf_common+0x3e>
 800e0c4:	18e1      	adds	r1, r4, r3
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	2030      	movs	r0, #48	; 0x30
 800e0ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0ce:	4422      	add	r2, r4
 800e0d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0d8:	3302      	adds	r3, #2
 800e0da:	e7c7      	b.n	800e06c <_printf_common+0x58>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	4622      	mov	r2, r4
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	47c0      	blx	r8
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	d0e6      	beq.n	800e0b8 <_printf_common+0xa4>
 800e0ea:	3601      	adds	r6, #1
 800e0ec:	e7d9      	b.n	800e0a2 <_printf_common+0x8e>
	...

0800e0f0 <_printf_i>:
 800e0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f4:	7e0f      	ldrb	r7, [r1, #24]
 800e0f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0f8:	2f78      	cmp	r7, #120	; 0x78
 800e0fa:	4691      	mov	r9, r2
 800e0fc:	4680      	mov	r8, r0
 800e0fe:	460c      	mov	r4, r1
 800e100:	469a      	mov	sl, r3
 800e102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e106:	d807      	bhi.n	800e118 <_printf_i+0x28>
 800e108:	2f62      	cmp	r7, #98	; 0x62
 800e10a:	d80a      	bhi.n	800e122 <_printf_i+0x32>
 800e10c:	2f00      	cmp	r7, #0
 800e10e:	f000 80d8 	beq.w	800e2c2 <_printf_i+0x1d2>
 800e112:	2f58      	cmp	r7, #88	; 0x58
 800e114:	f000 80a3 	beq.w	800e25e <_printf_i+0x16e>
 800e118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e11c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e120:	e03a      	b.n	800e198 <_printf_i+0xa8>
 800e122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e126:	2b15      	cmp	r3, #21
 800e128:	d8f6      	bhi.n	800e118 <_printf_i+0x28>
 800e12a:	a101      	add	r1, pc, #4	; (adr r1, 800e130 <_printf_i+0x40>)
 800e12c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e130:	0800e189 	.word	0x0800e189
 800e134:	0800e19d 	.word	0x0800e19d
 800e138:	0800e119 	.word	0x0800e119
 800e13c:	0800e119 	.word	0x0800e119
 800e140:	0800e119 	.word	0x0800e119
 800e144:	0800e119 	.word	0x0800e119
 800e148:	0800e19d 	.word	0x0800e19d
 800e14c:	0800e119 	.word	0x0800e119
 800e150:	0800e119 	.word	0x0800e119
 800e154:	0800e119 	.word	0x0800e119
 800e158:	0800e119 	.word	0x0800e119
 800e15c:	0800e2a9 	.word	0x0800e2a9
 800e160:	0800e1cd 	.word	0x0800e1cd
 800e164:	0800e28b 	.word	0x0800e28b
 800e168:	0800e119 	.word	0x0800e119
 800e16c:	0800e119 	.word	0x0800e119
 800e170:	0800e2cb 	.word	0x0800e2cb
 800e174:	0800e119 	.word	0x0800e119
 800e178:	0800e1cd 	.word	0x0800e1cd
 800e17c:	0800e119 	.word	0x0800e119
 800e180:	0800e119 	.word	0x0800e119
 800e184:	0800e293 	.word	0x0800e293
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	1d1a      	adds	r2, r3, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	602a      	str	r2, [r5, #0]
 800e190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e198:	2301      	movs	r3, #1
 800e19a:	e0a3      	b.n	800e2e4 <_printf_i+0x1f4>
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	6829      	ldr	r1, [r5, #0]
 800e1a0:	0606      	lsls	r6, r0, #24
 800e1a2:	f101 0304 	add.w	r3, r1, #4
 800e1a6:	d50a      	bpl.n	800e1be <_printf_i+0xce>
 800e1a8:	680e      	ldr	r6, [r1, #0]
 800e1aa:	602b      	str	r3, [r5, #0]
 800e1ac:	2e00      	cmp	r6, #0
 800e1ae:	da03      	bge.n	800e1b8 <_printf_i+0xc8>
 800e1b0:	232d      	movs	r3, #45	; 0x2d
 800e1b2:	4276      	negs	r6, r6
 800e1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1b8:	485e      	ldr	r0, [pc, #376]	; (800e334 <_printf_i+0x244>)
 800e1ba:	230a      	movs	r3, #10
 800e1bc:	e019      	b.n	800e1f2 <_printf_i+0x102>
 800e1be:	680e      	ldr	r6, [r1, #0]
 800e1c0:	602b      	str	r3, [r5, #0]
 800e1c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e1c6:	bf18      	it	ne
 800e1c8:	b236      	sxthne	r6, r6
 800e1ca:	e7ef      	b.n	800e1ac <_printf_i+0xbc>
 800e1cc:	682b      	ldr	r3, [r5, #0]
 800e1ce:	6820      	ldr	r0, [r4, #0]
 800e1d0:	1d19      	adds	r1, r3, #4
 800e1d2:	6029      	str	r1, [r5, #0]
 800e1d4:	0601      	lsls	r1, r0, #24
 800e1d6:	d501      	bpl.n	800e1dc <_printf_i+0xec>
 800e1d8:	681e      	ldr	r6, [r3, #0]
 800e1da:	e002      	b.n	800e1e2 <_printf_i+0xf2>
 800e1dc:	0646      	lsls	r6, r0, #25
 800e1de:	d5fb      	bpl.n	800e1d8 <_printf_i+0xe8>
 800e1e0:	881e      	ldrh	r6, [r3, #0]
 800e1e2:	4854      	ldr	r0, [pc, #336]	; (800e334 <_printf_i+0x244>)
 800e1e4:	2f6f      	cmp	r7, #111	; 0x6f
 800e1e6:	bf0c      	ite	eq
 800e1e8:	2308      	moveq	r3, #8
 800e1ea:	230a      	movne	r3, #10
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1f2:	6865      	ldr	r5, [r4, #4]
 800e1f4:	60a5      	str	r5, [r4, #8]
 800e1f6:	2d00      	cmp	r5, #0
 800e1f8:	bfa2      	ittt	ge
 800e1fa:	6821      	ldrge	r1, [r4, #0]
 800e1fc:	f021 0104 	bicge.w	r1, r1, #4
 800e200:	6021      	strge	r1, [r4, #0]
 800e202:	b90e      	cbnz	r6, 800e208 <_printf_i+0x118>
 800e204:	2d00      	cmp	r5, #0
 800e206:	d04d      	beq.n	800e2a4 <_printf_i+0x1b4>
 800e208:	4615      	mov	r5, r2
 800e20a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e20e:	fb03 6711 	mls	r7, r3, r1, r6
 800e212:	5dc7      	ldrb	r7, [r0, r7]
 800e214:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e218:	4637      	mov	r7, r6
 800e21a:	42bb      	cmp	r3, r7
 800e21c:	460e      	mov	r6, r1
 800e21e:	d9f4      	bls.n	800e20a <_printf_i+0x11a>
 800e220:	2b08      	cmp	r3, #8
 800e222:	d10b      	bne.n	800e23c <_printf_i+0x14c>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	07de      	lsls	r6, r3, #31
 800e228:	d508      	bpl.n	800e23c <_printf_i+0x14c>
 800e22a:	6923      	ldr	r3, [r4, #16]
 800e22c:	6861      	ldr	r1, [r4, #4]
 800e22e:	4299      	cmp	r1, r3
 800e230:	bfde      	ittt	le
 800e232:	2330      	movle	r3, #48	; 0x30
 800e234:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e238:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e23c:	1b52      	subs	r2, r2, r5
 800e23e:	6122      	str	r2, [r4, #16]
 800e240:	f8cd a000 	str.w	sl, [sp]
 800e244:	464b      	mov	r3, r9
 800e246:	aa03      	add	r2, sp, #12
 800e248:	4621      	mov	r1, r4
 800e24a:	4640      	mov	r0, r8
 800e24c:	f7ff fee2 	bl	800e014 <_printf_common>
 800e250:	3001      	adds	r0, #1
 800e252:	d14c      	bne.n	800e2ee <_printf_i+0x1fe>
 800e254:	f04f 30ff 	mov.w	r0, #4294967295
 800e258:	b004      	add	sp, #16
 800e25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e25e:	4835      	ldr	r0, [pc, #212]	; (800e334 <_printf_i+0x244>)
 800e260:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e264:	6829      	ldr	r1, [r5, #0]
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	f851 6b04 	ldr.w	r6, [r1], #4
 800e26c:	6029      	str	r1, [r5, #0]
 800e26e:	061d      	lsls	r5, r3, #24
 800e270:	d514      	bpl.n	800e29c <_printf_i+0x1ac>
 800e272:	07df      	lsls	r7, r3, #31
 800e274:	bf44      	itt	mi
 800e276:	f043 0320 	orrmi.w	r3, r3, #32
 800e27a:	6023      	strmi	r3, [r4, #0]
 800e27c:	b91e      	cbnz	r6, 800e286 <_printf_i+0x196>
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	f023 0320 	bic.w	r3, r3, #32
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	2310      	movs	r3, #16
 800e288:	e7b0      	b.n	800e1ec <_printf_i+0xfc>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	f043 0320 	orr.w	r3, r3, #32
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	2378      	movs	r3, #120	; 0x78
 800e294:	4828      	ldr	r0, [pc, #160]	; (800e338 <_printf_i+0x248>)
 800e296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e29a:	e7e3      	b.n	800e264 <_printf_i+0x174>
 800e29c:	0659      	lsls	r1, r3, #25
 800e29e:	bf48      	it	mi
 800e2a0:	b2b6      	uxthmi	r6, r6
 800e2a2:	e7e6      	b.n	800e272 <_printf_i+0x182>
 800e2a4:	4615      	mov	r5, r2
 800e2a6:	e7bb      	b.n	800e220 <_printf_i+0x130>
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	6826      	ldr	r6, [r4, #0]
 800e2ac:	6961      	ldr	r1, [r4, #20]
 800e2ae:	1d18      	adds	r0, r3, #4
 800e2b0:	6028      	str	r0, [r5, #0]
 800e2b2:	0635      	lsls	r5, r6, #24
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	d501      	bpl.n	800e2bc <_printf_i+0x1cc>
 800e2b8:	6019      	str	r1, [r3, #0]
 800e2ba:	e002      	b.n	800e2c2 <_printf_i+0x1d2>
 800e2bc:	0670      	lsls	r0, r6, #25
 800e2be:	d5fb      	bpl.n	800e2b8 <_printf_i+0x1c8>
 800e2c0:	8019      	strh	r1, [r3, #0]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	6123      	str	r3, [r4, #16]
 800e2c6:	4615      	mov	r5, r2
 800e2c8:	e7ba      	b.n	800e240 <_printf_i+0x150>
 800e2ca:	682b      	ldr	r3, [r5, #0]
 800e2cc:	1d1a      	adds	r2, r3, #4
 800e2ce:	602a      	str	r2, [r5, #0]
 800e2d0:	681d      	ldr	r5, [r3, #0]
 800e2d2:	6862      	ldr	r2, [r4, #4]
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f7f1 ffa2 	bl	8000220 <memchr>
 800e2dc:	b108      	cbz	r0, 800e2e2 <_printf_i+0x1f2>
 800e2de:	1b40      	subs	r0, r0, r5
 800e2e0:	6060      	str	r0, [r4, #4]
 800e2e2:	6863      	ldr	r3, [r4, #4]
 800e2e4:	6123      	str	r3, [r4, #16]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2ec:	e7a8      	b.n	800e240 <_printf_i+0x150>
 800e2ee:	6923      	ldr	r3, [r4, #16]
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	4649      	mov	r1, r9
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	47d0      	blx	sl
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	d0ab      	beq.n	800e254 <_printf_i+0x164>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	079b      	lsls	r3, r3, #30
 800e300:	d413      	bmi.n	800e32a <_printf_i+0x23a>
 800e302:	68e0      	ldr	r0, [r4, #12]
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	4298      	cmp	r0, r3
 800e308:	bfb8      	it	lt
 800e30a:	4618      	movlt	r0, r3
 800e30c:	e7a4      	b.n	800e258 <_printf_i+0x168>
 800e30e:	2301      	movs	r3, #1
 800e310:	4632      	mov	r2, r6
 800e312:	4649      	mov	r1, r9
 800e314:	4640      	mov	r0, r8
 800e316:	47d0      	blx	sl
 800e318:	3001      	adds	r0, #1
 800e31a:	d09b      	beq.n	800e254 <_printf_i+0x164>
 800e31c:	3501      	adds	r5, #1
 800e31e:	68e3      	ldr	r3, [r4, #12]
 800e320:	9903      	ldr	r1, [sp, #12]
 800e322:	1a5b      	subs	r3, r3, r1
 800e324:	42ab      	cmp	r3, r5
 800e326:	dcf2      	bgt.n	800e30e <_printf_i+0x21e>
 800e328:	e7eb      	b.n	800e302 <_printf_i+0x212>
 800e32a:	2500      	movs	r5, #0
 800e32c:	f104 0619 	add.w	r6, r4, #25
 800e330:	e7f5      	b.n	800e31e <_printf_i+0x22e>
 800e332:	bf00      	nop
 800e334:	0800eab9 	.word	0x0800eab9
 800e338:	0800eaca 	.word	0x0800eaca

0800e33c <memcpy>:
 800e33c:	440a      	add	r2, r1
 800e33e:	4291      	cmp	r1, r2
 800e340:	f100 33ff 	add.w	r3, r0, #4294967295
 800e344:	d100      	bne.n	800e348 <memcpy+0xc>
 800e346:	4770      	bx	lr
 800e348:	b510      	push	{r4, lr}
 800e34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e34e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e352:	4291      	cmp	r1, r2
 800e354:	d1f9      	bne.n	800e34a <memcpy+0xe>
 800e356:	bd10      	pop	{r4, pc}

0800e358 <memmove>:
 800e358:	4288      	cmp	r0, r1
 800e35a:	b510      	push	{r4, lr}
 800e35c:	eb01 0402 	add.w	r4, r1, r2
 800e360:	d902      	bls.n	800e368 <memmove+0x10>
 800e362:	4284      	cmp	r4, r0
 800e364:	4623      	mov	r3, r4
 800e366:	d807      	bhi.n	800e378 <memmove+0x20>
 800e368:	1e43      	subs	r3, r0, #1
 800e36a:	42a1      	cmp	r1, r4
 800e36c:	d008      	beq.n	800e380 <memmove+0x28>
 800e36e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e372:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e376:	e7f8      	b.n	800e36a <memmove+0x12>
 800e378:	4402      	add	r2, r0
 800e37a:	4601      	mov	r1, r0
 800e37c:	428a      	cmp	r2, r1
 800e37e:	d100      	bne.n	800e382 <memmove+0x2a>
 800e380:	bd10      	pop	{r4, pc}
 800e382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e38a:	e7f7      	b.n	800e37c <memmove+0x24>

0800e38c <_free_r>:
 800e38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e38e:	2900      	cmp	r1, #0
 800e390:	d044      	beq.n	800e41c <_free_r+0x90>
 800e392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e396:	9001      	str	r0, [sp, #4]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f1a1 0404 	sub.w	r4, r1, #4
 800e39e:	bfb8      	it	lt
 800e3a0:	18e4      	addlt	r4, r4, r3
 800e3a2:	f000 f913 	bl	800e5cc <__malloc_lock>
 800e3a6:	4a1e      	ldr	r2, [pc, #120]	; (800e420 <_free_r+0x94>)
 800e3a8:	9801      	ldr	r0, [sp, #4]
 800e3aa:	6813      	ldr	r3, [r2, #0]
 800e3ac:	b933      	cbnz	r3, 800e3bc <_free_r+0x30>
 800e3ae:	6063      	str	r3, [r4, #4]
 800e3b0:	6014      	str	r4, [r2, #0]
 800e3b2:	b003      	add	sp, #12
 800e3b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3b8:	f000 b90e 	b.w	800e5d8 <__malloc_unlock>
 800e3bc:	42a3      	cmp	r3, r4
 800e3be:	d908      	bls.n	800e3d2 <_free_r+0x46>
 800e3c0:	6825      	ldr	r5, [r4, #0]
 800e3c2:	1961      	adds	r1, r4, r5
 800e3c4:	428b      	cmp	r3, r1
 800e3c6:	bf01      	itttt	eq
 800e3c8:	6819      	ldreq	r1, [r3, #0]
 800e3ca:	685b      	ldreq	r3, [r3, #4]
 800e3cc:	1949      	addeq	r1, r1, r5
 800e3ce:	6021      	streq	r1, [r4, #0]
 800e3d0:	e7ed      	b.n	800e3ae <_free_r+0x22>
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	b10b      	cbz	r3, 800e3dc <_free_r+0x50>
 800e3d8:	42a3      	cmp	r3, r4
 800e3da:	d9fa      	bls.n	800e3d2 <_free_r+0x46>
 800e3dc:	6811      	ldr	r1, [r2, #0]
 800e3de:	1855      	adds	r5, r2, r1
 800e3e0:	42a5      	cmp	r5, r4
 800e3e2:	d10b      	bne.n	800e3fc <_free_r+0x70>
 800e3e4:	6824      	ldr	r4, [r4, #0]
 800e3e6:	4421      	add	r1, r4
 800e3e8:	1854      	adds	r4, r2, r1
 800e3ea:	42a3      	cmp	r3, r4
 800e3ec:	6011      	str	r1, [r2, #0]
 800e3ee:	d1e0      	bne.n	800e3b2 <_free_r+0x26>
 800e3f0:	681c      	ldr	r4, [r3, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	6053      	str	r3, [r2, #4]
 800e3f6:	4421      	add	r1, r4
 800e3f8:	6011      	str	r1, [r2, #0]
 800e3fa:	e7da      	b.n	800e3b2 <_free_r+0x26>
 800e3fc:	d902      	bls.n	800e404 <_free_r+0x78>
 800e3fe:	230c      	movs	r3, #12
 800e400:	6003      	str	r3, [r0, #0]
 800e402:	e7d6      	b.n	800e3b2 <_free_r+0x26>
 800e404:	6825      	ldr	r5, [r4, #0]
 800e406:	1961      	adds	r1, r4, r5
 800e408:	428b      	cmp	r3, r1
 800e40a:	bf04      	itt	eq
 800e40c:	6819      	ldreq	r1, [r3, #0]
 800e40e:	685b      	ldreq	r3, [r3, #4]
 800e410:	6063      	str	r3, [r4, #4]
 800e412:	bf04      	itt	eq
 800e414:	1949      	addeq	r1, r1, r5
 800e416:	6021      	streq	r1, [r4, #0]
 800e418:	6054      	str	r4, [r2, #4]
 800e41a:	e7ca      	b.n	800e3b2 <_free_r+0x26>
 800e41c:	b003      	add	sp, #12
 800e41e:	bd30      	pop	{r4, r5, pc}
 800e420:	20004fc4 	.word	0x20004fc4

0800e424 <sbrk_aligned>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	4e0e      	ldr	r6, [pc, #56]	; (800e460 <sbrk_aligned+0x3c>)
 800e428:	460c      	mov	r4, r1
 800e42a:	6831      	ldr	r1, [r6, #0]
 800e42c:	4605      	mov	r5, r0
 800e42e:	b911      	cbnz	r1, 800e436 <sbrk_aligned+0x12>
 800e430:	f000 f8bc 	bl	800e5ac <_sbrk_r>
 800e434:	6030      	str	r0, [r6, #0]
 800e436:	4621      	mov	r1, r4
 800e438:	4628      	mov	r0, r5
 800e43a:	f000 f8b7 	bl	800e5ac <_sbrk_r>
 800e43e:	1c43      	adds	r3, r0, #1
 800e440:	d00a      	beq.n	800e458 <sbrk_aligned+0x34>
 800e442:	1cc4      	adds	r4, r0, #3
 800e444:	f024 0403 	bic.w	r4, r4, #3
 800e448:	42a0      	cmp	r0, r4
 800e44a:	d007      	beq.n	800e45c <sbrk_aligned+0x38>
 800e44c:	1a21      	subs	r1, r4, r0
 800e44e:	4628      	mov	r0, r5
 800e450:	f000 f8ac 	bl	800e5ac <_sbrk_r>
 800e454:	3001      	adds	r0, #1
 800e456:	d101      	bne.n	800e45c <sbrk_aligned+0x38>
 800e458:	f04f 34ff 	mov.w	r4, #4294967295
 800e45c:	4620      	mov	r0, r4
 800e45e:	bd70      	pop	{r4, r5, r6, pc}
 800e460:	20004fc8 	.word	0x20004fc8

0800e464 <_malloc_r>:
 800e464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e468:	1ccd      	adds	r5, r1, #3
 800e46a:	f025 0503 	bic.w	r5, r5, #3
 800e46e:	3508      	adds	r5, #8
 800e470:	2d0c      	cmp	r5, #12
 800e472:	bf38      	it	cc
 800e474:	250c      	movcc	r5, #12
 800e476:	2d00      	cmp	r5, #0
 800e478:	4607      	mov	r7, r0
 800e47a:	db01      	blt.n	800e480 <_malloc_r+0x1c>
 800e47c:	42a9      	cmp	r1, r5
 800e47e:	d905      	bls.n	800e48c <_malloc_r+0x28>
 800e480:	230c      	movs	r3, #12
 800e482:	603b      	str	r3, [r7, #0]
 800e484:	2600      	movs	r6, #0
 800e486:	4630      	mov	r0, r6
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48c:	4e2e      	ldr	r6, [pc, #184]	; (800e548 <_malloc_r+0xe4>)
 800e48e:	f000 f89d 	bl	800e5cc <__malloc_lock>
 800e492:	6833      	ldr	r3, [r6, #0]
 800e494:	461c      	mov	r4, r3
 800e496:	bb34      	cbnz	r4, 800e4e6 <_malloc_r+0x82>
 800e498:	4629      	mov	r1, r5
 800e49a:	4638      	mov	r0, r7
 800e49c:	f7ff ffc2 	bl	800e424 <sbrk_aligned>
 800e4a0:	1c43      	adds	r3, r0, #1
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	d14d      	bne.n	800e542 <_malloc_r+0xde>
 800e4a6:	6834      	ldr	r4, [r6, #0]
 800e4a8:	4626      	mov	r6, r4
 800e4aa:	2e00      	cmp	r6, #0
 800e4ac:	d140      	bne.n	800e530 <_malloc_r+0xcc>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	4631      	mov	r1, r6
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	eb04 0803 	add.w	r8, r4, r3
 800e4b8:	f000 f878 	bl	800e5ac <_sbrk_r>
 800e4bc:	4580      	cmp	r8, r0
 800e4be:	d13a      	bne.n	800e536 <_malloc_r+0xd2>
 800e4c0:	6821      	ldr	r1, [r4, #0]
 800e4c2:	3503      	adds	r5, #3
 800e4c4:	1a6d      	subs	r5, r5, r1
 800e4c6:	f025 0503 	bic.w	r5, r5, #3
 800e4ca:	3508      	adds	r5, #8
 800e4cc:	2d0c      	cmp	r5, #12
 800e4ce:	bf38      	it	cc
 800e4d0:	250c      	movcc	r5, #12
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	4638      	mov	r0, r7
 800e4d6:	f7ff ffa5 	bl	800e424 <sbrk_aligned>
 800e4da:	3001      	adds	r0, #1
 800e4dc:	d02b      	beq.n	800e536 <_malloc_r+0xd2>
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	442b      	add	r3, r5
 800e4e2:	6023      	str	r3, [r4, #0]
 800e4e4:	e00e      	b.n	800e504 <_malloc_r+0xa0>
 800e4e6:	6822      	ldr	r2, [r4, #0]
 800e4e8:	1b52      	subs	r2, r2, r5
 800e4ea:	d41e      	bmi.n	800e52a <_malloc_r+0xc6>
 800e4ec:	2a0b      	cmp	r2, #11
 800e4ee:	d916      	bls.n	800e51e <_malloc_r+0xba>
 800e4f0:	1961      	adds	r1, r4, r5
 800e4f2:	42a3      	cmp	r3, r4
 800e4f4:	6025      	str	r5, [r4, #0]
 800e4f6:	bf18      	it	ne
 800e4f8:	6059      	strne	r1, [r3, #4]
 800e4fa:	6863      	ldr	r3, [r4, #4]
 800e4fc:	bf08      	it	eq
 800e4fe:	6031      	streq	r1, [r6, #0]
 800e500:	5162      	str	r2, [r4, r5]
 800e502:	604b      	str	r3, [r1, #4]
 800e504:	4638      	mov	r0, r7
 800e506:	f104 060b 	add.w	r6, r4, #11
 800e50a:	f000 f865 	bl	800e5d8 <__malloc_unlock>
 800e50e:	f026 0607 	bic.w	r6, r6, #7
 800e512:	1d23      	adds	r3, r4, #4
 800e514:	1af2      	subs	r2, r6, r3
 800e516:	d0b6      	beq.n	800e486 <_malloc_r+0x22>
 800e518:	1b9b      	subs	r3, r3, r6
 800e51a:	50a3      	str	r3, [r4, r2]
 800e51c:	e7b3      	b.n	800e486 <_malloc_r+0x22>
 800e51e:	6862      	ldr	r2, [r4, #4]
 800e520:	42a3      	cmp	r3, r4
 800e522:	bf0c      	ite	eq
 800e524:	6032      	streq	r2, [r6, #0]
 800e526:	605a      	strne	r2, [r3, #4]
 800e528:	e7ec      	b.n	800e504 <_malloc_r+0xa0>
 800e52a:	4623      	mov	r3, r4
 800e52c:	6864      	ldr	r4, [r4, #4]
 800e52e:	e7b2      	b.n	800e496 <_malloc_r+0x32>
 800e530:	4634      	mov	r4, r6
 800e532:	6876      	ldr	r6, [r6, #4]
 800e534:	e7b9      	b.n	800e4aa <_malloc_r+0x46>
 800e536:	230c      	movs	r3, #12
 800e538:	603b      	str	r3, [r7, #0]
 800e53a:	4638      	mov	r0, r7
 800e53c:	f000 f84c 	bl	800e5d8 <__malloc_unlock>
 800e540:	e7a1      	b.n	800e486 <_malloc_r+0x22>
 800e542:	6025      	str	r5, [r4, #0]
 800e544:	e7de      	b.n	800e504 <_malloc_r+0xa0>
 800e546:	bf00      	nop
 800e548:	20004fc4 	.word	0x20004fc4

0800e54c <_realloc_r>:
 800e54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e550:	4680      	mov	r8, r0
 800e552:	4614      	mov	r4, r2
 800e554:	460e      	mov	r6, r1
 800e556:	b921      	cbnz	r1, 800e562 <_realloc_r+0x16>
 800e558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e55c:	4611      	mov	r1, r2
 800e55e:	f7ff bf81 	b.w	800e464 <_malloc_r>
 800e562:	b92a      	cbnz	r2, 800e570 <_realloc_r+0x24>
 800e564:	f7ff ff12 	bl	800e38c <_free_r>
 800e568:	4625      	mov	r5, r4
 800e56a:	4628      	mov	r0, r5
 800e56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e570:	f000 f838 	bl	800e5e4 <_malloc_usable_size_r>
 800e574:	4284      	cmp	r4, r0
 800e576:	4607      	mov	r7, r0
 800e578:	d802      	bhi.n	800e580 <_realloc_r+0x34>
 800e57a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e57e:	d812      	bhi.n	800e5a6 <_realloc_r+0x5a>
 800e580:	4621      	mov	r1, r4
 800e582:	4640      	mov	r0, r8
 800e584:	f7ff ff6e 	bl	800e464 <_malloc_r>
 800e588:	4605      	mov	r5, r0
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d0ed      	beq.n	800e56a <_realloc_r+0x1e>
 800e58e:	42bc      	cmp	r4, r7
 800e590:	4622      	mov	r2, r4
 800e592:	4631      	mov	r1, r6
 800e594:	bf28      	it	cs
 800e596:	463a      	movcs	r2, r7
 800e598:	f7ff fed0 	bl	800e33c <memcpy>
 800e59c:	4631      	mov	r1, r6
 800e59e:	4640      	mov	r0, r8
 800e5a0:	f7ff fef4 	bl	800e38c <_free_r>
 800e5a4:	e7e1      	b.n	800e56a <_realloc_r+0x1e>
 800e5a6:	4635      	mov	r5, r6
 800e5a8:	e7df      	b.n	800e56a <_realloc_r+0x1e>
	...

0800e5ac <_sbrk_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d06      	ldr	r5, [pc, #24]	; (800e5c8 <_sbrk_r+0x1c>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f4 fdfa 	bl	80031b0 <_sbrk>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_sbrk_r+0x1a>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_sbrk_r+0x1a>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	20004fcc 	.word	0x20004fcc

0800e5cc <__malloc_lock>:
 800e5cc:	4801      	ldr	r0, [pc, #4]	; (800e5d4 <__malloc_lock+0x8>)
 800e5ce:	f000 b811 	b.w	800e5f4 <__retarget_lock_acquire_recursive>
 800e5d2:	bf00      	nop
 800e5d4:	20004fd0 	.word	0x20004fd0

0800e5d8 <__malloc_unlock>:
 800e5d8:	4801      	ldr	r0, [pc, #4]	; (800e5e0 <__malloc_unlock+0x8>)
 800e5da:	f000 b80c 	b.w	800e5f6 <__retarget_lock_release_recursive>
 800e5de:	bf00      	nop
 800e5e0:	20004fd0 	.word	0x20004fd0

0800e5e4 <_malloc_usable_size_r>:
 800e5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5e8:	1f18      	subs	r0, r3, #4
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	bfbc      	itt	lt
 800e5ee:	580b      	ldrlt	r3, [r1, r0]
 800e5f0:	18c0      	addlt	r0, r0, r3
 800e5f2:	4770      	bx	lr

0800e5f4 <__retarget_lock_acquire_recursive>:
 800e5f4:	4770      	bx	lr

0800e5f6 <__retarget_lock_release_recursive>:
 800e5f6:	4770      	bx	lr

0800e5f8 <_init>:
 800e5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fa:	bf00      	nop
 800e5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5fe:	bc08      	pop	{r3}
 800e600:	469e      	mov	lr, r3
 800e602:	4770      	bx	lr

0800e604 <_fini>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	bf00      	nop
 800e608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e60a:	bc08      	pop	{r3}
 800e60c:	469e      	mov	lr, r3
 800e60e:	4770      	bx	lr
