
C4V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e714  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800e8f4  0800e8f4  0001e8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee08  0800ee08  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee08  0800ee08  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee08  0800ee08  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee08  0800ee08  0001ee08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee0c  0800ee0c  0001ee0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ee10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de0  20000200  0800f010  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20004fe0  0800f010  00024fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219e8  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005968  00000000  00000000  00041c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  00047580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  00049168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001688b  00000000  00000000  0004aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007c79  00000000  00000000  000612f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00068f6c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007314  00000000  00000000  00068fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e8dc 	.word	0x0800e8dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800e8dc 	.word	0x0800e8dc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t *RoundKey, uint8_t *Key)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b089      	sub	sp, #36	; 0x24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
   unsigned i, j, k;
   uint8_t tempa[4]; // Used for the column/row operations

   // The first round key is the key itself.
   for(i = 0; i < Nk; ++i)
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
 80002ce:	e030      	b.n	8000332 <KeyExpansion+0x72>
   {
      RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	441a      	add	r2, r3
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	6879      	ldr	r1, [r7, #4]
 80002de:	440b      	add	r3, r1
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	701a      	strb	r2, [r3, #0]
      RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	3301      	adds	r3, #1
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	441a      	add	r2, r3
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	3301      	adds	r3, #1
 80002f4:	6879      	ldr	r1, [r7, #4]
 80002f6:	440b      	add	r3, r1
 80002f8:	7812      	ldrb	r2, [r2, #0]
 80002fa:	701a      	strb	r2, [r3, #0]
      RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	3302      	adds	r3, #2
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	441a      	add	r2, r3
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	3302      	adds	r3, #2
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	440b      	add	r3, r1
 8000310:	7812      	ldrb	r2, [r2, #0]
 8000312:	701a      	strb	r2, [r3, #0]
      RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	3303      	adds	r3, #3
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	441a      	add	r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	3303      	adds	r3, #3
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	440b      	add	r3, r1
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < Nk; ++i)
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	3301      	adds	r3, #1
 8000330:	61fb      	str	r3, [r7, #28]
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	2b03      	cmp	r3, #3
 8000336:	d9cb      	bls.n	80002d0 <KeyExpansion+0x10>
   }

   // All other round keys are found from the previous round keys.
   for(i = Nk; i < Nb * (Nr + 1); ++i)
 8000338:	2304      	movs	r3, #4
 800033a:	61fb      	str	r3, [r7, #28]
 800033c:	e081      	b.n	8000442 <KeyExpansion+0x182>
   {
      {
         k        = (i - 1) * 4;
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3b01      	subs	r3, #1
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
         tempa[0] = RoundKey[k + 0];
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	733b      	strb	r3, [r7, #12]
         tempa[1] = RoundKey[k + 1];
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	3301      	adds	r3, #1
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	737b      	strb	r3, [r7, #13]
         tempa[2] = RoundKey[k + 2];
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	3302      	adds	r3, #2
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	73bb      	strb	r3, [r7, #14]
         tempa[3] = RoundKey[k + 3];
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	3303      	adds	r3, #3
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	4413      	add	r3, r2
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	73fb      	strb	r3, [r7, #15]
      }

      if(i % Nk == 0)
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	f003 0303 	and.w	r3, r3, #3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d125      	bne.n	80003ca <KeyExpansion+0x10a>
         // This function shifts the 4 bytes in a word to the left once.
         // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

         // Function RotWord()
         {
            const uint8_t u8tmp = tempa[0];
 800037e:	7b3b      	ldrb	r3, [r7, #12]
 8000380:	75fb      	strb	r3, [r7, #23]
            tempa[0]            = tempa[1];
 8000382:	7b7b      	ldrb	r3, [r7, #13]
 8000384:	733b      	strb	r3, [r7, #12]
            tempa[1]            = tempa[2];
 8000386:	7bbb      	ldrb	r3, [r7, #14]
 8000388:	737b      	strb	r3, [r7, #13]
            tempa[2]            = tempa[3];
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	73bb      	strb	r3, [r7, #14]
            tempa[3]            = u8tmp;
 800038e:	7dfb      	ldrb	r3, [r7, #23]
 8000390:	73fb      	strb	r3, [r7, #15]
         // SubWord() is a function that takes a four-byte input word and
         // applies the S-box to each of the four bytes to produce an output word.

         // Function Subword()
         {
            tempa[0] = getSBoxValue(tempa[0]);
 8000392:	7b3b      	ldrb	r3, [r7, #12]
 8000394:	461a      	mov	r2, r3
 8000396:	4b30      	ldr	r3, [pc, #192]	; (8000458 <KeyExpansion+0x198>)
 8000398:	5c9b      	ldrb	r3, [r3, r2]
 800039a:	733b      	strb	r3, [r7, #12]
            tempa[1] = getSBoxValue(tempa[1]);
 800039c:	7b7b      	ldrb	r3, [r7, #13]
 800039e:	461a      	mov	r2, r3
 80003a0:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <KeyExpansion+0x198>)
 80003a2:	5c9b      	ldrb	r3, [r3, r2]
 80003a4:	737b      	strb	r3, [r7, #13]
            tempa[2] = getSBoxValue(tempa[2]);
 80003a6:	7bbb      	ldrb	r3, [r7, #14]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <KeyExpansion+0x198>)
 80003ac:	5c9b      	ldrb	r3, [r3, r2]
 80003ae:	73bb      	strb	r3, [r7, #14]
            tempa[3] = getSBoxValue(tempa[3]);
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <KeyExpansion+0x198>)
 80003b6:	5c9b      	ldrb	r3, [r3, r2]
 80003b8:	73fb      	strb	r3, [r7, #15]
         }

         tempa[0] = tempa[0] ^ Rcon[i / Nk];
 80003ba:	7b3a      	ldrb	r2, [r7, #12]
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	089b      	lsrs	r3, r3, #2
 80003c0:	4926      	ldr	r1, [pc, #152]	; (800045c <KeyExpansion+0x19c>)
 80003c2:	5ccb      	ldrb	r3, [r1, r3]
 80003c4:	4053      	eors	r3, r2
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	733b      	strb	r3, [r7, #12]
            tempa[2] = getSBoxValue(tempa[2]);
            tempa[3] = getSBoxValue(tempa[3]);
         }
      }
#endif
      j               = i * 4;
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	613b      	str	r3, [r7, #16]
      k               = (i - Nk) * 4;
 80003d0:	69fb      	ldr	r3, [r7, #28]
 80003d2:	3b04      	subs	r3, #4
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	61bb      	str	r3, [r7, #24]
      RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	69bb      	ldr	r3, [r7, #24]
 80003dc:	4413      	add	r3, r2
 80003de:	7819      	ldrb	r1, [r3, #0]
 80003e0:	7b3a      	ldrb	r2, [r7, #12]
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	4403      	add	r3, r0
 80003e8:	404a      	eors	r2, r1
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	701a      	strb	r2, [r3, #0]
      RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	3301      	adds	r3, #1
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	7819      	ldrb	r1, [r3, #0]
 80003f8:	7b7a      	ldrb	r2, [r7, #13]
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	3301      	adds	r3, #1
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	4403      	add	r3, r0
 8000402:	404a      	eors	r2, r1
 8000404:	b2d2      	uxtb	r2, r2
 8000406:	701a      	strb	r2, [r3, #0]
      RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	3302      	adds	r3, #2
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	4413      	add	r3, r2
 8000410:	7819      	ldrb	r1, [r3, #0]
 8000412:	7bba      	ldrb	r2, [r7, #14]
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	3302      	adds	r3, #2
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	4403      	add	r3, r0
 800041c:	404a      	eors	r2, r1
 800041e:	b2d2      	uxtb	r2, r2
 8000420:	701a      	strb	r2, [r3, #0]
      RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	3303      	adds	r3, #3
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	7819      	ldrb	r1, [r3, #0]
 800042c:	7bfa      	ldrb	r2, [r7, #15]
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	3303      	adds	r3, #3
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	4403      	add	r3, r0
 8000436:	404a      	eors	r2, r1
 8000438:	b2d2      	uxtb	r2, r2
 800043a:	701a      	strb	r2, [r3, #0]
   for(i = Nk; i < Nb * (Nr + 1); ++i)
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	3301      	adds	r3, #1
 8000440:	61fb      	str	r3, [r7, #28]
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	2b2b      	cmp	r3, #43	; 0x2b
 8000446:	f67f af7a 	bls.w	800033e <KeyExpansion+0x7e>
   }
}
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	3724      	adds	r7, #36	; 0x24
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	0800e954 	.word	0x0800e954
 800045c:	0800eb54 	.word	0x0800eb54

08000460 <AES_init_ctx>:

void AES_init_ctx(AES_ctx *ctx, uint8_t *key)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
   KeyExpansion(ctx->RoundKey, key);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6839      	ldr	r1, [r7, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff26 	bl	80002c0 <KeyExpansion>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t *state, uint8_t *RoundKey)
{
 800047c:	b480      	push	{r7}
 800047e:	b087      	sub	sp, #28
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	73fb      	strb	r3, [r7, #15]
   uint8_t i, j;
   for(i = 0; i < 4; ++i)
 800048a:	2300      	movs	r3, #0
 800048c:	75fb      	strb	r3, [r7, #23]
 800048e:	e027      	b.n	80004e0 <AddRoundKey+0x64>
   {
      for(j = 0; j < 4; ++j)
 8000490:	2300      	movs	r3, #0
 8000492:	75bb      	strb	r3, [r7, #22]
 8000494:	e01e      	b.n	80004d4 <AddRoundKey+0x58>
      {
         (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000496:	7dfa      	ldrb	r2, [r7, #23]
 8000498:	7dbb      	ldrb	r3, [r7, #22]
 800049a:	68b9      	ldr	r1, [r7, #8]
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	440a      	add	r2, r1
 80004a0:	4413      	add	r3, r2
 80004a2:	7818      	ldrb	r0, [r3, #0]
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	009a      	lsls	r2, r3, #2
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	4413      	add	r3, r2
 80004ac:	009a      	lsls	r2, r3, #2
 80004ae:	7dbb      	ldrb	r3, [r7, #22]
 80004b0:	4413      	add	r3, r2
 80004b2:	461a      	mov	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4413      	add	r3, r2
 80004b8:	7819      	ldrb	r1, [r3, #0]
 80004ba:	7dfa      	ldrb	r2, [r7, #23]
 80004bc:	7dbb      	ldrb	r3, [r7, #22]
 80004be:	4041      	eors	r1, r0
 80004c0:	b2c8      	uxtb	r0, r1
 80004c2:	68b9      	ldr	r1, [r7, #8]
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	440a      	add	r2, r1
 80004c8:	4413      	add	r3, r2
 80004ca:	4602      	mov	r2, r0
 80004cc:	701a      	strb	r2, [r3, #0]
      for(j = 0; j < 4; ++j)
 80004ce:	7dbb      	ldrb	r3, [r7, #22]
 80004d0:	3301      	adds	r3, #1
 80004d2:	75bb      	strb	r3, [r7, #22]
 80004d4:	7dbb      	ldrb	r3, [r7, #22]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d9dd      	bls.n	8000496 <AddRoundKey+0x1a>
   for(i = 0; i < 4; ++i)
 80004da:	7dfb      	ldrb	r3, [r7, #23]
 80004dc:	3301      	adds	r3, #1
 80004de:	75fb      	strb	r3, [r7, #23]
 80004e0:	7dfb      	ldrb	r3, [r7, #23]
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	d9d4      	bls.n	8000490 <AddRoundKey+0x14>
      }
   }
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	371c      	adds	r7, #28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t *state)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
   uint8_t i, j;
   for(i = 0; i < 4; ++i)
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]
 8000500:	e01d      	b.n	800053e <SubBytes+0x4a>
   {
      for(j = 0; j < 4; ++j)
 8000502:	2300      	movs	r3, #0
 8000504:	73bb      	strb	r3, [r7, #14]
 8000506:	e014      	b.n	8000532 <SubBytes+0x3e>
      {
         (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8000508:	7bba      	ldrb	r2, [r7, #14]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	6879      	ldr	r1, [r7, #4]
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	440a      	add	r2, r1
 8000512:	4413      	add	r3, r2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	7bba      	ldrb	r2, [r7, #14]
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	490d      	ldr	r1, [pc, #52]	; (8000554 <SubBytes+0x60>)
 800051e:	5c08      	ldrb	r0, [r1, r0]
 8000520:	6879      	ldr	r1, [r7, #4]
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	440a      	add	r2, r1
 8000526:	4413      	add	r3, r2
 8000528:	4602      	mov	r2, r0
 800052a:	701a      	strb	r2, [r3, #0]
      for(j = 0; j < 4; ++j)
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	3301      	adds	r3, #1
 8000530:	73bb      	strb	r3, [r7, #14]
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d9e7      	bls.n	8000508 <SubBytes+0x14>
   for(i = 0; i < 4; ++i)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3301      	adds	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d9de      	bls.n	8000502 <SubBytes+0xe>
      }
   }
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	0800e954 	.word	0x0800e954

08000558 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t *state)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
   uint8_t temp;

   // Rotate first row 1 columns to left
   temp           = (*state)[0][1];
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	73fb      	strb	r3, [r7, #15]
   (*state)[0][1] = (*state)[1][1];
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	795a      	ldrb	r2, [r3, #5]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	705a      	strb	r2, [r3, #1]
   (*state)[1][1] = (*state)[2][1];
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a5a      	ldrb	r2, [r3, #9]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	715a      	strb	r2, [r3, #5]
   (*state)[2][1] = (*state)[3][1];
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7b5a      	ldrb	r2, [r3, #13]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	725a      	strb	r2, [r3, #9]
   (*state)[3][1] = temp;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7bfa      	ldrb	r2, [r7, #15]
 8000582:	735a      	strb	r2, [r3, #13]

   // Rotate second row 2 columns to left
   temp           = (*state)[0][2];
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	73fb      	strb	r3, [r7, #15]
   (*state)[0][2] = (*state)[2][2];
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7a9a      	ldrb	r2, [r3, #10]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	709a      	strb	r2, [r3, #2]
   (*state)[2][2] = temp;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7bfa      	ldrb	r2, [r7, #15]
 8000596:	729a      	strb	r2, [r3, #10]

   temp           = (*state)[1][2];
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	799b      	ldrb	r3, [r3, #6]
 800059c:	73fb      	strb	r3, [r7, #15]
   (*state)[1][2] = (*state)[3][2];
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7b9a      	ldrb	r2, [r3, #14]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	719a      	strb	r2, [r3, #6]
   (*state)[3][2] = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7bfa      	ldrb	r2, [r7, #15]
 80005aa:	739a      	strb	r2, [r3, #14]

   // Rotate third row 3 columns to left
   temp           = (*state)[0][3];
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	73fb      	strb	r3, [r7, #15]
   (*state)[0][3] = (*state)[3][3];
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7bda      	ldrb	r2, [r3, #15]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	70da      	strb	r2, [r3, #3]
   (*state)[3][3] = (*state)[2][3];
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7ada      	ldrb	r2, [r3, #11]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	73da      	strb	r2, [r3, #15]
   (*state)[2][3] = (*state)[1][3];
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	79da      	ldrb	r2, [r3, #7]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	72da      	strb	r2, [r3, #11]
   (*state)[1][3] = temp;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	71da      	strb	r2, [r3, #7]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <xtime>:

static uint8_t xtime(uint8_t x)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
   return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b25a      	sxtb	r2, r3
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	09db      	lsrs	r3, r3, #7
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	0049      	lsls	r1, r1, #1
 80005f6:	440b      	add	r3, r1
 80005f8:	4619      	mov	r1, r3
 80005fa:	00c8      	lsls	r0, r1, #3
 80005fc:	4619      	mov	r1, r3
 80005fe:	4603      	mov	r3, r0
 8000600:	440b      	add	r3, r1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	b25b      	sxtb	r3, r3
 8000606:	4053      	eors	r3, r2
 8000608:	b25b      	sxtb	r3, r3
 800060a:	b2db      	uxtb	r3, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t *state)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
   uint8_t i;
   uint8_t Tmp, Tm, t;
   for(i = 0; i < 4; ++i)
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e0a4      	b.n	8000770 <MixColumns+0x158>
   {
      t   = (*state)[i][0];
 8000626:	7bfa      	ldrb	r2, [r7, #15]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800062e:	73bb      	strb	r3, [r7, #14]
      Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	440b      	add	r3, r1
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	4053      	eors	r3, r2
 8000644:	b2da      	uxtb	r2, r3
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	4053      	eors	r3, r2
 8000652:	b2da      	uxtb	r2, r3
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	78db      	ldrb	r3, [r3, #3]
 800065e:	4053      	eors	r3, r2
 8000660:	737b      	strb	r3, [r7, #13]
      Tm  = (*state)[i][0] ^ (*state)[i][1];
 8000662:	7bfa      	ldrb	r2, [r7, #15]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	4053      	eors	r3, r2
 8000676:	733b      	strb	r3, [r7, #12]
      Tm  = xtime(Tm);
 8000678:	7b3b      	ldrb	r3, [r7, #12]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffae 	bl	80005dc <xtime>
 8000680:	4603      	mov	r3, r0
 8000682:	733b      	strb	r3, [r7, #12]
      (*state)[i][0] ^= Tm ^ Tmp;
 8000684:	7bfa      	ldrb	r2, [r7, #15]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800068c:	7b3a      	ldrb	r2, [r7, #12]
 800068e:	7b7b      	ldrb	r3, [r7, #13]
 8000690:	4053      	eors	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	404b      	eors	r3, r1
 8000698:	b2d9      	uxtb	r1, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
      Tm = (*state)[i][1] ^ (*state)[i][2];
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	4053      	eors	r3, r2
 80006b6:	733b      	strb	r3, [r7, #12]
      Tm = xtime(Tm);
 80006b8:	7b3b      	ldrb	r3, [r7, #12]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff8e 	bl	80005dc <xtime>
 80006c0:	4603      	mov	r3, r0
 80006c2:	733b      	strb	r3, [r7, #12]
      (*state)[i][1] ^= Tm ^ Tmp;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	7859      	ldrb	r1, [r3, #1]
 80006ce:	7b3a      	ldrb	r2, [r7, #12]
 80006d0:	7b7b      	ldrb	r3, [r7, #13]
 80006d2:	4053      	eors	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	404a      	eors	r2, r1
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	460a      	mov	r2, r1
 80006e4:	705a      	strb	r2, [r3, #1]
      Tm = (*state)[i][2] ^ (*state)[i][3];
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	789a      	ldrb	r2, [r3, #2]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	4053      	eors	r3, r2
 80006fc:	733b      	strb	r3, [r7, #12]
      Tm = xtime(Tm);
 80006fe:	7b3b      	ldrb	r3, [r7, #12]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff6b 	bl	80005dc <xtime>
 8000706:	4603      	mov	r3, r0
 8000708:	733b      	strb	r3, [r7, #12]
      (*state)[i][2] ^= Tm ^ Tmp;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	7899      	ldrb	r1, [r3, #2]
 8000714:	7b3a      	ldrb	r2, [r7, #12]
 8000716:	7b7b      	ldrb	r3, [r7, #13]
 8000718:	4053      	eors	r3, r2
 800071a:	b2da      	uxtb	r2, r3
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	404a      	eors	r2, r1
 8000720:	b2d1      	uxtb	r1, r2
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	460a      	mov	r2, r1
 800072a:	709a      	strb	r2, [r3, #2]
      Tm = (*state)[i][3] ^ t;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	78da      	ldrb	r2, [r3, #3]
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	4053      	eors	r3, r2
 800073a:	733b      	strb	r3, [r7, #12]
      Tm = xtime(Tm);
 800073c:	7b3b      	ldrb	r3, [r7, #12]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff4c 	bl	80005dc <xtime>
 8000744:	4603      	mov	r3, r0
 8000746:	733b      	strb	r3, [r7, #12]
      (*state)[i][3] ^= Tm ^ Tmp;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	78d9      	ldrb	r1, [r3, #3]
 8000752:	7b3a      	ldrb	r2, [r7, #12]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	4053      	eors	r3, r2
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	404a      	eors	r2, r1
 800075e:	b2d1      	uxtb	r1, r2
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	70da      	strb	r2, [r3, #3]
   for(i = 0; i < 4; ++i)
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	3301      	adds	r3, #1
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	2b03      	cmp	r3, #3
 8000774:	f67f af57 	bls.w	8000626 <MixColumns+0xe>
   }
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t *state)
{
 8000782:	b5b0      	push	{r4, r5, r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t a, b, c, d;
   for(i = 0; i < 4; ++i)
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e33b      	b.n	8000e08 <InvMixColumns+0x686>
   {
      a = (*state)[i][0];
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000798:	72fb      	strb	r3, [r7, #11]
      b = (*state)[i][1];
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	785b      	ldrb	r3, [r3, #1]
 80007a4:	72bb      	strb	r3, [r7, #10]
      c = (*state)[i][2];
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	727b      	strb	r3, [r7, #9]
      d = (*state)[i][3];
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	78db      	ldrb	r3, [r3, #3]
 80007bc:	723b      	strb	r3, [r7, #8]

      (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff0b 	bl	80005dc <xtime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff07 	bl	80005dc <xtime>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff03 	bl	80005dc <xtime>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff feff 	bl	80005dc <xtime>
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fefb 	bl	80005dc <xtime>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fef7 	bl	80005dc <xtime>
 80007ee:	7abb      	ldrb	r3, [r7, #10]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fef3 	bl	80005dc <xtime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff feef 	bl	80005dc <xtime>
 80007fe:	4603      	mov	r3, r0
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff feeb 	bl	80005dc <xtime>
 8000806:	4603      	mov	r3, r0
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee7 	bl	80005dc <xtime>
 800080e:	7a7b      	ldrb	r3, [r7, #9]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fee3 	bl	80005dc <xtime>
 8000816:	7a7b      	ldrb	r3, [r7, #9]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fedf 	bl	80005dc <xtime>
 800081e:	4603      	mov	r3, r0
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fedb 	bl	80005dc <xtime>
 8000826:	4603      	mov	r3, r0
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fed7 	bl	80005dc <xtime>
 800082e:	4603      	mov	r3, r0
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fed3 	bl	80005dc <xtime>
 8000836:	7a3b      	ldrb	r3, [r7, #8]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fecf 	bl	80005dc <xtime>
 800083e:	7a3b      	ldrb	r3, [r7, #8]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fecb 	bl	80005dc <xtime>
 8000846:	4603      	mov	r3, r0
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fec7 	bl	80005dc <xtime>
 800084e:	7a3b      	ldrb	r3, [r7, #8]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fec3 	bl	80005dc <xtime>
 8000856:	4603      	mov	r3, r0
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff febf 	bl	80005dc <xtime>
 800085e:	4603      	mov	r3, r0
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff febb 	bl	80005dc <xtime>
 8000866:	4603      	mov	r3, r0
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff feb7 	bl	80005dc <xtime>
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff feb3 	bl	80005dc <xtime>
 8000876:	4603      	mov	r3, r0
 8000878:	461c      	mov	r4, r3
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fead 	bl	80005dc <xtime>
 8000882:	4603      	mov	r3, r0
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fea9 	bl	80005dc <xtime>
 800088a:	4603      	mov	r3, r0
 800088c:	4063      	eors	r3, r4
 800088e:	b2dc      	uxtb	r4, r3
 8000890:	7afb      	ldrb	r3, [r7, #11]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fea2 	bl	80005dc <xtime>
 8000898:	4603      	mov	r3, r0
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe9e 	bl	80005dc <xtime>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe9a 	bl	80005dc <xtime>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4063      	eors	r3, r4
 80008ac:	b2dc      	uxtb	r4, r3
 80008ae:	7abb      	ldrb	r3, [r7, #10]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe93 	bl	80005dc <xtime>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	7abb      	ldrb	r3, [r7, #10]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2dd      	uxtb	r5, r3
 80008c0:	7abb      	ldrb	r3, [r7, #10]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe8a 	bl	80005dc <xtime>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe86 	bl	80005dc <xtime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe82 	bl	80005dc <xtime>
 80008d8:	4603      	mov	r3, r0
 80008da:	406b      	eors	r3, r5
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4063      	eors	r3, r4
 80008e0:	b2dc      	uxtb	r4, r3
 80008e2:	7a7b      	ldrb	r3, [r7, #9]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe79 	bl	80005dc <xtime>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe75 	bl	80005dc <xtime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	7a7b      	ldrb	r3, [r7, #9]
 80008f8:	4053      	eors	r3, r2
 80008fa:	b2dd      	uxtb	r5, r3
 80008fc:	7a7b      	ldrb	r3, [r7, #9]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe6c 	bl	80005dc <xtime>
 8000904:	4603      	mov	r3, r0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe68 	bl	80005dc <xtime>
 800090c:	4603      	mov	r3, r0
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe64 	bl	80005dc <xtime>
 8000914:	4603      	mov	r3, r0
 8000916:	406b      	eors	r3, r5
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4063      	eors	r3, r4
 800091c:	b2dc      	uxtb	r4, r3
 800091e:	7a3b      	ldrb	r3, [r7, #8]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe5b 	bl	80005dc <xtime>
 8000926:	4603      	mov	r3, r0
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe57 	bl	80005dc <xtime>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe53 	bl	80005dc <xtime>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	7a3b      	ldrb	r3, [r7, #8]
 800093c:	4053      	eors	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4063      	eors	r3, r4
 8000942:	b2d9      	uxtb	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
      (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800094c:	7afb      	ldrb	r3, [r7, #11]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe44 	bl	80005dc <xtime>
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe40 	bl	80005dc <xtime>
 800095c:	4603      	mov	r3, r0
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe3c 	bl	80005dc <xtime>
 8000964:	7afb      	ldrb	r3, [r7, #11]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe38 	bl	80005dc <xtime>
 800096c:	4603      	mov	r3, r0
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fe34 	bl	80005dc <xtime>
 8000974:	4603      	mov	r3, r0
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe30 	bl	80005dc <xtime>
 800097c:	4603      	mov	r3, r0
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe2c 	bl	80005dc <xtime>
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe28 	bl	80005dc <xtime>
 800098c:	4603      	mov	r3, r0
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe24 	bl	80005dc <xtime>
 8000994:	4603      	mov	r3, r0
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe20 	bl	80005dc <xtime>
 800099c:	4603      	mov	r3, r0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe1c 	bl	80005dc <xtime>
 80009a4:	7a7b      	ldrb	r3, [r7, #9]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe18 	bl	80005dc <xtime>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe14 	bl	80005dc <xtime>
 80009b4:	7a7b      	ldrb	r3, [r7, #9]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe10 	bl	80005dc <xtime>
 80009bc:	4603      	mov	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe0c 	bl	80005dc <xtime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fe08 	bl	80005dc <xtime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe04 	bl	80005dc <xtime>
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe00 	bl	80005dc <xtime>
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fdfc 	bl	80005dc <xtime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fdf8 	bl	80005dc <xtime>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fdf4 	bl	80005dc <xtime>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdf0 	bl	80005dc <xtime>
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdec 	bl	80005dc <xtime>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fde8 	bl	80005dc <xtime>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fde4 	bl	80005dc <xtime>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	4053      	eors	r3, r2
 8000a1c:	b2dc      	uxtb	r4, r3
 8000a1e:	7abb      	ldrb	r3, [r7, #10]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fddb 	bl	80005dc <xtime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461d      	mov	r5, r3
 8000a2a:	7abb      	ldrb	r3, [r7, #10]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fdd5 	bl	80005dc <xtime>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fdd1 	bl	80005dc <xtime>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	406b      	eors	r3, r5
 8000a3e:	b2dd      	uxtb	r5, r3
 8000a40:	7abb      	ldrb	r3, [r7, #10]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdca 	bl	80005dc <xtime>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fdc6 	bl	80005dc <xtime>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fdc2 	bl	80005dc <xtime>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	406b      	eors	r3, r5
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4063      	eors	r3, r4
 8000a60:	b2dc      	uxtb	r4, r3
 8000a62:	7a7b      	ldrb	r3, [r7, #9]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdb9 	bl	80005dc <xtime>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	7a7b      	ldrb	r3, [r7, #9]
 8000a70:	4053      	eors	r3, r2
 8000a72:	b2dd      	uxtb	r5, r3
 8000a74:	7a7b      	ldrb	r3, [r7, #9]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdb0 	bl	80005dc <xtime>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdac 	bl	80005dc <xtime>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fda8 	bl	80005dc <xtime>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	406b      	eors	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4063      	eors	r3, r4
 8000a94:	b2dc      	uxtb	r4, r3
 8000a96:	7a3b      	ldrb	r3, [r7, #8]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fd9f 	bl	80005dc <xtime>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fd9b 	bl	80005dc <xtime>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	7a3b      	ldrb	r3, [r7, #8]
 8000aac:	4053      	eors	r3, r2
 8000aae:	b2dd      	uxtb	r5, r3
 8000ab0:	7a3b      	ldrb	r3, [r7, #8]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd92 	bl	80005dc <xtime>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fd8e 	bl	80005dc <xtime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd8a 	bl	80005dc <xtime>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	406b      	eors	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4063      	eors	r3, r4
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	460a      	mov	r2, r1
 8000adc:	705a      	strb	r2, [r3, #1]
      (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000ade:	7afb      	ldrb	r3, [r7, #11]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd7b 	bl	80005dc <xtime>
 8000ae6:	7afb      	ldrb	r3, [r7, #11]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd77 	bl	80005dc <xtime>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fd73 	bl	80005dc <xtime>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd6f 	bl	80005dc <xtime>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fd6b 	bl	80005dc <xtime>
 8000b06:	7abb      	ldrb	r3, [r7, #10]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fd67 	bl	80005dc <xtime>
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fd63 	bl	80005dc <xtime>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd5f 	bl	80005dc <xtime>
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd5b 	bl	80005dc <xtime>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fd57 	bl	80005dc <xtime>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd53 	bl	80005dc <xtime>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd4f 	bl	80005dc <xtime>
 8000b3e:	7a7b      	ldrb	r3, [r7, #9]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd4b 	bl	80005dc <xtime>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fd47 	bl	80005dc <xtime>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd43 	bl	80005dc <xtime>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd3f 	bl	80005dc <xtime>
 8000b5e:	7a3b      	ldrb	r3, [r7, #8]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd3b 	bl	80005dc <xtime>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fd37 	bl	80005dc <xtime>
 8000b6e:	7a3b      	ldrb	r3, [r7, #8]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd33 	bl	80005dc <xtime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fd2f 	bl	80005dc <xtime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd2b 	bl	80005dc <xtime>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd27 	bl	80005dc <xtime>
 8000b8e:	7afb      	ldrb	r3, [r7, #11]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fd23 	bl	80005dc <xtime>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd1f 	bl	80005dc <xtime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	7afb      	ldrb	r3, [r7, #11]
 8000ba4:	4053      	eors	r3, r2
 8000ba6:	b2dc      	uxtb	r4, r3
 8000ba8:	7afb      	ldrb	r3, [r7, #11]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd16 	bl	80005dc <xtime>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd12 	bl	80005dc <xtime>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd0e 	bl	80005dc <xtime>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4063      	eors	r3, r4
 8000bc4:	b2dc      	uxtb	r4, r3
 8000bc6:	7abb      	ldrb	r3, [r7, #10]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd07 	bl	80005dc <xtime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd03 	bl	80005dc <xtime>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fcff 	bl	80005dc <xtime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	7abb      	ldrb	r3, [r7, #10]
 8000be4:	4053      	eors	r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4063      	eors	r3, r4
 8000bea:	b2dc      	uxtb	r4, r3
 8000bec:	7a7b      	ldrb	r3, [r7, #9]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcf4 	bl	80005dc <xtime>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	7a7b      	ldrb	r3, [r7, #9]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fcee 	bl	80005dc <xtime>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fcea 	bl	80005dc <xtime>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	406b      	eors	r3, r5
 8000c0c:	b2dd      	uxtb	r5, r3
 8000c0e:	7a7b      	ldrb	r3, [r7, #9]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fce3 	bl	80005dc <xtime>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fcdf 	bl	80005dc <xtime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fcdb 	bl	80005dc <xtime>
 8000c26:	4603      	mov	r3, r0
 8000c28:	406b      	eors	r3, r5
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4063      	eors	r3, r4
 8000c2e:	b2dc      	uxtb	r4, r3
 8000c30:	7a3b      	ldrb	r3, [r7, #8]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fcd2 	bl	80005dc <xtime>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	7a3b      	ldrb	r3, [r7, #8]
 8000c3e:	4053      	eors	r3, r2
 8000c40:	b2dd      	uxtb	r5, r3
 8000c42:	7a3b      	ldrb	r3, [r7, #8]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcc9 	bl	80005dc <xtime>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fcc5 	bl	80005dc <xtime>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fcc1 	bl	80005dc <xtime>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	406b      	eors	r3, r5
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4063      	eors	r3, r4
 8000c62:	b2d9      	uxtb	r1, r3
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	709a      	strb	r2, [r3, #2]
      (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fcb2 	bl	80005dc <xtime>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fcae 	bl	80005dc <xtime>
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fcaa 	bl	80005dc <xtime>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fca6 	bl	80005dc <xtime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fca2 	bl	80005dc <xtime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fc9e 	bl	80005dc <xtime>
 8000ca0:	7abb      	ldrb	r3, [r7, #10]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc9a 	bl	80005dc <xtime>
 8000ca8:	7abb      	ldrb	r3, [r7, #10]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc96 	bl	80005dc <xtime>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fc92 	bl	80005dc <xtime>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc8e 	bl	80005dc <xtime>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fc8a 	bl	80005dc <xtime>
 8000cc8:	7a7b      	ldrb	r3, [r7, #9]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fc86 	bl	80005dc <xtime>
 8000cd0:	7a7b      	ldrb	r3, [r7, #9]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fc82 	bl	80005dc <xtime>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fc7e 	bl	80005dc <xtime>
 8000ce0:	7a7b      	ldrb	r3, [r7, #9]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc7a 	bl	80005dc <xtime>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc76 	bl	80005dc <xtime>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc72 	bl	80005dc <xtime>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc6e 	bl	80005dc <xtime>
 8000d00:	7a3b      	ldrb	r3, [r7, #8]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc6a 	bl	80005dc <xtime>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fc66 	bl	80005dc <xtime>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fc62 	bl	80005dc <xtime>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc5e 	bl	80005dc <xtime>
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fc5a 	bl	80005dc <xtime>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4053      	eors	r3, r2
 8000d30:	b2dc      	uxtb	r4, r3
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fc51 	bl	80005dc <xtime>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fc4d 	bl	80005dc <xtime>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fc49 	bl	80005dc <xtime>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4063      	eors	r3, r4
 8000d4e:	b2dc      	uxtb	r4, r3
 8000d50:	7abb      	ldrb	r3, [r7, #10]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fc42 	bl	80005dc <xtime>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fc3e 	bl	80005dc <xtime>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	4053      	eors	r3, r2
 8000d68:	b2dd      	uxtb	r5, r3
 8000d6a:	7abb      	ldrb	r3, [r7, #10]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fc35 	bl	80005dc <xtime>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fc31 	bl	80005dc <xtime>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fc2d 	bl	80005dc <xtime>
 8000d82:	4603      	mov	r3, r0
 8000d84:	406b      	eors	r3, r5
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4063      	eors	r3, r4
 8000d8a:	b2dc      	uxtb	r4, r3
 8000d8c:	7a7b      	ldrb	r3, [r7, #9]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fc24 	bl	80005dc <xtime>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fc20 	bl	80005dc <xtime>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc1c 	bl	80005dc <xtime>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	7a7b      	ldrb	r3, [r7, #9]
 8000daa:	4053      	eors	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4063      	eors	r3, r4
 8000db0:	b2dc      	uxtb	r4, r3
 8000db2:	7a3b      	ldrb	r3, [r7, #8]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc11 	bl	80005dc <xtime>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	7a3b      	ldrb	r3, [r7, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fc0b 	bl	80005dc <xtime>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fc07 	bl	80005dc <xtime>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	406b      	eors	r3, r5
 8000dd2:	b2dd      	uxtb	r5, r3
 8000dd4:	7a3b      	ldrb	r3, [r7, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc00 	bl	80005dc <xtime>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fbfc 	bl	80005dc <xtime>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbf8 	bl	80005dc <xtime>
 8000dec:	4603      	mov	r3, r0
 8000dee:	406b      	eors	r3, r5
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4063      	eors	r3, r4
 8000df4:	b2d9      	uxtb	r1, r3
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	460a      	mov	r2, r1
 8000e00:	70da      	strb	r2, [r3, #3]
   for(i = 0; i < 4; ++i)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	f77f acc0 	ble.w	8000790 <InvMixColumns+0xe>
   }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e1c <InvSubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t *state)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
   uint8_t i, j;
   for(i = 0; i < 4; ++i)
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e01d      	b.n	8000e66 <InvSubBytes+0x4a>
   {
      for(j = 0; j < 4; ++j)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73bb      	strb	r3, [r7, #14]
 8000e2e:	e014      	b.n	8000e5a <InvSubBytes+0x3e>
      {
         (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000e30:	7bba      	ldrb	r2, [r7, #14]
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	440a      	add	r2, r1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	7bba      	ldrb	r2, [r7, #14]
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	490d      	ldr	r1, [pc, #52]	; (8000e7c <InvSubBytes+0x60>)
 8000e46:	5c08      	ldrb	r0, [r1, r0]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	440a      	add	r2, r1
 8000e4e:	4413      	add	r3, r2
 8000e50:	4602      	mov	r2, r0
 8000e52:	701a      	strb	r2, [r3, #0]
      for(j = 0; j < 4; ++j)
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73bb      	strb	r3, [r7, #14]
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d9e7      	bls.n	8000e30 <InvSubBytes+0x14>
   for(i = 0; i < 4; ++i)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d9de      	bls.n	8000e2a <InvSubBytes+0xe>
      }
   }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	0800ea54 	.word	0x0800ea54

08000e80 <InvShiftRows>:

static void InvShiftRows(state_t *state)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
   uint8_t temp;

   // Rotate first row 1 columns to right
   temp           = (*state)[3][1];
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7b5b      	ldrb	r3, [r3, #13]
 8000e8c:	73fb      	strb	r3, [r7, #15]
   (*state)[3][1] = (*state)[2][1];
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a5a      	ldrb	r2, [r3, #9]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	735a      	strb	r2, [r3, #13]
   (*state)[2][1] = (*state)[1][1];
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795a      	ldrb	r2, [r3, #5]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	725a      	strb	r2, [r3, #9]
   (*state)[1][1] = (*state)[0][1];
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	785a      	ldrb	r2, [r3, #1]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	715a      	strb	r2, [r3, #5]
   (*state)[0][1] = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	705a      	strb	r2, [r3, #1]

   // Rotate second row 2 columns to right
   temp           = (*state)[0][2];
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	73fb      	strb	r3, [r7, #15]
   (*state)[0][2] = (*state)[2][2];
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7a9a      	ldrb	r2, [r3, #10]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	709a      	strb	r2, [r3, #2]
   (*state)[2][2] = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	729a      	strb	r2, [r3, #10]

   temp           = (*state)[1][2];
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	799b      	ldrb	r3, [r3, #6]
 8000ec4:	73fb      	strb	r3, [r7, #15]
   (*state)[1][2] = (*state)[3][2];
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b9a      	ldrb	r2, [r3, #14]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	719a      	strb	r2, [r3, #6]
   (*state)[3][2] = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	739a      	strb	r2, [r3, #14]

   // Rotate third row 3 columns to right
   temp           = (*state)[0][3];
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	78db      	ldrb	r3, [r3, #3]
 8000ed8:	73fb      	strb	r3, [r7, #15]
   (*state)[0][3] = (*state)[1][3];
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	79da      	ldrb	r2, [r3, #7]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	70da      	strb	r2, [r3, #3]
   (*state)[1][3] = (*state)[2][3];
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7ada      	ldrb	r2, [r3, #11]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	71da      	strb	r2, [r3, #7]
   (*state)[2][3] = (*state)[3][3];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7bda      	ldrb	r2, [r3, #15]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	72da      	strb	r2, [r3, #11]
   (*state)[3][3] = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	73da      	strb	r2, [r3, #15]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t *state, uint8_t *RoundKey)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
   uint8_t round = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]

   // Add the First round key to the state before starting the rounds.
   AddRoundKey(0, state, RoundKey);
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fab0 	bl	800047c <AddRoundKey>

   // There will be Nr rounds.
   // The first Nr-1 rounds are identical.
   // These Nr rounds are executed in the loop below.
   // Last one without MixColumns()
   for(round = 1;; ++round)
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
   {
      SubBytes(state);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fae7 	bl	80004f4 <SubBytes>
      ShiftRows(state);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fb16 	bl	8000558 <ShiftRows>
      if(round == Nr)
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d00c      	beq.n	8000f4c <Cipher+0x48>
      {
         break;
      }
      MixColumns(state);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fb70 	bl	8000618 <MixColumns>
      AddRoundKey(round, state, RoundKey);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa9c 	bl	800047c <AddRoundKey>
   for(round = 1;; ++round)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
      SubBytes(state);
 8000f4a:	e7e9      	b.n	8000f20 <Cipher+0x1c>
         break;
 8000f4c:	bf00      	nop
   }
   // Add round key to last round
   AddRoundKey(Nr, state, RoundKey);
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	200a      	movs	r0, #10
 8000f54:	f7ff fa92 	bl	800047c <AddRoundKey>
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <InvCipher>:

#if(defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t *state, uint8_t *RoundKey)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
   uint8_t round = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]

   // Add the First round key to the state before starting the rounds.
   AddRoundKey(Nr, state, RoundKey);
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	200a      	movs	r0, #10
 8000f74:	f7ff fa82 	bl	800047c <AddRoundKey>

   // There will be Nr rounds.
   // The first Nr-1 rounds are identical.
   // These Nr rounds are executed in the loop below.
   // Last one without InvMixColumn()
   for(round = (Nr - 1);; --round)
 8000f78:	2309      	movs	r3, #9
 8000f7a:	73fb      	strb	r3, [r7, #15]
   {
      InvShiftRows(state);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff7f 	bl	8000e80 <InvShiftRows>
      InvSubBytes(state);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff4a 	bl	8000e1c <InvSubBytes>
      AddRoundKey(round, state, RoundKey);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa74 	bl	800047c <AddRoundKey>
      if(round == 0)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <InvCipher+0x48>
      {
         break;
      }
      InvMixColumns(state);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fbf1 	bl	8000782 <InvMixColumns>
   for(round = (Nr - 1);; --round)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
      InvShiftRows(state);
 8000fa6:	e7e9      	b.n	8000f7c <InvCipher+0x1c>
         break;
 8000fa8:	bf00      	nop
   }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <AES_ECB_encrypt>:
/* Public functions:                                                         */
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)

void AES_ECB_encrypt(AES_ctx *ctx, uint8_t *buf)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
   // The next function call encrypts the PlainText with the Key using AES algorithm.
   Cipher((state_t *)buf, ctx->RoundKey);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f7ff ff9f 	bl	8000f04 <Cipher>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <AES_ECB_decrypt>:

void AES_ECB_decrypt(AES_ctx *ctx, uint8_t *buf)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
   // The next function call decrypts the PlainText with the Key using AES algorithm.
   InvCipher((state_t *)buf, ctx->RoundKey);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f7ff ffbf 	bl	8000f60 <InvCipher>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <BUT_Handle>:
                                                    { BUT_STATE_PRESS, BUT_STATE_IDLE, BUT_EVENT_END_PRESS },
                                                    { BUT_STATE_DEBOUNCE, BUT_STATE_IDLE, BUT_EVENT_ERROR } };
BUTFunction_TypeDef BUTFunctionsTable[]         = { { BUT_IdleFunction }, { BUT_DebounceFunction }, { BUT_PressFunction } };

void BUT_Handle(BUT_TypeDef *Button)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
   BUT_ChangeState(Button);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f881 	bl	80010fc <BUT_ChangeState>
   if(BUTFunctionsTable[Button->State].BUTFunction != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <BUT_Handle+0x38>)
 8001002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <BUT_Handle+0x2e>
   {
      BUTFunctionsTable[Button->State].BUTFunction(Button);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <BUT_Handle+0x38>)
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	4798      	blx	r3
   }
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c

08001028 <BUT_RegisterCallback>:
void BUT_RegisterCallback(BUT_TypeDef *Button, void *Callback)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
   if(Callback != NULL)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <BUT_RegisterCallback+0x16>
   {
      Button->ButtonCallback = Callback;
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	615a      	str	r2, [r3, #20]
   }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <BUT_IdleFunction>:
static void BUT_IdleFunction(BUT_TypeDef *Button)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   if(HAL_GPIO_ReadPin(Button->GPIO, Button->Pin) == GPIO_PIN_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	899b      	ldrh	r3, [r3, #12]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f003 faa7 	bl	80045b0 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <BUT_IdleFunction+0x2a>
   {
      Button->Cnt      = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
      Button->NewEvent = BUT_EVENT_DEBOUNCE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	705a      	strb	r2, [r3, #1]
   }
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <BUT_DebounceFunction>:
static void BUT_DebounceFunction(BUT_TypeDef *Button)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
   Button->Cnt++;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	605a      	str	r2, [r3, #4]
   if(Button->Cnt > BUTTON_DEBOUNCE_TIME)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b05      	cmp	r3, #5
 8001094:	d911      	bls.n	80010ba <BUT_DebounceFunction+0x3e>
   {
      if(HAL_GPIO_ReadPin(Button->GPIO, Button->Pin) == GPIO_PIN_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	899b      	ldrh	r3, [r3, #12]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f003 fa85 	bl	80045b0 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <BUT_DebounceFunction+0x38>
      {
         Button->NewEvent = BUT_EVENT_PRESS;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	705a      	strb	r2, [r3, #1]
      else
      {
         Button->NewEvent = BUT_EVENT_ERROR;
      }
   }
}
 80010b2:	e002      	b.n	80010ba <BUT_DebounceFunction+0x3e>
         Button->NewEvent = BUT_EVENT_ERROR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	705a      	strb	r2, [r3, #1]
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <BUT_PressFunction>:
static void BUT_PressFunction(BUT_TypeDef *Button)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   if(HAL_GPIO_ReadPin(Button->GPIO, Button->Pin) == GPIO_PIN_SET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	899b      	ldrh	r3, [r3, #12]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f003 fa6b 	bl	80045b0 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d109      	bne.n	80010f4 <BUT_PressFunction+0x32>
   {
      if(Button->ButtonCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <BUT_PressFunction+0x2c>
      {
         Button->ButtonCallback();
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4798      	blx	r3
      }
      Button->NewEvent = BUT_EVENT_END_PRESS;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	705a      	strb	r2, [r3, #1]
   }
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <BUT_ChangeState>:
static void BUT_ChangeState(BUT_TypeDef *Button)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
   for(int i = 0; i < BUT_TRANSITION_TABLE_SIZE; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e027      	b.n	800115a <BUT_ChangeState+0x5e>
   {
      if(BUTTransitionTable[i].Source == Button->State && BUTTransitionTable[i].Event == Button->NewEvent)
 800110a:	4919      	ldr	r1, [pc, #100]	; (8001170 <BUT_ChangeState+0x74>)
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	440b      	add	r3, r1
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d119      	bne.n	8001154 <BUT_ChangeState+0x58>
 8001120:	4913      	ldr	r1, [pc, #76]	; (8001170 <BUT_ChangeState+0x74>)
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	440b      	add	r3, r1
 800112c:	3302      	adds	r3, #2
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	429a      	cmp	r2, r3
 8001136:	d10d      	bne.n	8001154 <BUT_ChangeState+0x58>
      {
         Button->State    = BUTTransitionTable[i].Destination;
 8001138:	490d      	ldr	r1, [pc, #52]	; (8001170 <BUT_ChangeState+0x74>)
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	3301      	adds	r3, #1
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	701a      	strb	r2, [r3, #0]
         Button->NewEvent = BUT_EVENT_NOTHING;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	705a      	strb	r2, [r3, #1]
         return;
 8001152:	e008      	b.n	8001166 <BUT_ChangeState+0x6a>
   for(int i = 0; i < BUT_TRANSITION_TABLE_SIZE; i++)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d9d4      	bls.n	800110a <BUT_ChangeState+0xe>
      }
   }
   Button->NewEvent = BUT_EVENT_NOTHING;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	705a      	strb	r2, [r3, #1]
}
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	20000000 	.word	0x20000000

08001174 <ButtonsConfig>:

#include "Data.h"
#include "stdio.h"

void ButtonsConfig(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
   DATA_GetButPtr(BUTTON_UP)->ButtonCallback = NULL;
 8001178:	2000      	movs	r0, #0
 800117a:	f000 f91b 	bl	80013b4 <DATA_GetButPtr>
 800117e:	4603      	mov	r3, r0
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_UP)->Cnt            = 0;
 8001184:	2000      	movs	r0, #0
 8001186:	f000 f915 	bl	80013b4 <DATA_GetButPtr>
 800118a:	4603      	mov	r3, r0
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_UP)->GPIO           = BUTTON_UP_GPIO_Port;
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f90f 	bl	80013b4 <DATA_GetButPtr>
 8001196:	4603      	mov	r3, r0
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <ButtonsConfig+0x170>)
 800119a:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_UP)->NewEvent       = BUT_EVENT_NOTHING;
 800119c:	2000      	movs	r0, #0
 800119e:	f000 f909 	bl	80013b4 <DATA_GetButPtr>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2200      	movs	r2, #0
 80011a6:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_UP)->Pin            = BUTTON_UP_Pin;
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f903 	bl	80013b4 <DATA_GetButPtr>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2208      	movs	r2, #8
 80011b2:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_UP)->State          = BUT_STATE_IDLE;
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f8fd 	bl	80013b4 <DATA_GetButPtr>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_LEFT)->ButtonCallback = NULL;
 80011c0:	2001      	movs	r0, #1
 80011c2:	f000 f8f7 	bl	80013b4 <DATA_GetButPtr>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_LEFT)->Cnt            = 0;
 80011cc:	2001      	movs	r0, #1
 80011ce:	f000 f8f1 	bl	80013b4 <DATA_GetButPtr>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_LEFT)->GPIO           = BUTTON_LEFT_GPIO_Port;
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 f8eb 	bl	80013b4 <DATA_GetButPtr>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a40      	ldr	r2, [pc, #256]	; (80012e4 <ButtonsConfig+0x170>)
 80011e2:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_LEFT)->NewEvent       = BUT_EVENT_NOTHING;
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 f8e5 	bl	80013b4 <DATA_GetButPtr>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_LEFT)->Pin            = BUTTON_LEFT_Pin;
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 f8df 	bl	80013b4 <DATA_GetButPtr>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_LEFT)->State          = BUT_STATE_IDLE;
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 f8d9 	bl	80013b4 <DATA_GetButPtr>
 8001202:	4603      	mov	r3, r0
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_RIGHT)->ButtonCallback = NULL;
 8001208:	2002      	movs	r0, #2
 800120a:	f000 f8d3 	bl	80013b4 <DATA_GetButPtr>
 800120e:	4603      	mov	r3, r0
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_RIGHT)->Cnt            = 0;
 8001214:	2002      	movs	r0, #2
 8001216:	f000 f8cd 	bl	80013b4 <DATA_GetButPtr>
 800121a:	4603      	mov	r3, r0
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_RIGHT)->GPIO           = BUTTON_RIGHT_GPIO_Port;
 8001220:	2002      	movs	r0, #2
 8001222:	f000 f8c7 	bl	80013b4 <DATA_GetButPtr>
 8001226:	4603      	mov	r3, r0
 8001228:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <ButtonsConfig+0x170>)
 800122a:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_RIGHT)->NewEvent       = BUT_EVENT_NOTHING;
 800122c:	2002      	movs	r0, #2
 800122e:	f000 f8c1 	bl	80013b4 <DATA_GetButPtr>
 8001232:	4603      	mov	r3, r0
 8001234:	2200      	movs	r2, #0
 8001236:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_RIGHT)->Pin            = BUTTON_RIGHT_Pin;
 8001238:	2002      	movs	r0, #2
 800123a:	f000 f8bb 	bl	80013b4 <DATA_GetButPtr>
 800123e:	4603      	mov	r3, r0
 8001240:	2210      	movs	r2, #16
 8001242:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_RIGHT)->State          = BUT_STATE_IDLE;
 8001244:	2002      	movs	r0, #2
 8001246:	f000 f8b5 	bl	80013b4 <DATA_GetButPtr>
 800124a:	4603      	mov	r3, r0
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_DOWN)->ButtonCallback = NULL;
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8af 	bl	80013b4 <DATA_GetButPtr>
 8001256:	4603      	mov	r3, r0
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_DOWN)->Cnt            = 0;
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f8a9 	bl	80013b4 <DATA_GetButPtr>
 8001262:	4603      	mov	r3, r0
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_DOWN)->GPIO           = BUTTON_DOWN_GPIO_Port;
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f8a3 	bl	80013b4 <DATA_GetButPtr>
 800126e:	4603      	mov	r3, r0
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <ButtonsConfig+0x170>)
 8001272:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_DOWN)->NewEvent       = BUT_EVENT_NOTHING;
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f89d 	bl	80013b4 <DATA_GetButPtr>
 800127a:	4603      	mov	r3, r0
 800127c:	2200      	movs	r2, #0
 800127e:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_DOWN)->Pin            = BUTTON_DOWN_Pin;
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f897 	bl	80013b4 <DATA_GetButPtr>
 8001286:	4603      	mov	r3, r0
 8001288:	2220      	movs	r2, #32
 800128a:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_DOWN)->State          = BUT_STATE_IDLE;
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f891 	bl	80013b4 <DATA_GetButPtr>
 8001292:	4603      	mov	r3, r0
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]

   DATA_GetButPtr(BUTTON_OK)->ButtonCallback = NULL;
 8001298:	2004      	movs	r0, #4
 800129a:	f000 f88b 	bl	80013b4 <DATA_GetButPtr>
 800129e:	4603      	mov	r3, r0
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
   DATA_GetButPtr(BUTTON_OK)->Cnt            = 0;
 80012a4:	2004      	movs	r0, #4
 80012a6:	f000 f885 	bl	80013b4 <DATA_GetButPtr>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
   DATA_GetButPtr(BUTTON_OK)->GPIO           = BUTTON_OK_GPIO_Port;
 80012b0:	2004      	movs	r0, #4
 80012b2:	f000 f87f 	bl	80013b4 <DATA_GetButPtr>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <ButtonsConfig+0x170>)
 80012ba:	609a      	str	r2, [r3, #8]
   DATA_GetButPtr(BUTTON_OK)->NewEvent       = BUT_EVENT_NOTHING;
 80012bc:	2004      	movs	r0, #4
 80012be:	f000 f879 	bl	80013b4 <DATA_GetButPtr>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	705a      	strb	r2, [r3, #1]
   DATA_GetButPtr(BUTTON_OK)->Pin            = BUTTON_OK_Pin;
 80012c8:	2004      	movs	r0, #4
 80012ca:	f000 f873 	bl	80013b4 <DATA_GetButPtr>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	819a      	strh	r2, [r3, #12]
   DATA_GetButPtr(BUTTON_OK)->State          = BUT_STATE_IDLE;
 80012d4:	2004      	movs	r0, #4
 80012d6:	f000 f86d 	bl	80013b4 <DATA_GetButPtr>
 80012da:	4603      	mov	r3, r0
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	48000400 	.word	0x48000400

080012e8 <Crc>:
 */
#include "crc.h"
#include "main.h"
const uint32_t RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
   uint8_t k = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	77fb      	strb	r3, [r7, #31]
   PreviuseCRC ^= data[0];
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4053      	eors	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e038      	b.n	800137c <Crc+0x94>
   {
      uint32_t temp = data[i];
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]
      if(temp == 0x00000000)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d112      	bne.n	8001340 <Crc+0x58>
      {
         temp = RandomNumber[k % 12];
 800131a:	7ffa      	ldrb	r2, [r7, #31]
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <Crc+0xac>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <Crc+0xb0>)
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	617b      	str	r3, [r7, #20]
         k++;
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	3301      	adds	r3, #1
 800133e:	77fb      	strb	r3, [r7, #31]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4053      	eors	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
      for(uint8_t BitIndex = 0; BitIndex < 32; BitIndex++)
 8001350:	2300      	movs	r3, #0
 8001352:	74fb      	strb	r3, [r7, #19]
 8001354:	e00c      	b.n	8001370 <Crc+0x88>
      {
         if(PreviuseCRC & 0x80000000)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da03      	bge.n	8001364 <Crc+0x7c>
         {
            PreviuseCRC ^= 0x0BC245C2;
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <Crc+0xb4>)
 8001360:	4053      	eors	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
         }
         PreviuseCRC <<= 1;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
      for(uint8_t BitIndex = 0; BitIndex < 32; BitIndex++)
 800136a:	7cfb      	ldrb	r3, [r7, #19]
 800136c:	3301      	adds	r3, #1
 800136e:	74fb      	strb	r3, [r7, #19]
 8001370:	7cfb      	ldrb	r3, [r7, #19]
 8001372:	2b1f      	cmp	r3, #31
 8001374:	d9ef      	bls.n	8001356 <Crc+0x6e>
   for(uint32_t i = 1; i < DataLength; i++)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3301      	adds	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3c2      	bcc.n	800130a <Crc+0x22>
      }
   }
   return PreviuseCRC;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	aaaaaaab 	.word	0xaaaaaaab
 8001398:	0800eb60 	.word	0x0800eb60
 800139c:	0bc245c2 	.word	0x0bc245c2

080013a0 <DATA_GetSmPtr>:
#include "Buttons.h"
#include "SM.h"
SM_TypeDef Sm                    = { 0 };
BUT_TypeDef But[BUTTONS_QUATITY] = { 0 };
SM_TypeDef *DATA_GetSmPtr(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
   return &Sm;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <DATA_GetSmPtr+0x10>)
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	2000021c 	.word	0x2000021c

080013b4 <DATA_GetButPtr>:
BUT_TypeDef *DATA_GetButPtr(uint8_t ButtonNumber)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
   return &But[ButtonNumber];
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <DATA_GetButPtr+0x24>)
 80013ca:	4413      	add	r3, r2
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20000228 	.word	0x20000228

080013dc <ExtFram_CsLow>:
#include "stdio.h"
static const FramDensity_TypeDef FramDensity[] = { { FRAM_DENSITY_16K, 2048 },   { FRAM_DENSITY_64K, 8192 },   { FRAM_DENSITY_128K, 16384 },
                                                   { FRAM_DENSITY_256K, 32768 }, { FRAM_DENSITY_512K, 65536 }, { FRAM_DENSITY_1M, 131072 },
                                                   { FRAM_DENSITY_2M, 262144 },  { FRAM_DENSITY_4M, 524288 },  { FRAM_DENSITY_8M, 1048576 } };
__weak FramStatus_TypeDef ExtFram_CsLow(Fram_TypeDef *Fram)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(Fram->CsPort, Fram->CsPin, 0);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6898      	ldr	r0, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	8a5b      	ldrh	r3, [r3, #18]
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	f003 f8f6 	bl	80045e0 <HAL_GPIO_WritePin>
   return FRAM_OK;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <ExtFram_CsHigh>:
__weak FramStatus_TypeDef ExtFram_CsHigh(Fram_TypeDef *Fram)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(Fram->CsPort, Fram->CsPin, 1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6898      	ldr	r0, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8a5b      	ldrh	r3, [r3, #18]
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	f003 f8e5 	bl	80045e0 <HAL_GPIO_WritePin>
   return FRAM_OK;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <ExtFram_Write>:
__weak FramStatus_TypeDef ExtFram_Write(Fram_TypeDef *Fram, uint8_t *Data, uint32_t Size)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
   if(HAL_SPI_Transmit(Fram->FramSpi, Data, Size, FRAM_MAX_TIMEOUT) == HAL_OK)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	b29a      	uxth	r2, r3
 8001434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	f005 ff17 	bl	800726c <HAL_SPI_Transmit>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <ExtFram_Write+0x28>
   {
      return FRAM_OK;
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <ExtFram_Write+0x2a>
   }
   else
   {
      return FRAM_ERROR;
 8001448:	2300      	movs	r3, #0
   }
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <ExtFram_Read>:
__weak FramStatus_TypeDef ExtFram_Read(Fram_TypeDef *Fram, uint8_t *Data, uint32_t Size)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
   if(HAL_SPI_Receive(Fram->FramSpi, Data, Size, FRAM_MAX_TIMEOUT) == HAL_OK)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	f006 f86c 	bl	8007548 <HAL_SPI_Receive>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <ExtFram_Read+0x28>
   {
      return FRAM_OK;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <ExtFram_Read+0x2a>
   }
   else
   {
      return FRAM_ERROR;
 800147a:	2300      	movs	r3, #0
   }
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <ExtFram_FindDensity>:
static FramStatus_TypeDef ExtFram_FindDensity(Fram_TypeDef *Fram)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
   FramStatus_TypeDef Status = FRAM_ERROR;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
   for(int i = 0; i < FRAM_DENSITY_TABLE_SIZE; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	e017      	b.n	80014c6 <ExtFram_FindDensity+0x42>
   {
      if(Fram->FramID.FramIDBit.Density == FramDensity[i].FramDensityCode)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7e5b      	ldrb	r3, [r3, #25]
 800149a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4619      	mov	r1, r3
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <ExtFram_FindDensity+0x58>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80014aa:	4299      	cmp	r1, r3
 80014ac:	d108      	bne.n	80014c0 <ExtFram_FindDensity+0x3c>
      {
         Fram->FramSize = FramDensity[i].FramDensity;
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <ExtFram_FindDensity+0x58>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	621a      	str	r2, [r3, #32]
         Status         = FRAM_OK;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
   for(int i = 0; i < FRAM_DENSITY_TABLE_SIZE; i++)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3301      	adds	r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d9e4      	bls.n	8001496 <ExtFram_FindDensity+0x12>
      }
   }
   return Status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	0800eb90 	.word	0x0800eb90

080014e0 <ExtFram_ReadID>:
static FramStatus_TypeDef ExtFram_ReadID(Fram_TypeDef *Fram)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
   uint8_t Com, ID[4];
   Com = FRAM_RDID;
 80014e8:	239f      	movs	r3, #159	; 0x9f
 80014ea:	73fb      	strb	r3, [r7, #15]
   if(ExtFram_CsLow(Fram) != FRAM_OK)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff75 	bl	80013dc <ExtFram_CsLow>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d001      	beq.n	80014fc <ExtFram_ReadID+0x1c>
   {
      return FRAM_ERROR;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e038      	b.n	800156e <ExtFram_ReadID+0x8e>
   }
   else if(ExtFram_Write(Fram, &Com, 1) != FRAM_OK)
 80014fc:	f107 030f 	add.w	r3, r7, #15
 8001500:	2201      	movs	r2, #1
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff8b 	bl	8001420 <ExtFram_Write>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d001      	beq.n	8001514 <ExtFram_ReadID+0x34>
   {
      return FRAM_ERROR;
 8001510:	2300      	movs	r3, #0
 8001512:	e02c      	b.n	800156e <ExtFram_ReadID+0x8e>
   }
   else if(ExtFram_Read(Fram, ID, 4) != FRAM_OK)
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff98 	bl	8001452 <ExtFram_Read>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d001      	beq.n	800152c <ExtFram_ReadID+0x4c>
   {
      return FRAM_ERROR;
 8001528:	2300      	movs	r3, #0
 800152a:	e020      	b.n	800156e <ExtFram_ReadID+0x8e>
   }
   else if(ExtFram_CsHigh(Fram) != FRAM_OK)
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff66 	bl	80013fe <ExtFram_CsHigh>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	d001      	beq.n	800153c <ExtFram_ReadID+0x5c>
   {
      return FRAM_ERROR;
 8001538:	2300      	movs	r3, #0
 800153a:	e018      	b.n	800156e <ExtFram_ReadID+0x8e>
   }
   Fram->FramID.FramIDWord = ((ID[0] << 24) | (ID[1] << 16) | (ID[2] << 8) | ID[3]);
 800153c:	7a3b      	ldrb	r3, [r7, #8]
 800153e:	061a      	lsls	r2, r3, #24
 8001540:	7a7b      	ldrb	r3, [r7, #9]
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	431a      	orrs	r2, r3
 8001546:	7abb      	ldrb	r3, [r7, #10]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	4313      	orrs	r3, r2
 800154c:	7afa      	ldrb	r2, [r7, #11]
 800154e:	4313      	orrs	r3, r2
 8001550:	461a      	mov	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
   if(Fram->FramID.FramIDWord == 0 || Fram->FramID.FramIDWord == 0xFFFFFFFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <ExtFram_ReadID+0x88>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d101      	bne.n	800156c <ExtFram_ReadID+0x8c>
   {
      return FRAM_ERROR;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <ExtFram_ReadID+0x8e>
   }
   else
   {
      return FRAM_OK;
 800156c:	2301      	movs	r3, #1
   }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <ExtFram_SetWELBit>:
static FramStatus_TypeDef ExtFram_SetWELBit(Fram_TypeDef *Fram)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   uint8_t Com = FRAM_WREN;
 800157e:	2306      	movs	r3, #6
 8001580:	73fb      	strb	r3, [r7, #15]
   if(ExtFram_CsLow(Fram) != FRAM_OK)
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff2a 	bl	80013dc <ExtFram_CsLow>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <ExtFram_SetWELBit+0x1c>
   {
      return FRAM_ERROR;
 800158e:	2300      	movs	r3, #0
 8001590:	e017      	b.n	80015c2 <ExtFram_SetWELBit+0x4c>
   }
   else if(ExtFram_Write(Fram, &Com, 1) != FRAM_OK)
 8001592:	f107 030f 	add.w	r3, r7, #15
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff40 	bl	8001420 <ExtFram_Write>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <ExtFram_SetWELBit+0x34>
   {
      return FRAM_ERROR;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e00b      	b.n	80015c2 <ExtFram_SetWELBit+0x4c>
   }
   else if(ExtFram_CsHigh(Fram) != FRAM_OK)
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff27 	bl	80013fe <ExtFram_CsHigh>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <ExtFram_SetWELBit+0x44>
   {
      return FRAM_ERROR;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e003      	b.n	80015c2 <ExtFram_SetWELBit+0x4c>
   }
   HAL_Delay(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f002 f986 	bl	80038cc <HAL_Delay>
   return FRAM_OK;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <ExtFram_SetProtectedBlocs>:
FramStatus_TypeDef ExtFram_SetProtectedBlocs(Fram_TypeDef *Fram, uint8_t Blocs)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
   if(Blocs > 3)
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d901      	bls.n	80015e0 <ExtFram_SetProtectedBlocs+0x16>
   {
      Blocs = 3;
 80015dc:	2303      	movs	r3, #3
 80015de:	70fb      	strb	r3, [r7, #3]
   }
   uint8_t Data[2];
   Data[0] = FRAM_WRSR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	733b      	strb	r3, [r7, #12]
   Data[1] = (Blocs << 2);
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	737b      	strb	r3, [r7, #13]
   if(ExtFram_SetWELBit(Fram) != FRAM_OK)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffc2 	bl	8001576 <ExtFram_SetWELBit>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d001      	beq.n	80015fc <ExtFram_SetProtectedBlocs+0x32>
   {
      return FRAM_ERROR;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e01c      	b.n	8001636 <ExtFram_SetProtectedBlocs+0x6c>
   }
   else if(ExtFram_CsLow(Fram) != FRAM_OK)
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff feed 	bl	80013dc <ExtFram_CsLow>
 8001602:	4603      	mov	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d001      	beq.n	800160c <ExtFram_SetProtectedBlocs+0x42>
   {
      return FRAM_ERROR;
 8001608:	2300      	movs	r3, #0
 800160a:	e014      	b.n	8001636 <ExtFram_SetProtectedBlocs+0x6c>
   }
   else if(ExtFram_Write(Fram, Data, 2) != FRAM_OK)
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2202      	movs	r2, #2
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff03 	bl	8001420 <ExtFram_Write>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d001      	beq.n	8001624 <ExtFram_SetProtectedBlocs+0x5a>
   {
      return FRAM_ERROR;
 8001620:	2300      	movs	r3, #0
 8001622:	e008      	b.n	8001636 <ExtFram_SetProtectedBlocs+0x6c>
   }
   else if(ExtFram_CsHigh(Fram) != FRAM_OK)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff feea 	bl	80013fe <ExtFram_CsHigh>
 800162a:	4603      	mov	r3, r0
 800162c:	2b01      	cmp	r3, #1
 800162e:	d001      	beq.n	8001634 <ExtFram_SetProtectedBlocs+0x6a>
   {
      return FRAM_ERROR;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <ExtFram_SetProtectedBlocs+0x6c>
   }
   return FRAM_OK;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <ExtFram_ReadSreg>:
static FramStatus_TypeDef ExtFram_ReadSreg(Fram_TypeDef *Fram)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
   uint8_t Com = FRAM_RDSR;
 8001646:	2305      	movs	r3, #5
 8001648:	73fb      	strb	r3, [r7, #15]
   if(ExtFram_CsLow(Fram) != FRAM_OK)
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fec6 	bl	80013dc <ExtFram_CsLow>
 8001650:	4603      	mov	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <ExtFram_ReadSreg+0x1c>
   {
      return FRAM_ERROR;
 8001656:	2300      	movs	r3, #0
 8001658:	e020      	b.n	800169c <ExtFram_ReadSreg+0x5e>
   }
   else if(ExtFram_Write(Fram, &Com, 1) != FRAM_OK)
 800165a:	f107 030f 	add.w	r3, r7, #15
 800165e:	2201      	movs	r2, #1
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fedc 	bl	8001420 <ExtFram_Write>
 8001668:	4603      	mov	r3, r0
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <ExtFram_ReadSreg+0x34>
   {
      return FRAM_ERROR;
 800166e:	2300      	movs	r3, #0
 8001670:	e014      	b.n	800169c <ExtFram_ReadSreg+0x5e>
   }
   else if(ExtFram_Read(Fram, &Fram->Sreg.FramSregWord, 1) != FRAM_OK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3316      	adds	r3, #22
 8001676:	2201      	movs	r2, #1
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fee9 	bl	8001452 <ExtFram_Read>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <ExtFram_ReadSreg+0x4c>
   {
      return FRAM_ERROR;
 8001686:	2300      	movs	r3, #0
 8001688:	e008      	b.n	800169c <ExtFram_ReadSreg+0x5e>
   }
   else if(ExtFram_CsHigh(Fram) != FRAM_OK)
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff feb7 	bl	80013fe <ExtFram_CsHigh>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <ExtFram_ReadSreg+0x5c>
   {
      return FRAM_ERROR;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <ExtFram_ReadSreg+0x5e>
   }
   else
   {
      return FRAM_OK;
 800169a:	2301      	movs	r3, #1
   }
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <ExtFram_WriteData>:
FramStatus_TypeDef ExtFram_WriteData(Fram_TypeDef *Fram, uint32_t Addr, uint8_t *Data, uint32_t Size)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
   uint8_t Com[4]         = { 0 };
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
   static uint8_t SizeCom = 0;
   if(Fram->FramSize < (Addr + Size))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	440b      	add	r3, r1
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d201      	bcs.n	80016c8 <ExtFram_WriteData+0x24>
   {
      return FRAM_ERROR;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e04c      	b.n	8001762 <ExtFram_WriteData+0xbe>
   }
   else if(Fram->FramSize > FRAM_ADDRES_SIZE_16B)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d90c      	bls.n	80016ec <ExtFram_WriteData+0x48>
   {
      Com[0]  = FRAM_WRITE;
 80016d2:	2302      	movs	r3, #2
 80016d4:	753b      	strb	r3, [r7, #20]
      Com[1]  = (Addr & 0xFF) >> 16;
 80016d6:	2300      	movs	r3, #0
 80016d8:	757b      	strb	r3, [r7, #21]
      Com[2]  = (Addr & 0xFF) >> 8;
 80016da:	2300      	movs	r3, #0
 80016dc:	75bb      	strb	r3, [r7, #22]
      Com[3]  = (Addr & 0xFF) >> 0;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	75fb      	strb	r3, [r7, #23]
      SizeCom = 4;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <ExtFram_WriteData+0xc8>)
 80016e6:	2204      	movs	r2, #4
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	e009      	b.n	8001700 <ExtFram_WriteData+0x5c>
   }
   else
   {
      Com[0]  = FRAM_WRITE;
 80016ec:	2302      	movs	r3, #2
 80016ee:	753b      	strb	r3, [r7, #20]
      Com[1]  = (Addr & 0xFF) >> 8;
 80016f0:	2300      	movs	r3, #0
 80016f2:	757b      	strb	r3, [r7, #21]
      Com[2]  = (Addr & 0xFF) >> 0;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	75bb      	strb	r3, [r7, #22]
      SizeCom = 3;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <ExtFram_WriteData+0xc8>)
 80016fc:	2203      	movs	r2, #3
 80016fe:	701a      	strb	r2, [r3, #0]
   }
   if(ExtFram_SetWELBit(Fram) != FRAM_OK)
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff ff38 	bl	8001576 <ExtFram_SetWELBit>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d001      	beq.n	8001710 <ExtFram_WriteData+0x6c>
   {
      return FRAM_ERROR;
 800170c:	2300      	movs	r3, #0
 800170e:	e028      	b.n	8001762 <ExtFram_WriteData+0xbe>
   }
   else if(ExtFram_CsLow(Fram) != FRAM_OK)
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f7ff fe63 	bl	80013dc <ExtFram_CsLow>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d001      	beq.n	8001720 <ExtFram_WriteData+0x7c>
   {
      return FRAM_ERROR;
 800171c:	2300      	movs	r3, #0
 800171e:	e020      	b.n	8001762 <ExtFram_WriteData+0xbe>
   }
   else if(ExtFram_Write(Fram, Com, SizeCom) != FRAM_OK)
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <ExtFram_WriteData+0xc8>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fe77 	bl	8001420 <ExtFram_Write>
 8001732:	4603      	mov	r3, r0
 8001734:	2b01      	cmp	r3, #1
 8001736:	d001      	beq.n	800173c <ExtFram_WriteData+0x98>
   {
      return FRAM_ERROR;
 8001738:	2300      	movs	r3, #0
 800173a:	e012      	b.n	8001762 <ExtFram_WriteData+0xbe>
   }
   else if(ExtFram_Write(Fram, Data, Size) != FRAM_OK)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fe6d 	bl	8001420 <ExtFram_Write>
 8001746:	4603      	mov	r3, r0
 8001748:	2b01      	cmp	r3, #1
 800174a:	d001      	beq.n	8001750 <ExtFram_WriteData+0xac>
   {
      return FRAM_ERROR;
 800174c:	2300      	movs	r3, #0
 800174e:	e008      	b.n	8001762 <ExtFram_WriteData+0xbe>
   }
   else if(ExtFram_CsHigh(Fram) != FRAM_OK)
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff fe54 	bl	80013fe <ExtFram_CsHigh>
 8001756:	4603      	mov	r3, r0
 8001758:	2b01      	cmp	r3, #1
 800175a:	d001      	beq.n	8001760 <ExtFram_WriteData+0xbc>
   {
      return FRAM_ERROR;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <ExtFram_WriteData+0xbe>
   }
   else
   {
      return FRAM_OK;
 8001760:	2301      	movs	r3, #1
   }
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200002a0 	.word	0x200002a0

08001770 <ExtFram_ReadData>:
FramStatus_TypeDef ExtFram_ReadData(Fram_TypeDef *Fram, uint32_t Addr, uint8_t *Data, uint32_t Size)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
   uint8_t Com[4]         = { 0 };
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
   static uint8_t SizeCom = 0;
   if(Fram->FramSize < (Addr + Size))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	440b      	add	r3, r1
 800178c:	429a      	cmp	r2, r3
 800178e:	d201      	bcs.n	8001794 <ExtFram_ReadData+0x24>
   {
      return FRAM_ERROR;
 8001790:	2300      	movs	r3, #0
 8001792:	e04c      	b.n	800182e <ExtFram_ReadData+0xbe>
   }
   else if(Fram->FramSize > FRAM_ADDRES_SIZE_16B)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d90c      	bls.n	80017b8 <ExtFram_ReadData+0x48>
   {
      Com[0]  = FRAM_READ;
 800179e:	2303      	movs	r3, #3
 80017a0:	753b      	strb	r3, [r7, #20]
      Com[1]  = (Addr & 0xFF) >> 16;
 80017a2:	2300      	movs	r3, #0
 80017a4:	757b      	strb	r3, [r7, #21]
      Com[2]  = (Addr & 0xFF) >> 8;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75bb      	strb	r3, [r7, #22]
      Com[3]  = (Addr & 0xFF) >> 0;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	75fb      	strb	r3, [r7, #23]
      SizeCom = 4;
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <ExtFram_ReadData+0xc8>)
 80017b2:	2204      	movs	r2, #4
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e009      	b.n	80017cc <ExtFram_ReadData+0x5c>
   }
   else
   {
      Com[0]  = FRAM_READ;
 80017b8:	2303      	movs	r3, #3
 80017ba:	753b      	strb	r3, [r7, #20]
      Com[1]  = (Addr & 0xFF) >> 8;
 80017bc:	2300      	movs	r3, #0
 80017be:	757b      	strb	r3, [r7, #21]
      Com[2]  = (Addr & 0xFF) >> 0;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	75bb      	strb	r3, [r7, #22]
      SizeCom = 3;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <ExtFram_ReadData+0xc8>)
 80017c8:	2203      	movs	r2, #3
 80017ca:	701a      	strb	r2, [r3, #0]
   }
   if(ExtFram_SetWELBit(Fram) != FRAM_OK)
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff fed2 	bl	8001576 <ExtFram_SetWELBit>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d001      	beq.n	80017dc <ExtFram_ReadData+0x6c>
   {
      return FRAM_ERROR;
 80017d8:	2300      	movs	r3, #0
 80017da:	e028      	b.n	800182e <ExtFram_ReadData+0xbe>
   }
   else if(ExtFram_CsLow(Fram) != FRAM_OK)
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fdfd 	bl	80013dc <ExtFram_CsLow>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d001      	beq.n	80017ec <ExtFram_ReadData+0x7c>
   {
      return FRAM_ERROR;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e020      	b.n	800182e <ExtFram_ReadData+0xbe>
   }
   else if(ExtFram_Write(Fram, Com, SizeCom) != FRAM_OK)
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <ExtFram_ReadData+0xc8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fe11 	bl	8001420 <ExtFram_Write>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	d001      	beq.n	8001808 <ExtFram_ReadData+0x98>
   {
      return FRAM_ERROR;
 8001804:	2300      	movs	r3, #0
 8001806:	e012      	b.n	800182e <ExtFram_ReadData+0xbe>
   }
   else if(ExtFram_Read(Fram, Data, Size) != FRAM_OK)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff fe20 	bl	8001452 <ExtFram_Read>
 8001812:	4603      	mov	r3, r0
 8001814:	2b01      	cmp	r3, #1
 8001816:	d001      	beq.n	800181c <ExtFram_ReadData+0xac>
   {
      return FRAM_ERROR;
 8001818:	2300      	movs	r3, #0
 800181a:	e008      	b.n	800182e <ExtFram_ReadData+0xbe>
   }
   else if(ExtFram_CsHigh(Fram) != FRAM_OK)
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff fdee 	bl	80013fe <ExtFram_CsHigh>
 8001822:	4603      	mov	r3, r0
 8001824:	2b01      	cmp	r3, #1
 8001826:	d001      	beq.n	800182c <ExtFram_ReadData+0xbc>
   {
      return FRAM_ERROR;
 8001828:	2300      	movs	r3, #0
 800182a:	e000      	b.n	800182e <ExtFram_ReadData+0xbe>
   }
   else
   {
      return FRAM_OK;
 800182c:	2301      	movs	r3, #1
   }
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200002a1 	.word	0x200002a1

0800183c <ExtFram_Write32>:
FramStatus_TypeDef ExtFram_Write32(Fram_TypeDef *Fram, uint16_t Addr, uint32_t Data)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	460b      	mov	r3, r1
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	817b      	strh	r3, [r7, #10]
   uint8_t Temp[4];
   Temp[0] = ((Data >> 24) & 0xff);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0e1b      	lsrs	r3, r3, #24
 800184e:	b2db      	uxtb	r3, r3
 8001850:	753b      	strb	r3, [r7, #20]
   Temp[1] = ((Data >> 16) & 0xff);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	b2db      	uxtb	r3, r3
 8001858:	757b      	strb	r3, [r7, #21]
   Temp[2] = ((Data >> 8) & 0xff);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	b2db      	uxtb	r3, r3
 8001860:	75bb      	strb	r3, [r7, #22]
   Temp[3] = ((Data >> 0) & 0xff);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	75fb      	strb	r3, [r7, #23]
   return ExtFram_WriteData(Fram, Addr, Temp, 4);
 8001868:	8979      	ldrh	r1, [r7, #10]
 800186a:	f107 0214 	add.w	r2, r7, #20
 800186e:	2304      	movs	r3, #4
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff ff17 	bl	80016a4 <ExtFram_WriteData>
 8001876:	4603      	mov	r3, r0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <ExtFram_Read32>:
FramStatus_TypeDef ExtFram_Read32(Fram_TypeDef *Fram, uint16_t Addr, uint32_t *Data)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	460b      	mov	r3, r1
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	817b      	strh	r3, [r7, #10]
   uint8_t Temp[4];
   if(ExtFram_ReadData(Fram, Addr, Temp, 4) == FRAM_OK)
 800188e:	8979      	ldrh	r1, [r7, #10]
 8001890:	f107 0214 	add.w	r2, r7, #20
 8001894:	2304      	movs	r3, #4
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f7ff ff6a 	bl	8001770 <ExtFram_ReadData>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10e      	bne.n	80018c0 <ExtFram_Read32+0x40>
   {
      *Data = ((Temp[0] << 24) | (Temp[1] << 16) | (Temp[2] << 8) | Temp[3]);
 80018a2:	7d3b      	ldrb	r3, [r7, #20]
 80018a4:	061a      	lsls	r2, r3, #24
 80018a6:	7d7b      	ldrb	r3, [r7, #21]
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	7dbb      	ldrb	r3, [r7, #22]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	4313      	orrs	r3, r2
 80018b2:	7dfa      	ldrb	r2, [r7, #23]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	601a      	str	r2, [r3, #0]
      return FRAM_OK;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <ExtFram_Read32+0x42>
   }
   return FRAM_ERROR;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <ExtFram_Increment32>:
FramStatus_TypeDef ExtFram_Increment32(Fram_TypeDef *Fram, uint32_t Addr)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
   uint32_t Temp = 0, Confirm = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
   if(ExtFram_Read32(Fram, Addr, &Temp) == FRAM_OK)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f107 020c 	add.w	r2, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffca 	bl	8001880 <ExtFram_Read32>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d123      	bne.n	800193a <ExtFram_Increment32+0x70>
   {
      Temp++;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
      if(ExtFram_Write32(Fram, Addr, Temp) == FRAM_OK)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff9b 	bl	800183c <ExtFram_Write32>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d114      	bne.n	8001936 <ExtFram_Increment32+0x6c>
      {
         if(ExtFram_Read32(Fram, Addr, &Confirm) == FRAM_OK)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	f107 0208 	add.w	r2, r7, #8
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffb2 	bl	8001880 <ExtFram_Read32>
 800191c:	4603      	mov	r3, r0
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <ExtFram_Increment32+0x68>
         {
            if(Temp == Confirm)
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	429a      	cmp	r2, r3
 8001928:	d101      	bne.n	800192e <ExtFram_Increment32+0x64>
            {
               return FRAM_OK;
 800192a:	2301      	movs	r3, #1
 800192c:	e006      	b.n	800193c <ExtFram_Increment32+0x72>
            }
            else
            {
               return FRAM_ERROR;
 800192e:	2300      	movs	r3, #0
 8001930:	e004      	b.n	800193c <ExtFram_Increment32+0x72>
            }
         }
         else
         {
            return FRAM_ERROR;
 8001932:	2300      	movs	r3, #0
 8001934:	e002      	b.n	800193c <ExtFram_Increment32+0x72>
         }
      }
      else
      {
         return FRAM_ERROR;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <ExtFram_Increment32+0x72>
      }
   }
   else
   {
      return FRAM_ERROR;
 800193a:	2300      	movs	r3, #0
   }
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <ExtFram_Init>:
   }
   return FRAM_OK;
}
FramStatus_TypeDef ExtFram_Init(Fram_TypeDef *Fram, SPI_HandleTypeDef *Spi, GPIO_TypeDef *HoldPort, GPIO_TypeDef *CsPort, GPIO_TypeDef *WpPort,
                                uint16_t HoldPin, uint16_t CsPin, uint16_t WpPin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
   Fram->FramInitStatus = FRAM_ERROR;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
   Fram->FramSpi        = Spi;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	601a      	str	r2, [r3, #0]
   Fram->HoldPort       = HoldPort;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	605a      	str	r2, [r3, #4]
   Fram->HoldPin        = HoldPin;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8bba      	ldrh	r2, [r7, #28]
 8001968:	821a      	strh	r2, [r3, #16]
   Fram->CsPort         = CsPort;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	609a      	str	r2, [r3, #8]
   Fram->CsPin          = CsPin;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8c3a      	ldrh	r2, [r7, #32]
 8001974:	825a      	strh	r2, [r3, #18]
   Fram->WpPort         = WpPort;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
   Fram->WpPin          = WpPin;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001980:	829a      	strh	r2, [r3, #20]
   if(Fram->HoldPort != NULL)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <ExtFram_Init+0x56>
   {
      HAL_GPIO_WritePin(Fram->HoldPort, Fram->HoldPin, 1);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6858      	ldr	r0, [r3, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8a1b      	ldrh	r3, [r3, #16]
 8001992:	2201      	movs	r2, #1
 8001994:	4619      	mov	r1, r3
 8001996:	f002 fe23 	bl	80045e0 <HAL_GPIO_WritePin>
   }
   if(Fram->WpPort != NULL)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <ExtFram_Init+0x6e>
   {
      HAL_GPIO_WritePin(Fram->WpPort, Fram->WpPin, 1);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68d8      	ldr	r0, [r3, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8a9b      	ldrh	r3, [r3, #20]
 80019aa:	2201      	movs	r2, #1
 80019ac:	4619      	mov	r1, r3
 80019ae:	f002 fe17 	bl	80045e0 <HAL_GPIO_WritePin>
   }
   if(ExtFram_SetProtectedBlocs(Fram, 0) != FRAM_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff fe08 	bl	80015ca <ExtFram_SetProtectedBlocs>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d001      	beq.n	80019c4 <ExtFram_Init+0x80>
   {
      return FRAM_ERROR;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e01b      	b.n	80019fc <ExtFram_Init+0xb8>
   }
   else if(ExtFram_ReadSreg(Fram) != FRAM_OK)
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fe3a 	bl	800163e <ExtFram_ReadSreg>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d001      	beq.n	80019d4 <ExtFram_Init+0x90>
   {
      return FRAM_OK;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e013      	b.n	80019fc <ExtFram_Init+0xb8>
   }
   else if(ExtFram_ReadID(Fram) != FRAM_OK)
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fd83 	bl	80014e0 <ExtFram_ReadID>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d001      	beq.n	80019e4 <ExtFram_Init+0xa0>
   {
      return FRAM_ERROR;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e00b      	b.n	80019fc <ExtFram_Init+0xb8>
   }
   else if(ExtFram_FindDensity(Fram) != FRAM_OK)
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fd4d 	bl	8001484 <ExtFram_FindDensity>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d001      	beq.n	80019f4 <ExtFram_Init+0xb0>
   {
      return FRAM_ERROR;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e003      	b.n	80019fc <ExtFram_Init+0xb8>
   }
   else
   {
      Fram->FramInitStatus = FRAM_OK;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	771a      	strb	r2, [r3, #28]
      return FRAM_OK;
 80019fa:	2301      	movs	r3, #1
   }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <LED_BlinkPoll>:
#include "tim.h"
#include "Supp.h"
#include "SM.h"
#include "WS2812b.h"
void LED_BlinkPoll(uint8_t R, uint8_t G, uint8_t B, uint32_t Quatity, uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	460b      	mov	r3, r1
 8001a12:	71bb      	strb	r3, [r7, #6]
 8001a14:	4613      	mov	r3, r2
 8001a16:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<Quatity;i++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e013      	b.n	8001a46 <LED_BlinkPoll+0x42>
	{
		WS2812_SetPixel(R, G, B);
 8001a1e:	797a      	ldrb	r2, [r7, #5]
 8001a20:	79b9      	ldrb	r1, [r7, #6]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fe95 	bl	8002754 <WS2812_SetPixel>
		HAL_Delay(Delay);
 8001a2a:	69b8      	ldr	r0, [r7, #24]
 8001a2c:	f001 ff4e 	bl	80038cc <HAL_Delay>
		WS2812_SetPixel(0, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 fe8d 	bl	8002754 <WS2812_SetPixel>
		HAL_Delay(Delay);
 8001a3a:	69b8      	ldr	r0, [r7, #24]
 8001a3c:	f001 ff46 	bl	80038cc <HAL_Delay>
	for(int i=0;i<Quatity;i++)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d8e7      	bhi.n	8001a1e <LED_BlinkPoll+0x1a>
	}
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <SM_Handle>:
flash_t Flash                                 = { 0 };
Fram_TypeDef Fram                             = { 0 };
extern USBD_HandleTypeDef hUsbDeviceFS;
extern uint8_t UsbHidKeyboardReportBuffer[8];
void SM_Handle(void)
{
 8001a58:	b598      	push	{r3, r4, r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - DATA_GetSmPtr()->LastTick > 10)
 8001a5c:	f001 ff2a 	bl	80038b4 <HAL_GetTick>
 8001a60:	4604      	mov	r4, r0
 8001a62:	f7ff fc9d 	bl	80013a0 <DATA_GetSmPtr>
 8001a66:	4603      	mov	r3, r0
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	1ae3      	subs	r3, r4, r3
 8001a6c:	2b0a      	cmp	r3, #10
 8001a6e:	d91b      	bls.n	8001aa8 <SM_Handle+0x50>
   {
      SM_ChangeState();
 8001a70:	f000 f8b2 	bl	8001bd8 <SM_ChangeState>
      DATA_GetSmPtr()->LastTick = HAL_GetTick();
 8001a74:	f7ff fc94 	bl	80013a0 <DATA_GetSmPtr>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	f001 ff1b 	bl	80038b4 <HAL_GetTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60a3      	str	r3, [r4, #8]
      if(SMFunctionsTable[DATA_GetSmPtr()->State].SMFunction != NULL)
 8001a82:	f7ff fc8d 	bl	80013a0 <DATA_GetSmPtr>
 8001a86:	4603      	mov	r3, r0
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <SM_Handle+0x54>)
 8001a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <SM_Handle+0x50>
      {
         SMFunctionsTable[DATA_GetSmPtr()->State].SMFunction();
 8001a96:	f7ff fc83 	bl	80013a0 <DATA_GetSmPtr>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <SM_Handle+0x54>)
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	4798      	blx	r3
      }
   }
}
 8001aa8:	bf00      	nop
 8001aaa:	bd98      	pop	{r3, r4, r7, pc}
 8001aac:	20000024 	.word	0x20000024

08001ab0 <SM_InitializeFunction>:
void SM_InitializeFunction(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af04      	add	r7, sp, #16
   ssd1331_init(&hspi1);
 8001ab6:	482d      	ldr	r0, [pc, #180]	; (8001b6c <SM_InitializeFunction+0xbc>)
 8001ab8:	f000 fa38 	bl	8001f2c <ssd1331_init>
   GFX_SetFont(font_8x5);
 8001abc:	482c      	ldr	r0, [pc, #176]	; (8001b70 <SM_InitializeFunction+0xc0>)
 8001abe:	f000 ff9b 	bl	80029f8 <GFX_SetFont>
   ButtonsConfig();
 8001ac2:	f7ff fb57 	bl	8001174 <ButtonsConfig>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_UP), BUT_ButtonUpCallback);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fc74 	bl	80013b4 <DATA_GetButPtr>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4929      	ldr	r1, [pc, #164]	; (8001b74 <SM_InitializeFunction+0xc4>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff faa9 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_RIGHT), BUT_ButtonRightCallback);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f7ff fc6c 	bl	80013b4 <DATA_GetButPtr>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4926      	ldr	r1, [pc, #152]	; (8001b78 <SM_InitializeFunction+0xc8>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff faa1 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_LEFT), BUT_ButtonLeftCallback);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff fc64 	bl	80013b4 <DATA_GetButPtr>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4923      	ldr	r1, [pc, #140]	; (8001b7c <SM_InitializeFunction+0xcc>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fa99 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_DOWN), BUT_ButtonDownCallback);
 8001af6:	2003      	movs	r0, #3
 8001af8:	f7ff fc5c 	bl	80013b4 <DATA_GetButPtr>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4920      	ldr	r1, [pc, #128]	; (8001b80 <SM_InitializeFunction+0xd0>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fa91 	bl	8001028 <BUT_RegisterCallback>
   BUT_RegisterCallback(DATA_GetButPtr(BUTTON_OK), BUT_ButtonOkCallback);
 8001b06:	2004      	movs	r0, #4
 8001b08:	f7ff fc54 	bl	80013b4 <DATA_GetButPtr>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	491d      	ldr	r1, [pc, #116]	; (8001b84 <SM_InitializeFunction+0xd4>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fa89 	bl	8001028 <BUT_RegisterCallback>
   flash_Init(&Flash, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS);
 8001b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b1e:	4913      	ldr	r1, [pc, #76]	; (8001b6c <SM_InitializeFunction+0xbc>)
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <SM_InitializeFunction+0xd8>)
 8001b22:	f001 f9e9 	bl	8002ef8 <flash_Init>
   ExtFram_Init(&Fram, &hspi1, NULL, FRAM_CS_GPIO_Port, NULL, 0, FRAM_CS_Pin, 0);
 8001b26:	2300      	movs	r3, #0
 8001b28:	9303      	str	r3, [sp, #12]
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	2300      	movs	r3, #0
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <SM_InitializeFunction+0xbc>)
 8001b40:	4812      	ldr	r0, [pc, #72]	; (8001b8c <SM_InitializeFunction+0xdc>)
 8001b42:	f7ff feff 	bl	8001944 <ExtFram_Init>
   SUPP_AES_Init();
 8001b46:	f000 fc03 	bl	8002350 <SUPP_AES_Init>
   LED_BlinkPoll(10, 150, 15, 5, 100);
 8001b4a:	2364      	movs	r3, #100	; 0x64
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2305      	movs	r3, #5
 8001b50:	220f      	movs	r2, #15
 8001b52:	2196      	movs	r1, #150	; 0x96
 8001b54:	200a      	movs	r0, #10
 8001b56:	f7ff ff55 	bl	8001a04 <LED_BlinkPoll>
   DATA_GetSmPtr()->NewEvent = SM_EVENT_END_INIT;
 8001b5a:	f7ff fc21 	bl	80013a0 <DATA_GetSmPtr>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2201      	movs	r2, #1
 8001b62:	705a      	strb	r2, [r3, #1]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200046dc 	.word	0x200046dc
 8001b70:	0800ebd8 	.word	0x0800ebd8
 8001b74:	08001c61 	.word	0x08001c61
 8001b78:	08001c8d 	.word	0x08001c8d
 8001b7c:	08001cb9 	.word	0x08001cb9
 8001b80:	08001cdf 	.word	0x08001cdf
 8001b84:	08001d11 	.word	0x08001d11
 8001b88:	200002a4 	.word	0x200002a4
 8001b8c:	200002b4 	.word	0x200002b4

08001b90 <SM_IdleFunction>:
void SM_IdleFunction(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
   SUPP_ButtonOffFlagTask();
 8001b96:	f000 fafb 	bl	8002190 <SUPP_ButtonOffFlagTask>
   for(int i = 0; i < BUTTONS_QUATITY; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e00b      	b.n	8001bb8 <SM_IdleFunction+0x28>
   {
      BUT_Handle(DATA_GetButPtr(i));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fc05 	bl	80013b4 <DATA_GetButPtr>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fa1d 	bl	8000fec <BUT_Handle>
   for(int i = 0; i < BUTTONS_QUATITY; i++)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	ddf0      	ble.n	8001ba0 <SM_IdleFunction+0x10>
   }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <SM_RunningFunction>:
void SM_RunningFunction(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SM_ChangeState>:
static void SM_ChangeState(void)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e02f      	b.n	8001c44 <SM_ChangeState+0x6c>
   {
      if(SMTransitionTable[i].Source == DATA_GetSmPtr()->State && SMTransitionTable[i].Event == DATA_GetSmPtr()->NewEvent)
 8001be4:	491d      	ldr	r1, [pc, #116]	; (8001c5c <SM_ChangeState+0x84>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	781c      	ldrb	r4, [r3, #0]
 8001bf2:	f7ff fbd5 	bl	80013a0 <DATA_GetSmPtr>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	429c      	cmp	r4, r3
 8001bfc:	d11f      	bne.n	8001c3e <SM_ChangeState+0x66>
 8001bfe:	4917      	ldr	r1, [pc, #92]	; (8001c5c <SM_ChangeState+0x84>)
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	781c      	ldrb	r4, [r3, #0]
 8001c0e:	f7ff fbc7 	bl	80013a0 <DATA_GetSmPtr>
 8001c12:	4603      	mov	r3, r0
 8001c14:	785b      	ldrb	r3, [r3, #1]
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d111      	bne.n	8001c3e <SM_ChangeState+0x66>
      {
         DATA_GetSmPtr()->State    = SMTransitionTable[i].Destination;
 8001c1a:	f7ff fbc1 	bl	80013a0 <DATA_GetSmPtr>
 8001c1e:	4601      	mov	r1, r0
 8001c20:	480e      	ldr	r0, [pc, #56]	; (8001c5c <SM_ChangeState+0x84>)
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	4403      	add	r3, r0
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	700b      	strb	r3, [r1, #0]
         DATA_GetSmPtr()->NewEvent = SM_EVENT_NOTHING;
 8001c32:	f7ff fbb5 	bl	80013a0 <DATA_GetSmPtr>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2200      	movs	r2, #0
 8001c3a:	705a      	strb	r2, [r3, #1]
         return;
 8001c3c:	e00a      	b.n	8001c54 <SM_ChangeState+0x7c>
   for(int i = 0; i < SM_TRANSITION_TABLE_SIZE; i++)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d9cc      	bls.n	8001be4 <SM_ChangeState+0xc>
      }
   }
   DATA_GetSmPtr()->NewEvent = SM_EVENT_NOTHING;
 8001c4a:	f7ff fba9 	bl	80013a0 <DATA_GetSmPtr>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
}
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000018 	.word	0x20000018

08001c60 <BUT_ButtonUpCallback>:
static void BUT_ButtonUpCallback(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
   WS2812_SetPixel(100, 100, 100);
 8001c64:	2264      	movs	r2, #100	; 0x64
 8001c66:	2164      	movs	r1, #100	; 0x64
 8001c68:	2064      	movs	r0, #100	; 0x64
 8001c6a:	f000 fd73 	bl	8002754 <WS2812_SetPixel>
   DATA_GetSmPtr()->Flags.FlagsBits.UpButtonFlag = SM_FLAG_SET;
 8001c6e:	f7ff fb97 	bl	80013a0 <DATA_GetSmPtr>
 8001c72:	4602      	mov	r2, r0
 8001c74:	7913      	ldrb	r3, [r2, #4]
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	7113      	strb	r3, [r2, #4]
   DATA_GetButPtr(BUTTON_UP)->OffFlagCnt         = 0;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff fb99 	bl	80013b4 <DATA_GetButPtr>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <BUT_ButtonRightCallback>:
static void BUT_ButtonRightCallback(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
   WS2812_SetPixel(0, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 fd5d 	bl	8002754 <WS2812_SetPixel>
   DATA_GetSmPtr()->Flags.FlagsBits.RightButtonFlag = SM_FLAG_SET;
 8001c9a:	f7ff fb81 	bl	80013a0 <DATA_GetSmPtr>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	7913      	ldrb	r3, [r2, #4]
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	7113      	strb	r3, [r2, #4]
   DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt         = 0;
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7ff fb83 	bl	80013b4 <DATA_GetButPtr>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <BUT_ButtonLeftCallback>:
static void BUT_ButtonLeftCallback(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
   DATA_GetSmPtr()->Flags.FlagsBits.LeftButtonFlag = SM_FLAG_SET;
 8001cbc:	f7ff fb70 	bl	80013a0 <DATA_GetSmPtr>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	7913      	ldrb	r3, [r2, #4]
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	7113      	strb	r3, [r2, #4]
   SUPP_ExtFramhMassErase();
 8001cca:	f000 f9ed 	bl	80020a8 <SUPP_ExtFramhMassErase>
   DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt = 0;
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fb70 	bl	80013b4 <DATA_GetButPtr>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <BUT_ButtonDownCallback>:
static void BUT_ButtonDownCallback(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b090      	sub	sp, #64	; 0x40
 8001ce2:	af00      	add	r7, sp, #0
   Password_TypeDef Pass;
   DATA_GetSmPtr()->Flags.FlagsBits.DownButtonFlag = SM_FLAG_SET;
 8001ce4:	f7ff fb5c 	bl	80013a0 <DATA_GetSmPtr>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	7913      	ldrb	r3, [r2, #4]
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	7113      	strb	r3, [r2, #4]
   SUPP_ReadPassword(&Pass, 0);
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fbc6 	bl	8002488 <SUPP_ReadPassword>
   DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt = 0;
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f7ff fb59 	bl	80013b4 <DATA_GetButPtr>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	3740      	adds	r7, #64	; 0x40
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <BUT_ButtonOkCallback>:
static void BUT_ButtonOkCallback(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
   NewPasswordRules_TypeDef pass;
   pass.NameLength            = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	733b      	strb	r3, [r7, #12]
   uint8_t temp               = 0xff;
 8001d1a:	23ff      	movs	r3, #255	; 0xff
 8001d1c:	70fb      	strb	r3, [r7, #3]
   pass.Name                  = &temp;
 8001d1e:	1cfb      	adds	r3, r7, #3
 8001d20:	60bb      	str	r3, [r7, #8]
   pass.SpecialCharacter      = SM_FLAG_SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	713b      	strb	r3, [r7, #4]
   pass.SpecialCharacterStart = SM_FLAG_SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	717b      	strb	r3, [r7, #5]
   pass.PasswordLength        = 32;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	71bb      	strb	r3, [r7, #6]
   SUPP_GenerateNewPassword(pass);
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d34:	f000 fbee 	bl	8002514 <SUPP_GenerateNewPassword>
   DATA_GetSmPtr()->Flags.FlagsBits.OkButtonFlag = SM_FLAG_SET;
 8001d38:	f7ff fb32 	bl	80013a0 <DATA_GetSmPtr>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	7913      	ldrb	r3, [r2, #4]
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	7113      	strb	r3, [r2, #4]
   DATA_GetButPtr(BUTTON_OK)->OffFlagCnt         = 0;
 8001d46:	2004      	movs	r0, #4
 8001d48:	f7ff fb34 	bl	80013b4 <DATA_GetButPtr>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <ssd1331_command>:
SPI_HandleTypeDef *oled_spi;
uint16_t buffor[OLED_HEIGHT * OLED_WIDTH];
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1331_command(uint8_t command)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
   ssd1331_cs_low;
 8001d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d6e:	619a      	str	r2, [r3, #24]
   ssd1331_dc_low;
 8001d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d78:	619a      	str	r2, [r3, #24]
   HAL_SPI_Transmit(oled_spi, &command, 1, ssd1331_TIMEOUT);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <ssd1331_command+0x40>)
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	1df9      	adds	r1, r7, #7
 8001d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d84:	2201      	movs	r2, #1
 8001d86:	f005 fa71 	bl	800726c <HAL_SPI_Transmit>
   ssd1331_cs_high;
 8001d8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d8e:	2208      	movs	r2, #8
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200002d8 	.word	0x200002d8

08001da0 <setPixel>:
void setPixel(uint8_t x, uint8_t y, uint16_t color)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	460b      	mov	r3, r1
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80bb      	strh	r3, [r7, #4]
   if(x > OLED_WIDTH || y > OLED_HEIGHT)
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b60      	cmp	r3, #96	; 0x60
 8001db6:	d812      	bhi.n	8001dde <setPixel+0x3e>
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d80f      	bhi.n	8001dde <setPixel+0x3e>
   {
      return;
   }

   buffor[(OLED_HEIGHT * OLED_WIDTH) - (y * 96 + x) - 1] = color;
 8001dbe:	79ba      	ldrb	r2, [r7, #6]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	015b      	lsls	r3, r3, #5
 8001dc8:	461a      	mov	r2, r3
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f5c3 53bf 	rsb	r3, r3, #6112	; 0x17e0
 8001dd2:	331f      	adds	r3, #31
 8001dd4:	4905      	ldr	r1, [pc, #20]	; (8001dec <setPixel+0x4c>)
 8001dd6:	88ba      	ldrh	r2, [r7, #4]
 8001dd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001ddc:	e000      	b.n	8001de0 <setPixel+0x40>
      return;
 8001dde:	bf00      	nop
}
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200002dc 	.word	0x200002dc

08001df0 <ssd1331_clear>:

void ssd1331_clear()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
   memset(buffor, 0x00, 2 * 6144);
 8001df4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4802      	ldr	r0, [pc, #8]	; (8001e04 <ssd1331_clear+0x14>)
 8001dfc:	f00c f8f8 	bl	800dff0 <memset>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200002dc 	.word	0x200002dc

08001e08 <invert>:
void invert()
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
   for(int i = 0; i < 6144; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	e00c      	b.n	8001e2e <invert+0x26>
   {
      buffor[i] = ~buffor[i];
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <invert+0x3c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	b299      	uxth	r1, r3
 8001e20:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <invert+0x3c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 6144; i++)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e34:	dbee      	blt.n	8001e14 <invert+0xc>
   }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	200002dc 	.word	0x200002dc

08001e48 <ssd1331_display>:
void ssd1331_display(uint8_t invertflag)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
   if(invertflag)
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <ssd1331_display+0x14>
   {
      invert();
 8001e58:	f7ff ffd6 	bl	8001e08 <invert>
   }
   ssd1331_command(SET_COLUMN_ADDRESS);
 8001e5c:	2015      	movs	r0, #21
 8001e5e:	f7ff ff7d 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff ff7a 	bl	8001d5c <ssd1331_command>
   ssd1331_command(OLED_WIDTH - 1);
 8001e68:	205f      	movs	r0, #95	; 0x5f
 8001e6a:	f7ff ff77 	bl	8001d5c <ssd1331_command>
   // set row point
   ssd1331_command(SET_ROW_ADDRESS);
 8001e6e:	2075      	movs	r0, #117	; 0x75
 8001e70:	f7ff ff74 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff ff71 	bl	8001d5c <ssd1331_command>
   ssd1331_command(OLED_HEIGHT - 1);
 8001e7a:	203f      	movs	r0, #63	; 0x3f
 8001e7c:	f7ff ff6e 	bl	8001d5c <ssd1331_command>

   // uint8_t Datafirst;
   // uint8_t Datasecond;
   ssd1331_cs_low;
 8001e80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e88:	619a      	str	r2, [r3, #24]
   ssd1331_dc_high;
 8001e8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e8e:	2204      	movs	r2, #4
 8001e90:	619a      	str	r2, [r3, #24]
   uint32_t Length = OLED_WIDTH * OLED_HEIGHT, i = 0;
 8001e92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
   while(Length > 0U)
 8001e9c:	e02d      	b.n	8001efa <ssd1331_display+0xb2>
   {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE))
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <ssd1331_display+0xdc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d125      	bne.n	8001efa <ssd1331_display+0xb2>
      {
         // Write higher byte of color to DR
         *((__IO uint8_t *)&oled_spi->Instance->DR) = (buffor[i] >> 8);
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <ssd1331_display+0xe0>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <ssd1331_display+0xdc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]
         // Wait for transfer
         while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE) != SET)
 8001ec6:	e000      	b.n	8001eca <ssd1331_display+0x82>
         {
            __NOP();
 8001ec8:	bf00      	nop
         while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE) != SET)
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <ssd1331_display+0xdc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d1f6      	bne.n	8001ec8 <ssd1331_display+0x80>
         }
         // Write lower byt of color to DR
         *((__IO uint8_t *)&oled_spi->Instance->DR) = (buffor[i] & 0xFF);
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <ssd1331_display+0xe0>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <ssd1331_display+0xdc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
         // Decrease Lenght
         Length--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
         i++;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
   while(Length > 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ce      	bne.n	8001e9e <ssd1331_display+0x56>
      }
   }
   while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_BSY) != RESET)
 8001f00:	e000      	b.n	8001f04 <ssd1331_display+0xbc>
   {
      __NOP();
 8001f02:	bf00      	nop
   while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_BSY) != RESET)
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <ssd1331_display+0xdc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d0f6      	beq.n	8001f02 <ssd1331_display+0xba>
   }

   ssd1331_cs_high;
 8001f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f18:	2208      	movs	r2, #8
 8001f1a:	619a      	str	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200002d8 	.word	0x200002d8
 8001f28:	200002dc 	.word	0x200002dc

08001f2c <ssd1331_init>:

void ssd1331_init(SPI_HandleTypeDef *spi)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
   ssd1331_rst_low;
 8001f34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f3c:	619a      	str	r2, [r3, #24]
   HAL_Delay(150);
 8001f3e:	2096      	movs	r0, #150	; 0x96
 8001f40:	f001 fcc4 	bl	80038cc <HAL_Delay>
   ssd1331_rst_high;
 8001f44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f48:	2201      	movs	r2, #1
 8001f4a:	619a      	str	r2, [r3, #24]
   HAL_Delay(150);
 8001f4c:	2096      	movs	r0, #150	; 0x96
 8001f4e:	f001 fcbd 	bl	80038cc <HAL_Delay>
   oled_spi = spi;
 8001f52:	4a46      	ldr	r2, [pc, #280]	; (800206c <ssd1331_init+0x140>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
   __HAL_SPI_ENABLE(oled_spi);
 8001f58:	4b44      	ldr	r3, [pc, #272]	; (800206c <ssd1331_init+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <ssd1331_init+0x140>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6a:	601a      	str	r2, [r3, #0]
   ssd1331_command(DISPLAY_OFF);            // Display Off
 8001f6c:	20ae      	movs	r0, #174	; 0xae
 8001f6e:	f7ff fef5 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_CONTRAST_A);         // Set contrast for color A
 8001f72:	2081      	movs	r0, #129	; 0x81
 8001f74:	f7ff fef2 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0xFF);                   // 145 0x91
 8001f78:	20ff      	movs	r0, #255	; 0xff
 8001f7a:	f7ff feef 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_CONTRAST_B);         // Set contrast for color B
 8001f7e:	2082      	movs	r0, #130	; 0x82
 8001f80:	f7ff feec 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0xFF);                   // 80 0x50
 8001f84:	20ff      	movs	r0, #255	; 0xff
 8001f86:	f7ff fee9 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_CONTRAST_C);         // Set contrast for color C
 8001f8a:	2083      	movs	r0, #131	; 0x83
 8001f8c:	f7ff fee6 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0xFF);                   // 125 0x7D
 8001f90:	20ff      	movs	r0, #255	; 0xff
 8001f92:	f7ff fee3 	bl	8001d5c <ssd1331_command>
   ssd1331_command(MASTER_CURRENT_CONTROL); // master current control
 8001f96:	2087      	movs	r0, #135	; 0x87
 8001f98:	f7ff fee0 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x06);                   // 6
 8001f9c:	2006      	movs	r0, #6
 8001f9e:	f7ff fedd 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_SPEED_A);  // Set Second Pre-change Speed For ColorA
 8001fa2:	208a      	movs	r0, #138	; 0x8a
 8001fa4:	f7ff feda 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x99);                   // 100
 8001fa8:	2099      	movs	r0, #153	; 0x99
 8001faa:	f7ff fed7 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_SPEED_B);  // Set Second Pre-change Speed For ColorB
 8001fae:	208b      	movs	r0, #139	; 0x8b
 8001fb0:	f7ff fed4 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x99);                   // 120
 8001fb4:	2099      	movs	r0, #153	; 0x99
 8001fb6:	f7ff fed1 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_SPEED_C);  // Set Second Pre-change Speed For ColorC
 8001fba:	208c      	movs	r0, #140	; 0x8c
 8001fbc:	f7ff fece 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x99);                   // 100
 8001fc0:	2099      	movs	r0, #153	; 0x99
 8001fc2:	f7ff fecb 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_REMAP);              // set remap & data format
 8001fc6:	20a0      	movs	r0, #160	; 0xa0
 8001fc8:	f7ff fec8 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x72);                   // 0x72
 8001fcc:	2072      	movs	r0, #114	; 0x72
 8001fce:	f7ff fec5 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_DISPLAY_START_LINE); // Set display Start Line
 8001fd2:	20a1      	movs	r0, #161	; 0xa1
 8001fd4:	f7ff fec2 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x0);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff febf 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_DISPLAY_OFFSET); // Set display offset
 8001fde:	20a2      	movs	r0, #162	; 0xa2
 8001fe0:	f7ff febc 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x0);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff feb9 	bl	8001d5c <ssd1331_command>
   ssd1331_command(NORMAL_DISPLAY);      // Set display mode
 8001fea:	20a4      	movs	r0, #164	; 0xa4
 8001fec:	f7ff feb6 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_MULTIPLEX_RATIO); // Set multiplex ratio
 8001ff0:	20a8      	movs	r0, #168	; 0xa8
 8001ff2:	f7ff feb3 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x3F);
 8001ff6:	203f      	movs	r0, #63	; 0x3f
 8001ff8:	f7ff feb0 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_MASTER_CONFIGURE); // Set master configuration
 8001ffc:	20ad      	movs	r0, #173	; 0xad
 8001ffe:	f7ff fead 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x8E);
 8002002:	208e      	movs	r0, #142	; 0x8e
 8002004:	f7ff feaa 	bl	8001d5c <ssd1331_command>
   ssd1331_command(POWER_SAVE_MODE);         // Set Power Save Mode
 8002008:	20b0      	movs	r0, #176	; 0xb0
 800200a:	f7ff fea7 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x00);                    // 0x00
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fea4 	bl	8001d5c <ssd1331_command>
   ssd1331_command(PHASE_PERIOD_ADJUSTMENT); // phase 1 and 2 period adjustment
 8002014:	20b1      	movs	r0, #177	; 0xb1
 8002016:	f7ff fea1 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x31);                    // 0x31
 800201a:	2031      	movs	r0, #49	; 0x31
 800201c:	f7ff fe9e 	bl	8001d5c <ssd1331_command>
   ssd1331_command(DISPLAY_CLOCK_DIV);       // display clock divider/oscillator frequency
 8002020:	20b3      	movs	r0, #179	; 0xb3
 8002022:	f7ff fe9b 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0xF0);
 8002026:	20f0      	movs	r0, #240	; 0xf0
 8002028:	f7ff fe98 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_PRECHARGE_VOLTAGE); // Set Pre-Change Level
 800202c:	20bb      	movs	r0, #187	; 0xbb
 800202e:	f7ff fe95 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x3A);
 8002032:	203a      	movs	r0, #58	; 0x3a
 8002034:	f7ff fe92 	bl	8001d5c <ssd1331_command>
   ssd1331_command(SET_V_VOLTAGE); // Set vcomH
 8002038:	20be      	movs	r0, #190	; 0xbe
 800203a:	f7ff fe8f 	bl	8001d5c <ssd1331_command>
   ssd1331_command(0x3E);
 800203e:	203e      	movs	r0, #62	; 0x3e
 8002040:	f7ff fe8c 	bl	8001d5c <ssd1331_command>
   ssd1331_command(DEACTIVE_SCROLLING);           // disable scrolling
 8002044:	202e      	movs	r0, #46	; 0x2e
 8002046:	f7ff fe89 	bl	8001d5c <ssd1331_command>
   ssd1331_command(NORMAL_BRIGHTNESS_DISPLAY_ON); // set display on
 800204a:	20af      	movs	r0, #175	; 0xaf
 800204c:	f7ff fe86 	bl	8001d5c <ssd1331_command>
   HAL_Delay(1000);
 8002050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002054:	f001 fc3a 	bl	80038cc <HAL_Delay>
   ssd1331_clear();
 8002058:	f7ff feca 	bl	8001df0 <ssd1331_clear>
   ssd1331_display(0);
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff fef3 	bl	8001e48 <ssd1331_display>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200002d8 	.word	0x200002d8

08002070 <map>:
extern Fram_TypeDef Fram;
uint8_t TempTable[SECTOR_SIZE] = { 0 };
uint8_t AesKey[16]             = { 0 };
AES_ctx Aes;
uint32_t map(uint32_t val, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	69b9      	ldr	r1, [r7, #24]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	1a8a      	subs	r2, r1, r2
 800208a:	fb03 f202 	mul.w	r2, r3, r2
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1acb      	subs	r3, r1, r3
 8002094:	fbb2 f2f3 	udiv	r2, r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4413      	add	r3, r2
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SUPP_ExtFramhMassErase>:
      GFX_DrawFillRectangle(0, 20, map(i, 0, 511, 0, 96), 5, GREEN);
      ssd1331_display(0);
   }
}
void SUPP_ExtFramhMassErase(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b092      	sub	sp, #72	; 0x48
 80020ac:	af02      	add	r7, sp, #8
   char Temp[50] = { 0 };
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	222e      	movs	r2, #46	; 0x2e
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00b ff98 	bl	800dff0 <memset>
   ssd1331_clear();
 80020c0:	f7ff fe96 	bl	8001df0 <ssd1331_clear>
   sprintf(Temp, "EXTERNAL FRAM");
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	492e      	ldr	r1, [pc, #184]	; (8002180 <SUPP_ExtFramhMassErase+0xd8>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00b ff99 	bl	800e000 <siprintf>
   GFX_DrawString(0, 0, Temp, GREEN);
 80020ce:	1d3a      	adds	r2, r7, #4
 80020d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80020d4:	2100      	movs	r1, #0
 80020d6:	2000      	movs	r0, #0
 80020d8:	f000 fd18 	bl	8002b0c <GFX_DrawString>
   sprintf(Temp, "MASS ERASE");
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4929      	ldr	r1, [pc, #164]	; (8002184 <SUPP_ExtFramhMassErase+0xdc>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00b ff8d 	bl	800e000 <siprintf>
   GFX_DrawString(0, 10, Temp, GREEN);
 80020e6:	1d3a      	adds	r2, r7, #4
 80020e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80020ec:	210a      	movs	r1, #10
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 fd0c 	bl	8002b0c <GFX_DrawString>
   GFX_DrawRectangle(0, 20, 96, 5, GREEN);
 80020f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2305      	movs	r3, #5
 80020fc:	2260      	movs	r2, #96	; 0x60
 80020fe:	2114      	movs	r1, #20
 8002100:	2000      	movs	r0, #0
 8002102:	f000 fdef 	bl	8002ce4 <GFX_DrawRectangle>
   ssd1331_display(0);
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff fe9e 	bl	8001e48 <ssd1331_display>
   for(int i = 0; i < 128; i++)
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002110:	e007      	b.n	8002122 <SUPP_ExtFramhMassErase+0x7a>
   {
      TempTable[i] = 0;
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <SUPP_ExtFramhMassErase+0xe0>)
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	4413      	add	r3, r2
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 128; i++)
 800211c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211e:	3301      	adds	r3, #1
 8002120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002124:	2b7f      	cmp	r3, #127	; 0x7f
 8002126:	ddf4      	ble.n	8002112 <SUPP_ExtFramhMassErase+0x6a>
   }
   for(int i = 0; i < FRAM_NUMBER_OF_BYTES; i += 128)
 8002128:	2300      	movs	r3, #0
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
 800212c:	e01e      	b.n	800216c <SUPP_ExtFramhMassErase+0xc4>
   {
      ExtFram_WriteData(&Fram, i, TempTable, 128);
 800212e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <SUPP_ExtFramhMassErase+0xe0>)
 8002134:	4815      	ldr	r0, [pc, #84]	; (800218c <SUPP_ExtFramhMassErase+0xe4>)
 8002136:	f7ff fab5 	bl	80016a4 <ExtFram_WriteData>
      GFX_DrawFillRectangle(0, 20, map(i, 0, FRAM_NUMBER_OF_BYTES - 1, 0, 96), 5, GREEN);
 800213a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800213c:	2360      	movs	r3, #96	; 0x60
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2300      	movs	r3, #0
 8002142:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002146:	2100      	movs	r1, #0
 8002148:	f7ff ff92 	bl	8002070 <map>
 800214c:	4603      	mov	r3, r0
 800214e:	b29a      	uxth	r2, r3
 8002150:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2305      	movs	r3, #5
 8002158:	2114      	movs	r1, #20
 800215a:	2000      	movs	r0, #0
 800215c:	f000 fdef 	bl	8002d3e <GFX_DrawFillRectangle>
      ssd1331_display(0);
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fe71 	bl	8001e48 <ssd1331_display>
   for(int i = 0; i < FRAM_NUMBER_OF_BYTES; i += 128)
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002168:	3380      	adds	r3, #128	; 0x80
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002172:	dbdc      	blt.n	800212e <SUPP_ExtFramhMassErase+0x86>
   }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3740      	adds	r7, #64	; 0x40
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	0800e910 	.word	0x0800e910
 8002184:	0800e904 	.word	0x0800e904
 8002188:	200032dc 	.word	0x200032dc
 800218c:	200002b4 	.word	0x200002b4

08002190 <SUPP_ButtonOffFlagTask>:
   {
      flash_WritePage(&Flash, SectorNumber * PAGES_IN_SECTOR, &TempTable[i * PAGE_SIZE]);
   }
}
void SUPP_ButtonOffFlagTask(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
   if(DATA_GetSmPtr()->Flags.FlagsBits.DownButtonFlag == SM_FLAG_SET)
 8002194:	f7ff f904 	bl	80013a0 <DATA_GetSmPtr>
 8002198:	4603      	mov	r3, r0
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01a      	beq.n	80021dc <SUPP_ButtonOffFlagTask+0x4c>
   {
      DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt++;
 80021a6:	2003      	movs	r0, #3
 80021a8:	f7ff f904 	bl	80013b4 <DATA_GetButPtr>
 80021ac:	4603      	mov	r3, r0
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	3201      	adds	r2, #1
 80021b2:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 80021b4:	2003      	movs	r0, #3
 80021b6:	f7ff f8fd 	bl	80013b4 <DATA_GetButPtr>
 80021ba:	4603      	mov	r3, r0
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b31      	cmp	r3, #49	; 0x31
 80021c0:	d90c      	bls.n	80021dc <SUPP_ButtonOffFlagTask+0x4c>
      {
         DATA_GetButPtr(BUTTON_DOWN)->OffFlagCnt         = 0;
 80021c2:	2003      	movs	r0, #3
 80021c4:	f7ff f8f6 	bl	80013b4 <DATA_GetButPtr>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.DownButtonFlag = SM_FLAG_RESET;
 80021ce:	f7ff f8e7 	bl	80013a0 <DATA_GetSmPtr>
 80021d2:	4602      	mov	r2, r0
 80021d4:	7913      	ldrb	r3, [r2, #4]
 80021d6:	f36f 0341 	bfc	r3, #1, #1
 80021da:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.UpButtonFlag == SM_FLAG_SET)
 80021dc:	f7ff f8e0 	bl	80013a0 <DATA_GetSmPtr>
 80021e0:	4603      	mov	r3, r0
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01a      	beq.n	8002224 <SUPP_ButtonOffFlagTask+0x94>
   {
      DATA_GetButPtr(BUTTON_UP)->OffFlagCnt++;
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7ff f8e0 	bl	80013b4 <DATA_GetButPtr>
 80021f4:	4603      	mov	r3, r0
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	3201      	adds	r2, #1
 80021fa:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_UP)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff f8d9 	bl	80013b4 <DATA_GetButPtr>
 8002202:	4603      	mov	r3, r0
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b31      	cmp	r3, #49	; 0x31
 8002208:	d90c      	bls.n	8002224 <SUPP_ButtonOffFlagTask+0x94>
      {
         DATA_GetButPtr(BUTTON_UP)->OffFlagCnt         = 0;
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff f8d2 	bl	80013b4 <DATA_GetButPtr>
 8002210:	4603      	mov	r3, r0
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.UpButtonFlag = SM_FLAG_RESET;
 8002216:	f7ff f8c3 	bl	80013a0 <DATA_GetSmPtr>
 800221a:	4602      	mov	r2, r0
 800221c:	7913      	ldrb	r3, [r2, #4]
 800221e:	f36f 0300 	bfc	r3, #0, #1
 8002222:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.LeftButtonFlag == SM_FLAG_SET)
 8002224:	f7ff f8bc 	bl	80013a0 <DATA_GetSmPtr>
 8002228:	4603      	mov	r3, r0
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01a      	beq.n	800226c <SUPP_ButtonOffFlagTask+0xdc>
   {
      DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt++;
 8002236:	2001      	movs	r0, #1
 8002238:	f7ff f8bc 	bl	80013b4 <DATA_GetButPtr>
 800223c:	4603      	mov	r3, r0
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	3201      	adds	r2, #1
 8002242:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff f8b5 	bl	80013b4 <DATA_GetButPtr>
 800224a:	4603      	mov	r3, r0
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b31      	cmp	r3, #49	; 0x31
 8002250:	d90c      	bls.n	800226c <SUPP_ButtonOffFlagTask+0xdc>
      {
         DATA_GetButPtr(BUTTON_LEFT)->OffFlagCnt         = 0;
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff f8ae 	bl	80013b4 <DATA_GetButPtr>
 8002258:	4603      	mov	r3, r0
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.LeftButtonFlag = SM_FLAG_RESET;
 800225e:	f7ff f89f 	bl	80013a0 <DATA_GetSmPtr>
 8002262:	4602      	mov	r2, r0
 8002264:	7913      	ldrb	r3, [r2, #4]
 8002266:	f36f 0382 	bfc	r3, #2, #1
 800226a:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.RightButtonFlag == SM_FLAG_SET)
 800226c:	f7ff f898 	bl	80013a0 <DATA_GetSmPtr>
 8002270:	4603      	mov	r3, r0
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01a      	beq.n	80022b4 <SUPP_ButtonOffFlagTask+0x124>
   {
      DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt++;
 800227e:	2002      	movs	r0, #2
 8002280:	f7ff f898 	bl	80013b4 <DATA_GetButPtr>
 8002284:	4603      	mov	r3, r0
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	3201      	adds	r2, #1
 800228a:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 800228c:	2002      	movs	r0, #2
 800228e:	f7ff f891 	bl	80013b4 <DATA_GetButPtr>
 8002292:	4603      	mov	r3, r0
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b31      	cmp	r3, #49	; 0x31
 8002298:	d90c      	bls.n	80022b4 <SUPP_ButtonOffFlagTask+0x124>
      {
         DATA_GetButPtr(BUTTON_RIGHT)->OffFlagCnt         = 0;
 800229a:	2002      	movs	r0, #2
 800229c:	f7ff f88a 	bl	80013b4 <DATA_GetButPtr>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.RightButtonFlag = SM_FLAG_RESET;
 80022a6:	f7ff f87b 	bl	80013a0 <DATA_GetSmPtr>
 80022aa:	4602      	mov	r2, r0
 80022ac:	7913      	ldrb	r3, [r2, #4]
 80022ae:	f36f 03c3 	bfc	r3, #3, #1
 80022b2:	7113      	strb	r3, [r2, #4]
      }
   }
   if(DATA_GetSmPtr()->Flags.FlagsBits.OkButtonFlag == SM_FLAG_SET)
 80022b4:	f7ff f874 	bl	80013a0 <DATA_GetSmPtr>
 80022b8:	4603      	mov	r3, r0
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01a      	beq.n	80022fc <SUPP_ButtonOffFlagTask+0x16c>
   {
      DATA_GetButPtr(BUTTON_OK)->OffFlagCnt++;
 80022c6:	2004      	movs	r0, #4
 80022c8:	f7ff f874 	bl	80013b4 <DATA_GetButPtr>
 80022cc:	4603      	mov	r3, r0
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	3201      	adds	r2, #1
 80022d2:	611a      	str	r2, [r3, #16]
      if(DATA_GetButPtr(BUTTON_OK)->OffFlagCnt >= BUTTON_OF_FLAG_TIME)
 80022d4:	2004      	movs	r0, #4
 80022d6:	f7ff f86d 	bl	80013b4 <DATA_GetButPtr>
 80022da:	4603      	mov	r3, r0
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b31      	cmp	r3, #49	; 0x31
 80022e0:	d90c      	bls.n	80022fc <SUPP_ButtonOffFlagTask+0x16c>
      {
         DATA_GetButPtr(BUTTON_OK)->OffFlagCnt         = 0;
 80022e2:	2004      	movs	r0, #4
 80022e4:	f7ff f866 	bl	80013b4 <DATA_GetButPtr>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
         DATA_GetSmPtr()->Flags.FlagsBits.OkButtonFlag = SM_FLAG_RESET;
 80022ee:	f7ff f857 	bl	80013a0 <DATA_GetSmPtr>
 80022f2:	4602      	mov	r2, r0
 80022f4:	7913      	ldrb	r3, [r2, #4]
 80022f6:	f36f 1304 	bfc	r3, #4, #1
 80022fa:	7113      	strb	r3, [r2, #4]
      }
   }
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <SUPP_GetChipID>:
void SUPP_GetChipID(uint32_t *Data)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
   Data[0] = *((unsigned long *)UID_BASE);
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <SUPP_GetChipID+0x44>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
   Data[1] = *((unsigned long *)UID_BASE + 1);
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <SUPP_GetChipID+0x48>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	601a      	str	r2, [r3, #0]
   Data[2] = *((unsigned long *)UID_BASE + 2);
 800231a:	4a0c      	ldr	r2, [pc, #48]	; (800234c <SUPP_GetChipID+0x4c>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3308      	adds	r3, #8
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	601a      	str	r2, [r3, #0]
   Data[3] = Crc(CRC_INITIAL_VALUE, 12, (uint8_t *)Data);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f103 040c 	add.w	r4, r3, #12
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	210c      	movs	r1, #12
 800232e:	f04f 30ff 	mov.w	r0, #4294967295
 8002332:	f7fe ffd9 	bl	80012e8 <Crc>
 8002336:	4603      	mov	r3, r0
 8002338:	6023      	str	r3, [r4, #0]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
 8002342:	bf00      	nop
 8002344:	1fff7590 	.word	0x1fff7590
 8002348:	1fff7594 	.word	0x1fff7594
 800234c:	1fff7598 	.word	0x1fff7598

08002350 <SUPP_AES_Init>:

void SUPP_AES_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
   uint32_t Key[4];
   SUPP_GetChipID(Key);
 8002356:	463b      	mov	r3, r7
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ffd1 	bl	8002300 <SUPP_GetChipID>
   AesKey[0] = ((Key[0] >> 24) & 0xff);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	0e1b      	lsrs	r3, r3, #24
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <SUPP_AES_Init+0xb8>)
 8002366:	701a      	strb	r2, [r3, #0]
   AesKey[1] = ((Key[0] >> 16) & 0xff);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	0c1b      	lsrs	r3, r3, #16
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <SUPP_AES_Init+0xb8>)
 8002370:	705a      	strb	r2, [r3, #1]
   AesKey[2] = ((Key[0] >> 8) & 0xff);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <SUPP_AES_Init+0xb8>)
 800237a:	709a      	strb	r2, [r3, #2]
   AesKey[3] = ((Key[0] >> 0) & 0xff);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <SUPP_AES_Init+0xb8>)
 8002382:	70da      	strb	r2, [r3, #3]

   AesKey[4] = ((Key[1] >> 24) & 0xff);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0e1b      	lsrs	r3, r3, #24
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <SUPP_AES_Init+0xb8>)
 800238c:	711a      	strb	r2, [r3, #4]
   AesKey[5] = ((Key[1] >> 16) & 0xff);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <SUPP_AES_Init+0xb8>)
 8002396:	715a      	strb	r2, [r3, #5]
   AesKey[6] = ((Key[1] >> 8) & 0xff);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023a0:	719a      	strb	r2, [r3, #6]
   AesKey[7] = ((Key[1] >> 0) & 0xff);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023a8:	71da      	strb	r2, [r3, #7]

   AesKey[8]  = ((Key[2] >> 24) & 0xff);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0e1b      	lsrs	r3, r3, #24
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023b2:	721a      	strb	r2, [r3, #8]
   AesKey[9]  = ((Key[2] >> 16) & 0xff);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023bc:	725a      	strb	r2, [r3, #9]
   AesKey[10] = ((Key[2] >> 8) & 0xff);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023c6:	729a      	strb	r2, [r3, #10]
   AesKey[11] = ((Key[2] >> 0) & 0xff);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023ce:	72da      	strb	r2, [r3, #11]

   AesKey[12] = ((Key[3] >> 24) & 0xff);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	0e1b      	lsrs	r3, r3, #24
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023d8:	731a      	strb	r2, [r3, #12]
   AesKey[13] = ((Key[3] >> 16) & 0xff);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023e2:	735a      	strb	r2, [r3, #13]
   AesKey[14] = ((Key[3] >> 8) & 0xff);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023ec:	739a      	strb	r2, [r3, #14]
   AesKey[15] = ((Key[3] >> 0) & 0xff);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023f4:	73da      	strb	r2, [r3, #15]
   AES_init_ctx(&Aes, AesKey);
 80023f6:	4904      	ldr	r1, [pc, #16]	; (8002408 <SUPP_AES_Init+0xb8>)
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <SUPP_AES_Init+0xbc>)
 80023fa:	f7fe f831 	bl	8000460 <AES_init_ctx>
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200042dc 	.word	0x200042dc
 800240c:	200042ec 	.word	0x200042ec

08002410 <SUPP_AES_EncryptBuffer>:
void SUPP_AES_EncryptBuffer(uint32_t *Buff, uint32_t Size)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
   for(int i = 0; i < Size; i += 4)
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	e00a      	b.n	8002436 <SUPP_AES_EncryptBuffer+0x26>
   {
      AES_ECB_encrypt(&Aes, (uint8_t *)(&Buff[i]));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	4619      	mov	r1, r3
 800242a:	4807      	ldr	r0, [pc, #28]	; (8002448 <SUPP_AES_EncryptBuffer+0x38>)
 800242c:	f7fe fdc1 	bl	8000fb2 <AES_ECB_encrypt>
   for(int i = 0; i < Size; i += 4)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3304      	adds	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d8f0      	bhi.n	8002420 <SUPP_AES_EncryptBuffer+0x10>
   }
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200042ec 	.word	0x200042ec

0800244c <SUPP_AES_DecryptBuffer>:
void SUPP_AES_DecryptBuffer(uint32_t *Buff, uint32_t Size)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
   for(int i = 0; i < Size; i += 4)
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e00a      	b.n	8002472 <SUPP_AES_DecryptBuffer+0x26>
   {
      AES_ECB_decrypt(&Aes, (uint8_t *)(&Buff[i]));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	; (8002484 <SUPP_AES_DecryptBuffer+0x38>)
 8002468:	f7fe fdb1 	bl	8000fce <AES_ECB_decrypt>
   for(int i = 0; i < Size; i += 4)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d8f0      	bhi.n	800245c <SUPP_AES_DecryptBuffer+0x10>
   }
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200042ec 	.word	0x200042ec

08002488 <SUPP_ReadPassword>:
void SUPP_ReadPassword(Password_TypeDef *Pass, uint32_t Number)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
   uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, PASSWORD_SIZE - CRC_LENGTH, (uint8_t *)Pass->PasswordTable);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	461a      	mov	r2, r3
 8002496:	213c      	movs	r1, #60	; 0x3c
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7fe ff24 	bl	80012e8 <Crc>
 80024a0:	60f8      	str	r0, [r7, #12]
   while(TempCrc != Pass->PasswordStruct.Crc)
 80024a2:	e02a      	b.n	80024fa <SUPP_ReadPassword+0x72>
   {
      ExtFram_ReadData(&Fram, Number * PASSWORD_SIZE + PASSWORD_START_ADDRESS, (uint8_t *)Pass->PasswordTable, PASSWORD_SIZE);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	019b      	lsls	r3, r3, #6
 80024a8:	1d19      	adds	r1, r3, #4
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	2340      	movs	r3, #64	; 0x40
 80024ae:	4818      	ldr	r0, [pc, #96]	; (8002510 <SUPP_ReadPassword+0x88>)
 80024b0:	f7ff f95e 	bl	8001770 <ExtFram_ReadData>
      SUPP_AES_DecryptBuffer(Pass->PasswordTable, PASSWORD_SIZE / sizeof(uint32_t));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2110      	movs	r1, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ffc7 	bl	800244c <SUPP_AES_DecryptBuffer>
      TempCrc = Crc(CRC_INITIAL_VALUE, PASSWORD_SIZE - CRC_LENGTH, (uint8_t *)Pass->PasswordTable);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	461a      	mov	r2, r3
 80024c2:	213c      	movs	r1, #60	; 0x3c
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7fe ff0e 	bl	80012e8 <Crc>
 80024cc:	60f8      	str	r0, [r7, #12]
      if(TempCrc == Pass->PasswordStruct.Crc)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d108      	bne.n	80024ea <SUPP_ReadPassword+0x62>
      {
         LED_BlinkPoll(0, 100, 100, 10, 15);
 80024d8:	230f      	movs	r3, #15
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	230a      	movs	r3, #10
 80024de:	2264      	movs	r2, #100	; 0x64
 80024e0:	2164      	movs	r1, #100	; 0x64
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff fa8e 	bl	8001a04 <LED_BlinkPoll>
 80024e8:	e007      	b.n	80024fa <SUPP_ReadPassword+0x72>
      }
      else
      {
         LED_BlinkPoll(100, 10, 56, 10, 15);
 80024ea:	230f      	movs	r3, #15
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	230a      	movs	r3, #10
 80024f0:	2238      	movs	r2, #56	; 0x38
 80024f2:	210a      	movs	r1, #10
 80024f4:	2064      	movs	r0, #100	; 0x64
 80024f6:	f7ff fa85 	bl	8001a04 <LED_BlinkPoll>
   while(TempCrc != Pass->PasswordStruct.Crc)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d1cf      	bne.n	80024a4 <SUPP_ReadPassword+0x1c>
      }
   }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200002b4 	.word	0x200002b4

08002514 <SUPP_GenerateNewPassword>:

void SUPP_GenerateNewPassword(NewPasswordRules_TypeDef NewPassword)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b09a      	sub	sp, #104	; 0x68
 8002518:	af00      	add	r7, sp, #0
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   Password_TypeDef Pass = { 0 };
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f00b fd61 	bl	800dff0 <memset>
   uint32_t Temp         = sizeof(Password_TypeDef);
 800252e:	2340      	movs	r3, #64	; 0x40
 8002530:	61bb      	str	r3, [r7, #24]
   ExtFram_Read32(&Fram, COUNTER_PASSWORD_ADDRESS, &Temp);
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	461a      	mov	r2, r3
 8002538:	2100      	movs	r1, #0
 800253a:	4880      	ldr	r0, [pc, #512]	; (800273c <SUPP_GenerateNewPassword+0x228>)
 800253c:	f7ff f9a0 	bl	8001880 <ExtFram_Read32>
   Pass.PasswordStruct.Number = Temp;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	61fb      	str	r3, [r7, #28]
   ExtFram_Increment32(&Fram, COUNTER_PASSWORD_ADDRESS);
 8002544:	2100      	movs	r1, #0
 8002546:	487d      	ldr	r0, [pc, #500]	; (800273c <SUPP_GenerateNewPassword+0x228>)
 8002548:	f7ff f9bf 	bl	80018ca <ExtFram_Increment32>
   Pass.PasswordStruct.PasswordLenght     = NewPassword.PasswordLength;
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   Pass.PasswordStruct.PasswordNameLength = NewPassword.NameLength;
 8002552:	7b3b      	ldrb	r3, [r7, #12]
 8002554:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
   for(int i = 0; i < NewPassword.NameLength; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	667b      	str	r3, [r7, #100]	; 0x64
 800255c:	e00c      	b.n	8002578 <SUPP_GenerateNewPassword+0x64>
   {
      Pass.PasswordStruct.PasswordName[i] = NewPassword.Name[i];
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002562:	4413      	add	r3, r2
 8002564:	7819      	ldrb	r1, [r3, #0]
 8002566:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800256a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800256c:	4413      	add	r3, r2
 800256e:	460a      	mov	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < NewPassword.NameLength; i++)
 8002572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002574:	3301      	adds	r3, #1
 8002576:	667b      	str	r3, [r7, #100]	; 0x64
 8002578:	7b3b      	ldrb	r3, [r7, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800257e:	4293      	cmp	r3, r2
 8002580:	dbed      	blt.n	800255e <SUPP_GenerateNewPassword+0x4a>
   }
   if(NewPassword.SpecialCharacter == SM_FLAG_SET)
 8002582:	793b      	ldrb	r3, [r7, #4]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d118      	bne.n	80025ba <SUPP_GenerateNewPassword+0xa6>
   {
      if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 8002588:	797b      	ldrb	r3, [r7, #5]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d115      	bne.n	80025ba <SUPP_GenerateNewPassword+0xa6>
      {
         uint32_t Temp;
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	486a      	ldr	r0, [pc, #424]	; (8002740 <SUPP_GenerateNewPassword+0x22c>)
 8002596:	f004 fd68 	bl	800706a <HAL_RNG_GenerateRandomNumber>
         if(Temp % 2 == 0)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <SUPP_GenerateNewPassword+0x98>
         {
            Pass.PasswordStruct.Password[0] = '*';
 80025a4:	232a      	movs	r3, #42	; 0x2a
 80025a6:	f887 3020 	strb.w	r3, [r7, #32]
 80025aa:	e002      	b.n	80025b2 <SUPP_GenerateNewPassword+0x9e>
         }
         else
         {
            Pass.PasswordStruct.Password[0] = '!';
 80025ac:	2321      	movs	r3, #33	; 0x21
 80025ae:	f887 3020 	strb.w	r3, [r7, #32]
         }
         NewPassword.PasswordLength--;
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	71bb      	strb	r3, [r7, #6]
      }
   }
   for(int i = 0; i < NewPassword.PasswordLength; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	663b      	str	r3, [r7, #96]	; 0x60
 80025be:	e098      	b.n	80026f2 <SUPP_GenerateNewPassword+0x1de>
   {
      uint32_t Temp;
      HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	4619      	mov	r1, r3
 80025c6:	485e      	ldr	r0, [pc, #376]	; (8002740 <SUPP_GenerateNewPassword+0x22c>)
 80025c8:	f004 fd4f 	bl	800706a <HAL_RNG_GenerateRandomNumber>
      if(Temp % 3 == 0)
 80025cc:	6939      	ldr	r1, [r7, #16]
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <SUPP_GenerateNewPassword+0x230>)
 80025d0:	fba3 2301 	umull	r2, r3, r3, r1
 80025d4:	085a      	lsrs	r2, r3, #1
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	1aca      	subs	r2, r1, r3
 80025de:	2a00      	cmp	r2, #0
 80025e0:	d125      	bne.n	800262e <SUPP_GenerateNewPassword+0x11a>
      {
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	4619      	mov	r1, r3
 80025e8:	4855      	ldr	r0, [pc, #340]	; (8002740 <SUPP_GenerateNewPassword+0x22c>)
 80025ea:	f004 fd3e 	bl	800706a <HAL_RNG_GenerateRandomNumber>
         Temp = (Temp % 26) + 65;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4b55      	ldr	r3, [pc, #340]	; (8002748 <SUPP_GenerateNewPassword+0x234>)
 80025f2:	fba3 1302 	umull	r1, r3, r3, r2
 80025f6:	08db      	lsrs	r3, r3, #3
 80025f8:	211a      	movs	r1, #26
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	3341      	adds	r3, #65	; 0x41
 8002602:	613b      	str	r3, [r7, #16]
         if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 8002604:	797b      	ldrb	r3, [r7, #5]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d108      	bne.n	800261c <SUPP_GenerateNewPassword+0x108>
         {
            Pass.PasswordStruct.Password[i + 1] = Temp;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800260e:	3301      	adds	r3, #1
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	3368      	adds	r3, #104	; 0x68
 8002614:	443b      	add	r3, r7
 8002616:	f803 2c48 	strb.w	r2, [r3, #-72]
 800261a:	e067      	b.n	80026ec <SUPP_GenerateNewPassword+0x1d8>
         }
         else
         {
            Pass.PasswordStruct.Password[i] = Temp;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	b2d9      	uxtb	r1, r3
 8002620:	f107 0220 	add.w	r2, r7, #32
 8002624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002626:	4413      	add	r3, r2
 8002628:	460a      	mov	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e05e      	b.n	80026ec <SUPP_GenerateNewPassword+0x1d8>
         }
      }
      else if(Temp % 3 == 1)
 800262e:	6939      	ldr	r1, [r7, #16]
 8002630:	4b44      	ldr	r3, [pc, #272]	; (8002744 <SUPP_GenerateNewPassword+0x230>)
 8002632:	fba3 2301 	umull	r2, r3, r3, r1
 8002636:	085a      	lsrs	r2, r3, #1
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	1aca      	subs	r2, r1, r3
 8002640:	2a01      	cmp	r2, #1
 8002642:	d125      	bne.n	8002690 <SUPP_GenerateNewPassword+0x17c>
      {
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	4619      	mov	r1, r3
 800264a:	483d      	ldr	r0, [pc, #244]	; (8002740 <SUPP_GenerateNewPassword+0x22c>)
 800264c:	f004 fd0d 	bl	800706a <HAL_RNG_GenerateRandomNumber>
         Temp = (Temp % 26) + 97;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <SUPP_GenerateNewPassword+0x234>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	08db      	lsrs	r3, r3, #3
 800265a:	211a      	movs	r1, #26
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	3361      	adds	r3, #97	; 0x61
 8002664:	613b      	str	r3, [r7, #16]
         if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 8002666:	797b      	ldrb	r3, [r7, #5]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d108      	bne.n	800267e <SUPP_GenerateNewPassword+0x16a>
         {
            Pass.PasswordStruct.Password[i + 1] = Temp;
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002670:	3301      	adds	r3, #1
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	3368      	adds	r3, #104	; 0x68
 8002676:	443b      	add	r3, r7
 8002678:	f803 2c48 	strb.w	r2, [r3, #-72]
 800267c:	e036      	b.n	80026ec <SUPP_GenerateNewPassword+0x1d8>
         }
         else
         {
            Pass.PasswordStruct.Password[i] = Temp;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	b2d9      	uxtb	r1, r3
 8002682:	f107 0220 	add.w	r2, r7, #32
 8002686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002688:	4413      	add	r3, r2
 800268a:	460a      	mov	r2, r1
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e02d      	b.n	80026ec <SUPP_GenerateNewPassword+0x1d8>
         }
      }
      else if(NewPassword.SpecialCharacter == SM_FLAG_SET)
 8002690:	793b      	ldrb	r3, [r7, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d127      	bne.n	80026e6 <SUPP_GenerateNewPassword+0x1d2>
      {
         HAL_RNG_GenerateRandomNumber(&hrng, &Temp);
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	4619      	mov	r1, r3
 800269c:	4828      	ldr	r0, [pc, #160]	; (8002740 <SUPP_GenerateNewPassword+0x22c>)
 800269e:	f004 fce4 	bl	800706a <HAL_RNG_GenerateRandomNumber>
         Temp = (Temp % 10);
 80026a2:	6939      	ldr	r1, [r7, #16]
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <SUPP_GenerateNewPassword+0x238>)
 80026a6:	fba3 2301 	umull	r2, r3, r3, r1
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	1aca      	subs	r2, r1, r3
 80026b6:	613a      	str	r2, [r7, #16]
         if(NewPassword.SpecialCharacterStart == SM_FLAG_SET)
 80026b8:	797b      	ldrb	r3, [r7, #5]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d109      	bne.n	80026d2 <SUPP_GenerateNewPassword+0x1be>
         {
            Pass.PasswordStruct.Password[i + 1] = SpecialCharacter[Temp];
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c2:	3301      	adds	r3, #1
 80026c4:	4922      	ldr	r1, [pc, #136]	; (8002750 <SUPP_GenerateNewPassword+0x23c>)
 80026c6:	5c8a      	ldrb	r2, [r1, r2]
 80026c8:	3368      	adds	r3, #104	; 0x68
 80026ca:	443b      	add	r3, r7
 80026cc:	f803 2c48 	strb.w	r2, [r3, #-72]
 80026d0:	e00c      	b.n	80026ec <SUPP_GenerateNewPassword+0x1d8>
         }
         else
         {
            Pass.PasswordStruct.Password[i] = SpecialCharacter[Temp];
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <SUPP_GenerateNewPassword+0x23c>)
 80026d6:	5cd1      	ldrb	r1, [r2, r3]
 80026d8:	f107 0220 	add.w	r2, r7, #32
 80026dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026de:	4413      	add	r3, r2
 80026e0:	460a      	mov	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e002      	b.n	80026ec <SUPP_GenerateNewPassword+0x1d8>
         }
      }
      else
      {
         i--;
 80026e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e8:	3b01      	subs	r3, #1
 80026ea:	663b      	str	r3, [r7, #96]	; 0x60
   for(int i = 0; i < NewPassword.PasswordLength; i++)
 80026ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ee:	3301      	adds	r3, #1
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60
 80026f2:	79bb      	ldrb	r3, [r7, #6]
 80026f4:	461a      	mov	r2, r3
 80026f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f8:	4293      	cmp	r3, r2
 80026fa:	f6ff af61 	blt.w	80025c0 <SUPP_GenerateNewPassword+0xac>
      }
   }
   Pass.PasswordStruct.Crc = Crc(CRC_INITIAL_VALUE, PASSWORD_SIZE - CRC_LENGTH, (uint8_t *)Pass.PasswordTable);
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	461a      	mov	r2, r3
 8002704:	213c      	movs	r1, #60	; 0x3c
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	f7fe fded 	bl	80012e8 <Crc>
 800270e:	4603      	mov	r3, r0
 8002710:	65bb      	str	r3, [r7, #88]	; 0x58
   uint32_t TempAddr       = Pass.PasswordStruct.Number * PASSWORD_SIZE + PASSWORD_START_ADDRESS;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	3304      	adds	r3, #4
 8002718:	65fb      	str	r3, [r7, #92]	; 0x5c
   SUPP_AES_EncryptBuffer(Pass.PasswordTable, PASSWORD_SIZE / sizeof(uint32_t));
 800271a:	f107 031c 	add.w	r3, r7, #28
 800271e:	2110      	movs	r1, #16
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fe75 	bl	8002410 <SUPP_AES_EncryptBuffer>
   ExtFram_WriteData(&Fram, TempAddr, (uint8_t *)Pass.PasswordTable, PASSWORD_SIZE);
 8002726:	f107 021c 	add.w	r2, r7, #28
 800272a:	2340      	movs	r3, #64	; 0x40
 800272c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800272e:	4803      	ldr	r0, [pc, #12]	; (800273c <SUPP_GenerateNewPassword+0x228>)
 8002730:	f7fe ffb8 	bl	80016a4 <ExtFram_WriteData>
}
 8002734:	bf00      	nop
 8002736:	3768      	adds	r7, #104	; 0x68
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200002b4 	.word	0x200002b4
 8002740:	200046c8 	.word	0x200046c8
 8002744:	aaaaaaab 	.word	0xaaaaaaab
 8002748:	4ec4ec4f 	.word	0x4ec4ec4f
 800274c:	cccccccd 	.word	0xcccccccd
 8002750:	0800edb8 	.word	0x0800edb8

08002754 <WS2812_SetPixel>:

#include "WS2812b.h"
#include "tim.h"
uint16_t WsBuffer[12 * 24] = { 0 };
void WS2812_SetPixel(uint8_t r, uint8_t g, uint8_t b)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
 800275e:	460b      	mov	r3, r1
 8002760:	71bb      	strb	r3, [r7, #6]
 8002762:	4613      	mov	r3, r2
 8002764:	717b      	strb	r3, [r7, #5]

   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8002766:	2307      	movs	r3, #7
 8002768:	75fb      	strb	r3, [r7, #23]
 800276a:	2300      	movs	r3, #0
 800276c:	75bb      	strb	r3, [r7, #22]
 800276e:	e025      	b.n	80027bc <WS2812_SetPixel+0x68>
   {

      if((g & (1 << k)) == 0)
 8002770:	79ba      	ldrb	r2, [r7, #6]
 8002772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002776:	fa42 f303 	asr.w	r3, r2, r3
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <WS2812_SetPixel+0x40>
         WsBuffer[11 * 24 + i] = zero;
 8002782:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002786:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800278a:	4a51      	ldr	r2, [pc, #324]	; (80028d0 <WS2812_SetPixel+0x17c>)
 800278c:	2140      	movs	r1, #64	; 0x40
 800278e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002792:	e007      	b.n	80027a4 <WS2812_SetPixel+0x50>
      else
         WsBuffer[11 * 24 + i] = one;
 8002794:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002798:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800279c:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <WS2812_SetPixel+0x17c>)
 800279e:	2195      	movs	r1, #149	; 0x95
 80027a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 80027a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	75fb      	strb	r3, [r7, #23]
 80027b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	75bb      	strb	r3, [r7, #22]
 80027bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	dad5      	bge.n	8002770 <WS2812_SetPixel+0x1c>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 80027c4:	2307      	movs	r3, #7
 80027c6:	757b      	strb	r3, [r7, #21]
 80027c8:	2300      	movs	r3, #0
 80027ca:	753b      	strb	r3, [r7, #20]
 80027cc:	e025      	b.n	800281a <WS2812_SetPixel+0xc6>
   {

      if((r & (1 << k)) == 0)
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80027d4:	fa42 f303 	asr.w	r3, r2, r3
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d108      	bne.n	80027f2 <WS2812_SetPixel+0x9e>
         WsBuffer[11 * 24 + i + 8] = zero;
 80027e0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80027e4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027e8:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <WS2812_SetPixel+0x17c>)
 80027ea:	2140      	movs	r1, #64	; 0x40
 80027ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80027f0:	e007      	b.n	8002802 <WS2812_SetPixel+0xae>
      else
         WsBuffer[11 * 24 + i + 8] = one;
 80027f2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80027f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027fa:	4a35      	ldr	r2, [pc, #212]	; (80028d0 <WS2812_SetPixel+0x17c>)
 80027fc:	2195      	movs	r1, #149	; 0x95
 80027fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8002802:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	757b      	strb	r3, [r7, #21]
 800280e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	753b      	strb	r3, [r7, #20]
 800281a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800281e:	2b00      	cmp	r3, #0
 8002820:	dad5      	bge.n	80027ce <WS2812_SetPixel+0x7a>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8002822:	2307      	movs	r3, #7
 8002824:	74fb      	strb	r3, [r7, #19]
 8002826:	2300      	movs	r3, #0
 8002828:	74bb      	strb	r3, [r7, #18]
 800282a:	e025      	b.n	8002878 <WS2812_SetPixel+0x124>
   {

      if((b & (1 << k)) == 0)
 800282c:	797a      	ldrb	r2, [r7, #5]
 800282e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002832:	fa42 f303 	asr.w	r3, r2, r3
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <WS2812_SetPixel+0xfc>
         WsBuffer[11 * 24 + i + 16] = zero;
 800283e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002842:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002846:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <WS2812_SetPixel+0x17c>)
 8002848:	2140      	movs	r1, #64	; 0x40
 800284a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800284e:	e007      	b.n	8002860 <WS2812_SetPixel+0x10c>
      else
         WsBuffer[11 * 24 + i + 16] = one;
 8002850:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002854:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <WS2812_SetPixel+0x17c>)
 800285a:	2195      	movs	r1, #149	; 0x95
 800285c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8002860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	74fb      	strb	r3, [r7, #19]
 800286c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	74bb      	strb	r3, [r7, #18]
 8002878:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800287c:	2b00      	cmp	r3, #0
 800287e:	dad5      	bge.n	800282c <WS2812_SetPixel+0xd8>
   }
   for(int i = 0; i < 264; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e007      	b.n	8002896 <WS2812_SetPixel+0x142>
   {
      WsBuffer[i] = 0;
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <WS2812_SetPixel+0x17c>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2100      	movs	r1, #0
 800288c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 264; i++)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3301      	adds	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800289c:	dbf3      	blt.n	8002886 <WS2812_SetPixel+0x132>
   }
   //   for(int i = (264+24); i < 15*24; i++)
   //   {
   //      WsBuffer[i] = zero;
   //   }
   HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, WsBuffer, 12 * 24);
 800289e:	f44f 7390 	mov.w	r3, #288	; 0x120
 80028a2:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <WS2812_SetPixel+0x17c>)
 80028a4:	2100      	movs	r1, #0
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <WS2812_SetPixel+0x180>)
 80028a8:	f005 fc06 	bl	80080b8 <HAL_TIM_PWM_Start_DMA>
   while(HAL_DMA_STATE_READY != HAL_DMA_GetState(htim8.hdma[1]))
 80028ac:	bf00      	nop
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <WS2812_SetPixel+0x180>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fc4b 	bl	800414e <HAL_DMA_GetState>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d1f7      	bne.n	80028ae <WS2812_SetPixel+0x15a>
   {
   }
   HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 80028be:	2100      	movs	r1, #0
 80028c0:	4804      	ldr	r0, [pc, #16]	; (80028d4 <WS2812_SetPixel+0x180>)
 80028c2:	f005 fe1d 	bl	8008500 <HAL_TIM_PWM_Stop_DMA>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000439c 	.word	0x2000439c
 80028d4:	20004744 	.word	0x20004744

080028d8 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_read;
DMA_HandleTypeDef hdma_cordic_write;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_CORDIC_Init+0x20>)
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <MX_CORDIC_Init+0x24>)
 80028e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_CORDIC_Init+0x20>)
 80028e4:	f001 f814 	bl	8003910 <HAL_CORDIC_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80028ee:	f000 fc59 	bl	80031a4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200045dc 	.word	0x200045dc
 80028fc:	40020c00 	.word	0x40020c00

08002900 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <HAL_CORDIC_MspInit+0xe0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d161      	bne.n	80029d6 <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002912:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_CORDIC_MspInit+0xe4>)
 8002914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002916:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <HAL_CORDIC_MspInit+0xe4>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6493      	str	r3, [r2, #72]	; 0x48
 800291e:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_CORDIC_MspInit+0xe4>)
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA1_Channel2;
 800292a:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 800292c:	4a2f      	ldr	r2, [pc, #188]	; (80029ec <HAL_CORDIC_MspInit+0xec>)
 800292e:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 8002932:	2270      	movs	r2, #112	; 0x70
 8002934:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002936:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 8002942:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 800294a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294e:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 8002952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002956:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 8002958:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 8002964:	4820      	ldr	r0, [pc, #128]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 8002966:	f001 f9b9 	bl	8003cdc <HAL_DMA_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 8002970:	f000 fc18 	bl	80031a4 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_read);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 8002978:	61da      	str	r2, [r3, #28]
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_CORDIC_MspInit+0xe8>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6293      	str	r3, [r2, #40]	; 0x28

    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA1_Channel3;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_CORDIC_MspInit+0xf4>)
 8002984:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 8002988:	2271      	movs	r2, #113	; 0x71
 800298a:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 800298e:	2210      	movs	r2, #16
 8002990:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 80029a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a4:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 80029a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ac:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 80029ba:	480d      	ldr	r0, [pc, #52]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 80029bc:	f001 f98e 	bl	8003cdc <HAL_DMA_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 80029c6:	f000 fbed 	bl	80031a4 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_write);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 80029ce:	619a      	str	r2, [r3, #24]
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_CORDIC_MspInit+0xf0>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	20004604 	.word	0x20004604
 80029ec:	4002001c 	.word	0x4002001c
 80029f0:	20004664 	.word	0x20004664
 80029f4:	40020030 	.word	0x40020030

080029f8 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	font = font_t;
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <GFX_SetFont+0x1c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200046c4 	.word	0x200046c4

08002a18 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ILI_Color color)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4611      	mov	r1, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	460b      	mov	r3, r1
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b7e      	cmp	r3, #126	; 0x7e
 8002a32:	d862      	bhi.n	8002afa <GFX_DrawChar+0xe2>

		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
 8002a38:	e057      	b.n	8002aea <GFX_DrawChar+0xd2>
		{
	        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8002a3a:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <GFX_DrawChar+0xec>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	3b20      	subs	r3, #32
 8002a42:	4930      	ldr	r1, [pc, #192]	; (8002b04 <GFX_DrawChar+0xec>)
 8002a44:	6809      	ldr	r1, [r1, #0]
 8002a46:	3101      	adds	r1, #1
 8002a48:	7809      	ldrb	r1, [r1, #0]
 8002a4a:	fb03 f101 	mul.w	r1, r3, r1
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	440b      	add	r3, r1
 8002a52:	3302      	adds	r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	75bb      	strb	r3, [r7, #22]

	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	757b      	strb	r3, [r7, #21]
 8002a5e:	e03a      	b.n	8002ad6 <GFX_DrawChar+0xbe>
	        {
	            if(line & 1) // Check last pixel in line
 8002a60:	7dbb      	ldrb	r3, [r7, #22]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02c      	beq.n	8002ac4 <GFX_DrawChar+0xac>
	            {
	            	if(size == 1)
 8002a6a:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <GFX_DrawChar+0xf0>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d10e      	bne.n	8002a90 <GFX_DrawChar+0x78>
	            	{
	            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b2d8      	uxtb	r0, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	7d7b      	ldrb	r3, [r7, #21]
 8002a82:	4413      	add	r3, r2
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	88ba      	ldrh	r2, [r7, #4]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7ff f989 	bl	8001da0 <setPixel>
 8002a8e:	e019      	b.n	8002ac4 <GFX_DrawChar+0xac>
	            	}
	            	else
	            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <GFX_DrawChar+0xf0>)
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	fb03 f202 	mul.w	r2, r3, r2
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	18d0      	adds	r0, r2, r3
 8002a9e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002aa2:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <GFX_DrawChar+0xf0>)
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	fb03 f202 	mul.w	r2, r3, r2
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	18d1      	adds	r1, r2, r3
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <GFX_DrawChar+0xf0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <GFX_DrawChar+0xf0>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b29c      	uxth	r4, r3
 8002aba:	88bb      	ldrh	r3, [r7, #4]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4623      	mov	r3, r4
 8002ac0:	f000 f93d 	bl	8002d3e <GFX_DrawFillRectangle>
	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8002ac4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	757b      	strb	r3, [r7, #21]
 8002ad0:	7dbb      	ldrb	r3, [r7, #22]
 8002ad2:	085b      	lsrs	r3, r3, #1
 8002ad4:	75bb      	strb	r3, [r7, #22]
 8002ad6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <GFX_DrawChar+0xec>)
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	dbbd      	blt.n	8002a60 <GFX_DrawChar+0x48>
		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <GFX_DrawChar+0xec>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	7dfa      	ldrb	r2, [r7, #23]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d3a0      	bcc.n	8002a3a <GFX_DrawChar+0x22>
 8002af8:	e000      	b.n	8002afc <GFX_DrawChar+0xe4>
	if(chr > 0x7E) return; // chr > '~'
 8002afa:	bf00      	nop
	            }
	        }
	    }

}
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200046c4 	.word	0x200046c4
 8002b08:	20000030 	.word	0x20000030

08002b0c <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, ILI_Color color)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8002b24:	e015      	b.n	8002b52 <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	7cfa      	ldrb	r2, [r7, #19]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f7ff ff73 	bl	8002a18 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8002b32:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <GFX_DrawString+0x5c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <GFX_DrawString+0x60>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4413      	add	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]


		znak = *str; // Next char
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e3      	bne.n	8002b26 <GFX_DrawString+0x1a>
	}
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200046c4 	.word	0x200046c4
 8002b6c:	20000030 	.word	0x20000030

08002b70 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ILI_Color color)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002b88:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1acb      	subs	r3, r1, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bfb8      	it	lt
 8002b96:	425b      	neglt	r3, r3
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	bfcc      	ite	gt
 8002b9c:	2301      	movgt	r3, #1
 8002b9e:	2300      	movle	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8002ba4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	623b      	str	r3, [r7, #32]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dd0b      	ble.n	8002be4 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bfb8      	it	lt
 8002bfc:	425b      	neglt	r3, r3
 8002bfe:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8002c00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c04:	0fda      	lsrs	r2, r3, #31
 8002c06:	4413      	add	r3, r2
 8002c08:	105b      	asrs	r3, r3, #1
 8002c0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	da02      	bge.n	8002c1a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8002c14:	2301      	movs	r3, #1
 8002c16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002c18:	e02e      	b.n	8002c78 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8002c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8002c20:	e02a      	b.n	8002c78 <GFX_WriteLine+0x108>
	        if (steep) {
 8002c22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	b2d1      	uxtb	r1, r2
 8002c32:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f8b3 	bl	8001da0 <setPixel>
 8002c3a:	e007      	b.n	8002c4c <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	b2d1      	uxtb	r1, r2
 8002c44:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f8aa 	bl	8001da0 <setPixel>
	        }
	        err -= dy;
 8002c4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c4e:	8abb      	ldrh	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8002c56:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da09      	bge.n	8002c72 <GFX_WriteLine+0x102>
	            y_start += ystep;
 8002c5e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4413      	add	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8002c68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c6a:	8afb      	ldrh	r3, [r7, #22]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	ddd0      	ble.n	8002c22 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3730      	adds	r7, #48	; 0x30
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ILI_Color color)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af02      	add	r7, sp, #8
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	1e5a      	subs	r2, r3, #1
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ff60 	bl	8002b70 <GFX_WriteLine>
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ILI_Color color)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ff4a 	bl	8002b70 <GFX_WriteLine>
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ILI_Color color)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	80fb      	strh	r3, [r7, #6]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	8b3b      	ldrh	r3, [r7, #24]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff ffd9 	bl	8002cb8 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8002d06:	88ba      	ldrh	r2, [r7, #4]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	1e59      	subs	r1, r3, #1
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	8b3b      	ldrh	r3, [r7, #24]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff ffd0 	bl	8002cb8 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8002d18:	88ba      	ldrh	r2, [r7, #4]
 8002d1a:	8b3b      	ldrh	r3, [r7, #24]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff ffb3 	bl	8002c8a <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	88ba      	ldrh	r2, [r7, #4]
 8002d2e:	8b3b      	ldrh	r3, [r7, #24]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	f7ff ffaa 	bl	8002c8a <GFX_DrawFastVLine>

}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ILI_Color color)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	80fb      	strh	r3, [r7, #6]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e008      	b.n	8002d6c <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8002d5a:	88ba      	ldrh	r2, [r7, #4]
 8002d5c:	8c3b      	ldrh	r3, [r7, #32]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	6978      	ldr	r0, [r7, #20]
 8002d62:	f7ff ff92 	bl	8002c8a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbf0      	blt.n	8002d5a <GFX_DrawFillRectangle+0x1c>
    }

}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <MX_DMA_Init+0x44>)
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <MX_DMA_Init+0x44>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6493      	str	r3, [r2, #72]	; 0x48
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MX_DMA_Init+0x44>)
 8002d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_DMA_Init+0x44>)
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <MX_DMA_Init+0x44>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6493      	str	r3, [r2, #72]	; 0x48
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <MX_DMA_Init+0x44>)
 8002db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]

}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000

08002dcc <flash_CsLow>:
#include "main.h"

#include "flash_spi.h"

void flash_CsLow(flash_t *flash)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68d8      	ldr	r0, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	891b      	ldrh	r3, [r3, #8]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4619      	mov	r1, r3
 8002de0:	f001 fbfe 	bl	80045e0 <HAL_GPIO_WritePin>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68d8      	ldr	r0, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	891b      	ldrh	r3, [r3, #8]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f001 fbee 	bl	80045e0 <HAL_GPIO_WritePin>
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	f004 fa20 	bl	800726c <HAL_SPI_Transmit>
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	f004 fb7a 	bl	8007548 <HAL_SPI_Receive>
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <flash_Reset>:
   flash_ReadCommand(flash, &command, 1);
   flash_CsHigh(flash);
   return command;
}
void flash_Reset(flash_t *flash)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
   uint8_t command = ENABLE_RESET;
 8002e64:	2366      	movs	r3, #102	; 0x66
 8002e66:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ffaf 	bl	8002dcc <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8002e6e:	f107 030f 	add.w	r3, r7, #15
 8002e72:	2201      	movs	r2, #1
 8002e74:	4619      	mov	r1, r3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ffc8 	bl	8002e0c <flash_WriteCommand>
   flash_CsHigh(flash);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ffb5 	bl	8002dec <flash_CsHigh>
   command = RESET;
 8002e82:	2399      	movs	r3, #153	; 0x99
 8002e84:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffa0 	bl	8002dcc <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8002e8c:	f107 030f 	add.w	r3, r7, #15
 8002e90:	2201      	movs	r2, #1
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ffb9 	bl	8002e0c <flash_WriteCommand>
   flash_CsHigh(flash);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ffa6 	bl	8002dec <flash_CsHigh>
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <flash_ReadID>:
   uint8_t command = WRITE_ENABLE;
   flash_WriteCommand(flash, &command, 1);
   flash_CsHigh(flash);
}
void flash_ReadID(flash_t *flash)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
   uint8_t id[3], command = JEDEC_ID;
 8002eb0:	239f      	movs	r3, #159	; 0x9f
 8002eb2:	72fb      	strb	r3, [r7, #11]
   flash_CsLow(flash);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff89 	bl	8002dcc <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8002eba:	f107 030b 	add.w	r3, r7, #11
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa2 	bl	8002e0c <flash_WriteCommand>
   flash_ReadCommand(flash, id, 3);
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2203      	movs	r2, #3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffaf 	bl	8002e34 <flash_ReadCommand>
   flash_CsHigh(flash);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ff88 	bl	8002dec <flash_CsHigh>
   flash->id = ((id[0] << 16) | (id[1] << 8) | id[2]);
 8002edc:	7b3b      	ldrb	r3, [r7, #12]
 8002ede:	041a      	lsls	r2, r3, #16
 8002ee0:	7b7b      	ldrb	r3, [r7, #13]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	7bba      	ldrb	r2, [r7, #14]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	605a      	str	r2, [r3, #4]
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <flash_Init>:
   flash_WriteCommand(flash, &Temp, 1);
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
}
void flash_Init(flash_t *flash, SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	807b      	strh	r3, [r7, #2]
   flash->flash_spi    = spi;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	601a      	str	r2, [r3, #0]
   flash->flash_CsPort = cs_port;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	60da      	str	r2, [r3, #12]
   flash->flash_CsPin  = cs_pin;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	887a      	ldrh	r2, [r7, #2]
 8002f16:	811a      	strh	r2, [r3, #8]
   flash_Reset(flash);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff ff9f 	bl	8002e5c <flash_Reset>
   flash_ReadID(flash);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff ffc2 	bl	8002ea8 <flash_ReadID>
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <MX_GPIO_Init+0x110>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	4a3d      	ldr	r2, [pc, #244]	; (800303c <MX_GPIO_Init+0x110>)
 8002f48:	f043 0320 	orr.w	r3, r3, #32
 8002f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <MX_GPIO_Init+0x110>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <MX_GPIO_Init+0x110>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	4a37      	ldr	r2, [pc, #220]	; (800303c <MX_GPIO_Init+0x110>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f66:	4b35      	ldr	r3, [pc, #212]	; (800303c <MX_GPIO_Init+0x110>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <MX_GPIO_Init+0x110>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	4a31      	ldr	r2, [pc, #196]	; (800303c <MX_GPIO_Init+0x110>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <MX_GPIO_Init+0x110>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1331_RST_Pin|SSD1331_CS_Pin|FLASH_CS_Pin|FRAM_CS_Pin, GPIO_PIN_SET);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f240 6109 	movw	r1, #1545	; 0x609
 8002f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f94:	f001 fb24 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_DC_GPIO_Port, SSD1331_DC_Pin, GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa0:	f001 fb1e 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1331_RST_Pin|SSD1331_CS_Pin|FRAM_CS_Pin;
 8002fa4:	f240 4309 	movw	r3, #1033	; 0x409
 8002fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc0:	f001 f974 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_DC_Pin;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1331_DC_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fde:	f001 f965 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8002fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002fe8:	2311      	movs	r3, #17
 8002fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fec:	2301      	movs	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ffe:	f001 f955 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin;
 8003002:	2338      	movs	r3, #56	; 0x38
 8003004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300e:	f107 030c 	add.w	r3, r7, #12
 8003012:	4619      	mov	r1, r3
 8003014:	480a      	ldr	r0, [pc, #40]	; (8003040 <MX_GPIO_Init+0x114>)
 8003016:	f001 f949 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_OK_Pin|BUTTON_LEFT_Pin;
 800301a:	23c0      	movs	r3, #192	; 0xc0
 800301c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003022:	2301      	movs	r3, #1
 8003024:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	4619      	mov	r1, r3
 800302c:	4804      	ldr	r0, [pc, #16]	; (8003040 <MX_GPIO_Init+0x114>)
 800302e:	f001 f93d 	bl	80042ac <HAL_GPIO_Init>

}
 8003032:	bf00      	nop
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	48000400 	.word	0x48000400

08003044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003048:	f000 fbcf 	bl	80037ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800304c:	f000 f813 	bl	8003076 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003050:	f7ff ff6c 	bl	8002f2c <MX_GPIO_Init>
  MX_DMA_Init();
 8003054:	f7ff fe96 	bl	8002d84 <MX_DMA_Init>
  MX_RNG_Init();
 8003058:	f000 f8aa 	bl	80031b0 <MX_RNG_Init>
  MX_USB_Device_Init();
 800305c:	f00a fb90 	bl	800d780 <MX_USB_Device_Init>
  MX_CORDIC_Init();
 8003060:	f7ff fc3a 	bl	80028d8 <MX_CORDIC_Init>
  MX_TIM8_Init();
 8003064:	f000 fa62 	bl	800352c <MX_TIM8_Init>
  MX_SPI1_Init();
 8003068:	f000 f8ec 	bl	8003244 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800306c:	f000 f84e 	bl	800310c <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_Handle();
 8003070:	f7fe fcf2 	bl	8001a58 <SM_Handle>
 8003074:	e7fc      	b.n	8003070 <main+0x2c>

08003076 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b094      	sub	sp, #80	; 0x50
 800307a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307c:	f107 0318 	add.w	r3, r7, #24
 8003080:	2238      	movs	r2, #56	; 0x38
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f00a ffb3 	bl	800dff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003098:	2000      	movs	r0, #0
 800309a:	f002 ffd5 	bl	8006048 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800309e:	2321      	movs	r3, #33	; 0x21
 80030a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030a8:	2301      	movs	r3, #1
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ac:	2302      	movs	r3, #2
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030b0:	2303      	movs	r3, #3
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80030b4:	2302      	movs	r3, #2
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80030b8:	2355      	movs	r3, #85	; 0x55
 80030ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030bc:	2302      	movs	r3, #2
 80030be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030c0:	2302      	movs	r3, #2
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030c4:	2302      	movs	r3, #2
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030c8:	f107 0318 	add.w	r3, r7, #24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 f85f 	bl	8006190 <HAL_RCC_OscConfig>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80030d8:	f000 f864 	bl	80031a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030dc:	230f      	movs	r3, #15
 80030de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e0:	2303      	movs	r3, #3
 80030e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	2104      	movs	r1, #4
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fb63 	bl	80067c0 <HAL_RCC_ClockConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003100:	f000 f850 	bl	80031a4 <Error_Handler>
  }
}
 8003104:	bf00      	nop
 8003106:	3750      	adds	r7, #80	; 0x50
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	200c      	movs	r0, #12
 8003116:	f000 fdac 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800311a:	200c      	movs	r0, #12
 800311c:	f000 fdc3 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	2100      	movs	r1, #0
 8003124:	200d      	movs	r0, #13
 8003126:	f000 fda4 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800312a:	200d      	movs	r0, #13
 800312c:	f000 fdbb 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* CORDIC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2100      	movs	r1, #0
 8003134:	2064      	movs	r0, #100	; 0x64
 8003136:	f000 fd9c 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 800313a:	2064      	movs	r0, #100	; 0x64
 800313c:	f000 fdb3 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USB_LP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	2014      	movs	r0, #20
 8003146:	f000 fd94 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800314a:	2014      	movs	r0, #20
 800314c:	f000 fdab 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* TIM8_BRK_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2100      	movs	r1, #0
 8003154:	202b      	movs	r0, #43	; 0x2b
 8003156:	f000 fd8c 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 800315a:	202b      	movs	r0, #43	; 0x2b
 800315c:	f000 fda3 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* TIM8_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8003160:	2200      	movs	r2, #0
 8003162:	2100      	movs	r1, #0
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	f000 fd84 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800316a:	202c      	movs	r0, #44	; 0x2c
 800316c:	f000 fd9b 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* TIM8_TRG_COM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 8003170:	2200      	movs	r2, #0
 8003172:	2100      	movs	r1, #0
 8003174:	202d      	movs	r0, #45	; 0x2d
 8003176:	f000 fd7c 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 800317a:	202d      	movs	r0, #45	; 0x2d
 800317c:	f000 fd93 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* TIM8_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	202e      	movs	r0, #46	; 0x2e
 8003186:	f000 fd74 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800318a:	202e      	movs	r0, #46	; 0x2e
 800318c:	f000 fd8b 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	2100      	movs	r1, #0
 8003194:	200b      	movs	r0, #11
 8003196:	f000 fd6c 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800319a:	200b      	movs	r0, #11
 800319c:	f000 fd83 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a8:	b672      	cpsid	i
}
 80031aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 80031ac:	e7fe      	b.n	80031ac <Error_Handler+0x8>
	...

080031b0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <MX_RNG_Init+0x24>)
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <MX_RNG_Init+0x28>)
 80031b8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <MX_RNG_Init+0x24>)
 80031bc:	2200      	movs	r2, #0
 80031be:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80031c0:	4804      	ldr	r0, [pc, #16]	; (80031d4 <MX_RNG_Init+0x24>)
 80031c2:	f003 ff1d 	bl	8007000 <HAL_RNG_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80031cc:	f7ff ffea 	bl	80031a4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200046c8 	.word	0x200046c8
 80031d8:	50060800 	.word	0x50060800

080031dc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b098      	sub	sp, #96	; 0x60
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	2250      	movs	r2, #80	; 0x50
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f00a feff 	bl	800dff0 <memset>
  if(rngHandle->Instance==RNG)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <HAL_RNG_MspInit+0x60>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d11a      	bne.n	8003232 <HAL_RNG_MspInit+0x56>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80031fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003200:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003202:	2300      	movs	r3, #0
 8003204:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003206:	f107 0310 	add.w	r3, r7, #16
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fcbc 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 8003216:	f7ff ffc5 	bl	80031a4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RNG_MspInit+0x64>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	4a08      	ldr	r2, [pc, #32]	; (8003240 <HAL_RNG_MspInit+0x64>)
 8003220:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RNG_MspInit+0x64>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003232:	bf00      	nop
 8003234:	3760      	adds	r7, #96	; 0x60
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	50060800 	.word	0x50060800
 8003240:	40021000 	.word	0x40021000

08003244 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <MX_SPI1_Init+0x74>)
 800324a:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <MX_SPI1_Init+0x78>)
 800324c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003254:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <MX_SPI1_Init+0x74>)
 800325e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003262:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <MX_SPI1_Init+0x74>)
 800326c:	2200      	movs	r2, #0
 800326e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003276:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <MX_SPI1_Init+0x74>)
 800327a:	2220      	movs	r2, #32
 800327c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003280:	2200      	movs	r2, #0
 8003282:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003286:	2200      	movs	r2, #0
 8003288:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <MX_SPI1_Init+0x74>)
 800328c:	2200      	movs	r2, #0
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003292:	2207      	movs	r2, #7
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <MX_SPI1_Init+0x74>)
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <MX_SPI1_Init+0x74>)
 800329e:	2208      	movs	r2, #8
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <MX_SPI1_Init+0x74>)
 80032a4:	f003 ff37 	bl	8007116 <HAL_SPI_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032ae:	f7ff ff79 	bl	80031a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200046dc 	.word	0x200046dc
 80032bc:	40013000 	.word	0x40013000

080032c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <HAL_SPI_MspInit+0x7c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d128      	bne.n	8003334 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <HAL_SPI_MspInit+0x80>)
 80032e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_SPI_MspInit+0x80>)
 80032e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032ec:	6613      	str	r3, [r2, #96]	; 0x60
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_SPI_MspInit+0x80>)
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_SPI_MspInit+0x80>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	4a10      	ldr	r2, [pc, #64]	; (8003340 <HAL_SPI_MspInit+0x80>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <HAL_SPI_MspInit+0x80>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003312:	23e0      	movs	r3, #224	; 0xe0
 8003314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003322:	2305      	movs	r3, #5
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4619      	mov	r1, r3
 800332c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003330:	f000 ffbc 	bl	80042ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003334:	bf00      	nop
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40013000 	.word	0x40013000
 8003340:	40021000 	.word	0x40021000

08003344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_MspInit+0x44>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <HAL_MspInit+0x44>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6613      	str	r3, [r2, #96]	; 0x60
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_MspInit+0x44>)
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_MspInit+0x44>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <HAL_MspInit+0x44>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	6593      	str	r3, [r2, #88]	; 0x58
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_MspInit+0x44>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000

0800338c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <NMI_Handler+0x4>

08003392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <HardFault_Handler+0x4>

08003398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <MemManage_Handler+0x4>

0800339e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <BusFault_Handler+0x4>

080033a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <UsageFault_Handler+0x4>

080033aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d8:	f000 fa5a 	bl	8003890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}

080033e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <DMA1_Channel1_IRQHandler+0x10>)
 80033e6:	f000 fe03 	bl	8003ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20004790 	.word	0x20004790

080033f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <DMA1_Channel2_IRQHandler+0x10>)
 80033fa:	f000 fdf9 	bl	8003ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20004604 	.word	0x20004604

08003408 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <DMA1_Channel3_IRQHandler+0x10>)
 800340e:	f000 fdef 	bl	8003ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20004664 	.word	0x20004664

0800341c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <USB_LP_IRQHandler+0x10>)
 8003422:	f001 f9fc 	bl	800481e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20004cc8 	.word	0x20004cc8

08003430 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <TIM8_BRK_IRQHandler+0x10>)
 8003436:	f005 f961 	bl	80086fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20004744 	.word	0x20004744

08003444 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <TIM8_UP_IRQHandler+0x10>)
 800344a:	f005 f957 	bl	80086fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20004744 	.word	0x20004744

08003458 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <TIM8_TRG_COM_IRQHandler+0x10>)
 800345e:	f005 f94d 	bl	80086fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20004744 	.word	0x20004744

0800346c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <TIM8_CC_IRQHandler+0x10>)
 8003472:	f005 f943 	bl	80086fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20004744 	.word	0x20004744

08003480 <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <CORDIC_IRQHandler+0x10>)
 8003486:	f000 fa7e 	bl	8003986 <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200045dc 	.word	0x200045dc

08003494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <_sbrk+0x5c>)
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <_sbrk+0x60>)
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <_sbrk+0x64>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <_sbrk+0x64>)
 80034b2:	4a12      	ldr	r2, [pc, #72]	; (80034fc <_sbrk+0x68>)
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d207      	bcs.n	80034d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034c4:	f00a fd6a 	bl	800df9c <__errno>
 80034c8:	4603      	mov	r3, r0
 80034ca:	220c      	movs	r2, #12
 80034cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	e009      	b.n	80034e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <_sbrk+0x64>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <_sbrk+0x64>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <_sbrk+0x64>)
 80034e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034e6:	68fb      	ldr	r3, [r7, #12]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2001c000 	.word	0x2001c000
 80034f4:	00001fff 	.word	0x00001fff
 80034f8:	20004740 	.word	0x20004740
 80034fc:	20004fe0 	.word	0x20004fe0

08003500 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <SystemInit+0x28>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <SystemInit+0x28>)
 800350c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SystemInit+0x28>)
 8003516:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800351a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <MX_TIM8_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b09c      	sub	sp, #112	; 0x70
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003532:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003540:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800354c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
 800355c:	615a      	str	r2, [r3, #20]
 800355e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	2234      	movs	r2, #52	; 0x34
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f00a fd42 	bl	800dff0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800356c:	4b45      	ldr	r3, [pc, #276]	; (8003684 <MX_TIM8_Init+0x158>)
 800356e:	4a46      	ldr	r2, [pc, #280]	; (8003688 <MX_TIM8_Init+0x15c>)
 8003570:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <MX_TIM8_Init+0x158>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <MX_TIM8_Init+0x158>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 212;
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <MX_TIM8_Init+0x158>)
 8003580:	22d4      	movs	r2, #212	; 0xd4
 8003582:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003584:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <MX_TIM8_Init+0x158>)
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <MX_TIM8_Init+0x158>)
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003590:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <MX_TIM8_Init+0x158>)
 8003592:	2200      	movs	r2, #0
 8003594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003596:	483b      	ldr	r0, [pc, #236]	; (8003684 <MX_TIM8_Init+0x158>)
 8003598:	f004 fcd6 	bl	8007f48 <HAL_TIM_Base_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80035a2:	f7ff fdff 	bl	80031a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80035ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80035b0:	4619      	mov	r1, r3
 80035b2:	4834      	ldr	r0, [pc, #208]	; (8003684 <MX_TIM8_Init+0x158>)
 80035b4:	f005 fb36 	bl	8008c24 <HAL_TIM_ConfigClockSource>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80035be:	f7ff fdf1 	bl	80031a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80035c2:	4830      	ldr	r0, [pc, #192]	; (8003684 <MX_TIM8_Init+0x158>)
 80035c4:	f004 fd17 	bl	8007ff6 <HAL_TIM_PWM_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80035ce:	f7ff fde9 	bl	80031a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035da:	2300      	movs	r3, #0
 80035dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80035de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035e2:	4619      	mov	r1, r3
 80035e4:	4827      	ldr	r0, [pc, #156]	; (8003684 <MX_TIM8_Init+0x158>)
 80035e6:	f006 f9c3 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80035f0:	f7ff fdd8 	bl	80031a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f4:	2360      	movs	r3, #96	; 0x60
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035fc:	2300      	movs	r3, #0
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003600:	2300      	movs	r3, #0
 8003602:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003612:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003616:	2200      	movs	r2, #0
 8003618:	4619      	mov	r1, r3
 800361a:	481a      	ldr	r0, [pc, #104]	; (8003684 <MX_TIM8_Init+0x158>)
 800361c:	f005 f9ee 	bl	80089fc <HAL_TIM_PWM_ConfigChannel>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003626:	f7ff fdbd 	bl	80031a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800362a:	2300      	movs	r3, #0
 800362c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800363e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003642:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003648:	2300      	movs	r3, #0
 800364a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800365a:	2300      	movs	r3, #0
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4807      	ldr	r0, [pc, #28]	; (8003684 <MX_TIM8_Init+0x158>)
 8003668:	f006 fa10 	bl	8009a8c <HAL_TIMEx_ConfigBreakDeadTime>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8003672:	f7ff fd97 	bl	80031a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003676:	4803      	ldr	r0, [pc, #12]	; (8003684 <MX_TIM8_Init+0x158>)
 8003678:	f000 f856 	bl	8003728 <HAL_TIM_MspPostInit>

}
 800367c:	bf00      	nop
 800367e:	3770      	adds	r7, #112	; 0x70
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20004744 	.word	0x20004744
 8003688:	40013400 	.word	0x40013400

0800368c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_TIM_Base_MspInit+0x8c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d137      	bne.n	800370e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800369e:	4b1f      	ldr	r3, [pc, #124]	; (800371c <HAL_TIM_Base_MspInit+0x90>)
 80036a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_TIM_Base_MspInit+0x90>)
 80036a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036a8:	6613      	str	r3, [r2, #96]	; 0x60
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_TIM_Base_MspInit+0x90>)
 80036ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA1_Channel1;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036b8:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_TIM_Base_MspInit+0x98>)
 80036ba:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036be:	2231      	movs	r2, #49	; 0x31
 80036c0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036c4:	2210      	movs	r2, #16
 80036c6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036da:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036ec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80036f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80036f2:	480b      	ldr	r0, [pc, #44]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 80036f4:	f000 faf2 	bl	8003cdc <HAL_DMA_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80036fe:	f7ff fd51 	bl	80031a4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
 8003708:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_TIM_Base_MspInit+0x94>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40013400 	.word	0x40013400
 800371c:	40021000 	.word	0x40021000
 8003720:	20004790 	.word	0x20004790
 8003724:	40020008 	.word	0x40020008

08003728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a12      	ldr	r2, [pc, #72]	; (8003790 <HAL_TIM_MspPostInit+0x68>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11d      	bne.n	8003786 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003766:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	2302      	movs	r3, #2
 800376a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003770:	2303      	movs	r3, #3
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003774:	2302      	movs	r3, #2
 8003776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	4619      	mov	r1, r3
 800377e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003782:	f000 fd93 	bl	80042ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003786:	bf00      	nop
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40013400 	.word	0x40013400
 8003794:	40021000 	.word	0x40021000

08003798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003798:	480d      	ldr	r0, [pc, #52]	; (80037d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800379a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800379c:	480d      	ldr	r0, [pc, #52]	; (80037d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800379e:	490e      	ldr	r1, [pc, #56]	; (80037d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037a0:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <LoopForever+0xe>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80037a4:	e002      	b.n	80037ac <LoopCopyDataInit>

080037a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037aa:	3304      	adds	r3, #4

080037ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b0:	d3f9      	bcc.n	80037a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037b4:	4c0b      	ldr	r4, [pc, #44]	; (80037e4 <LoopForever+0x16>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b8:	e001      	b.n	80037be <LoopFillZerobss>

080037ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037bc:	3204      	adds	r2, #4

080037be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c0:	d3fb      	bcc.n	80037ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037c2:	f7ff fe9d 	bl	8003500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037c6:	f00a fbef 	bl	800dfa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037ca:	f7ff fc3b 	bl	8003044 <main>

080037ce <LoopForever>:

LoopForever:
    b LoopForever
 80037ce:	e7fe      	b.n	80037ce <LoopForever>
  ldr   r0, =_estack
 80037d0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80037d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80037dc:	0800ee10 	.word	0x0800ee10
  ldr r2, =_sbss
 80037e0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80037e4:	20004fe0 	.word	0x20004fe0

080037e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037e8:	e7fe      	b.n	80037e8 <ADC1_2_IRQHandler>

080037ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f4:	2003      	movs	r0, #3
 80037f6:	f000 fa31 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037fa:	200f      	movs	r0, #15
 80037fc:	f000 f80e 	bl	800381c <HAL_InitTick>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	71fb      	strb	r3, [r7, #7]
 800380a:	e001      	b.n	8003810 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800380c:	f7ff fd9a 	bl	8003344 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003810:	79fb      	ldrb	r3, [r7, #7]

}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003828:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_InitTick+0x68>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d022      	beq.n	8003876 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003830:	4b15      	ldr	r3, [pc, #84]	; (8003888 <HAL_InitTick+0x6c>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_InitTick+0x68>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800383c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fa3c 	bl	8003cc2 <HAL_SYSTICK_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	d809      	bhi.n	800386a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003856:	2200      	movs	r2, #0
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	f04f 30ff 	mov.w	r0, #4294967295
 800385e:	f000 fa08 	bl	8003c72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <HAL_InitTick+0x70>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e007      	b.n	800387a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e004      	b.n	800387a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e001      	b.n	800387a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	2000003c 	.word	0x2000003c
 8003888:	20000034 	.word	0x20000034
 800388c:	20000038 	.word	0x20000038

08003890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_IncTick+0x1c>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_IncTick+0x20>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4413      	add	r3, r2
 800389e:	4a03      	ldr	r2, [pc, #12]	; (80038ac <HAL_IncTick+0x1c>)
 80038a0:	6013      	str	r3, [r2, #0]
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	200047f0 	.word	0x200047f0
 80038b0:	2000003c 	.word	0x2000003c

080038b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return uwTick;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_GetTick+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	200047f0 	.word	0x200047f0

080038cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d4:	f7ff ffee 	bl	80038b4 <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d004      	beq.n	80038f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_Delay+0x40>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038f0:	bf00      	nop
 80038f2:	f7ff ffdf 	bl	80038b4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d8f7      	bhi.n	80038f2 <HAL_Delay+0x26>
  {
  }
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2000003c 	.word	0x2000003c

08003910 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e023      	b.n	800396a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe ffe2 	bl	8002900 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d039      	beq.n	8003a10 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039aa:	d101      	bne.n	80039b0 <HAL_CORDIC_IRQHandler+0x2a>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_CORDIC_IRQHandler+0x2c>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02c      	beq.n	8003a10 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3308      	adds	r3, #8
 80039c4:	4619      	mov	r1, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f84f 	bl	8003a6a <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	1e5a      	subs	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f817 	bl	8003a18 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10e      	bne.n	8003a10 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a00:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak (surcharged) callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffb1 	bl	8003972 <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppInBuff)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a46:	d10a      	bne.n	8003a5e <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	601a      	str	r2, [r3, #0]
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a98:	d10a      	bne.n	8003ab0 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	601a      	str	r2, [r3, #0]
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aee:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <__NVIC_SetPriorityGrouping+0x44>)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	60d3      	str	r3, [r2, #12]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <__NVIC_GetPriorityGrouping+0x18>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	f003 0307 	and.w	r3, r3, #7
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	db0b      	blt.n	8003b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4907      	ldr	r1, [pc, #28]	; (8003b58 <__NVIC_EnableIRQ+0x38>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2001      	movs	r0, #1
 8003b42:	fa00 f202 	lsl.w	r2, r0, r2
 8003b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000e100 	.word	0xe000e100

08003b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db0a      	blt.n	8003b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <__NVIC_SetPriority+0x4c>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b84:	e00a      	b.n	8003b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4908      	ldr	r1, [pc, #32]	; (8003bac <__NVIC_SetPriority+0x50>)
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3b04      	subs	r3, #4
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	440b      	add	r3, r1
 8003b9a:	761a      	strb	r2, [r3, #24]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e100 	.word	0xe000e100
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f1c3 0307 	rsb	r3, r3, #7
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf28      	it	cs
 8003bce:	2304      	movcs	r3, #4
 8003bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d902      	bls.n	8003be0 <NVIC_EncodePriority+0x30>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3b03      	subs	r3, #3
 8003bde:	e000      	b.n	8003be2 <NVIC_EncodePriority+0x32>
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43d9      	mvns	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	4313      	orrs	r3, r2
         );
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c28:	d301      	bcc.n	8003c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00f      	b.n	8003c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <SysTick_Config+0x40>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c36:	210f      	movs	r1, #15
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f7ff ff8e 	bl	8003b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <SysTick_Config+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <SysTick_Config+0x40>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff29 	bl	8003abc <__NVIC_SetPriorityGrouping>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff40 	bl	8003b04 <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff90 	bl	8003bb0 <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5f 	bl	8003b5c <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff33 	bl	8003b20 <__NVIC_EnableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffa4 	bl	8003c18 <SysTick_Config>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e08d      	b.n	8003e0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_DMA_Init+0x138>)
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d80f      	bhi.n	8003d1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <HAL_DMA_Init+0x13c>)
 8003d02:	4413      	add	r3, r2
 8003d04:	4a45      	ldr	r2, [pc, #276]	; (8003e1c <HAL_DMA_Init+0x140>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a42      	ldr	r2, [pc, #264]	; (8003e20 <HAL_DMA_Init+0x144>)
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
 8003d18:	e00e      	b.n	8003d38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <HAL_DMA_Init+0x148>)
 8003d22:	4413      	add	r3, r2
 8003d24:	4a3d      	ldr	r2, [pc, #244]	; (8003e1c <HAL_DMA_Init+0x140>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	009a      	lsls	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a3c      	ldr	r2, [pc, #240]	; (8003e28 <HAL_DMA_Init+0x14c>)
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa2c 	bl	80041e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d98:	d102      	bne.n	8003da0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003db4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d010      	beq.n	8003de0 <HAL_DMA_Init+0x104>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d80c      	bhi.n	8003de0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa4c 	bl	8004264 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	e008      	b.n	8003df2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40020407 	.word	0x40020407
 8003e18:	bffdfff8 	.word	0xbffdfff8
 8003e1c:	cccccccd 	.word	0xcccccccd
 8003e20:	40020000 	.word	0x40020000
 8003e24:	bffdfbf8 	.word	0xbffdfbf8
 8003e28:	40020400 	.word	0x40020400

08003e2c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_DMA_Start_IT+0x20>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e066      	b.n	8003f1a <HAL_DMA_Start_IT+0xee>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d155      	bne.n	8003f0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f970 	bl	800416a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 020e 	orr.w	r2, r2, #14
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e00f      	b.n	8003ec4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 020a 	orr.w	r2, r2, #10
 8003ec2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e005      	b.n	8003f18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
 8003f16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d00d      	beq.n	8003f56 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e047      	b.n	8003fe6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 020e 	bic.w	r2, r2, #14
 8003f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f003 021f 	and.w	r2, r3, #31
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f202 	lsl.w	r2, r1, r2
 8003f98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fa2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00c      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fc4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
    }
  }
  return status;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2204      	movs	r2, #4
 8004012:	409a      	lsls	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d026      	beq.n	800406a <HAL_DMA_IRQHandler+0x7a>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d021      	beq.n	800406a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d107      	bne.n	8004044 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0204 	bic.w	r2, r2, #4
 8004042:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	f003 021f 	and.w	r2, r3, #31
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	2104      	movs	r1, #4
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	2b00      	cmp	r3, #0
 800405e:	d071      	beq.n	8004144 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004068:	e06c      	b.n	8004144 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2202      	movs	r2, #2
 8004074:	409a      	lsls	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02e      	beq.n	80040dc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d029      	beq.n	80040dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 020a 	bic.w	r2, r2, #10
 80040a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2102      	movs	r1, #2
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d038      	beq.n	8004144 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040da:	e033      	b.n	8004144 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2208      	movs	r2, #8
 80040e6:	409a      	lsls	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02a      	beq.n	8004146 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d025      	beq.n	8004146 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 020e 	bic.w	r2, r2, #14
 8004108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f003 021f 	and.w	r2, r3, #31
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2101      	movs	r1, #1
 8004118:	fa01 f202 	lsl.w	r2, r1, r2
 800411c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004144:	bf00      	nop
 8004146:	bf00      	nop
}
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800415c:	b2db      	uxtb	r3, r3
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004180:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f202 	lsl.w	r2, r1, r2
 80041a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d108      	bne.n	80041ca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041c8:	e007      	b.n	80041da <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	60da      	str	r2, [r3, #12]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d802      	bhi.n	8004202 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e001      	b.n	8004206 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004204:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3b08      	subs	r3, #8
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	089b      	lsrs	r3, r3, #2
 8004222:	009a      	lsls	r2, r3, #2
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a0b      	ldr	r2, [pc, #44]	; (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004232:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40020407 	.word	0x40020407
 8004254:	40020800 	.word	0x40020800
 8004258:	40020820 	.word	0x40020820
 800425c:	cccccccd 	.word	0xcccccccd
 8004260:	40020880 	.word	0x40020880

08004264 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	461a      	mov	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004286:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3b01      	subs	r3, #1
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	2201      	movs	r2, #1
 8004292:	409a      	lsls	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	1000823f 	.word	0x1000823f
 80042a8:	40020940 	.word	0x40020940

080042ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042ba:	e15a      	b.n	8004572 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 814c 	beq.w	800456c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d005      	beq.n	80042ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d130      	bne.n	800434e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	2203      	movs	r2, #3
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004322:	2201      	movs	r2, #1
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	f003 0201 	and.w	r2, r3, #1
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b03      	cmp	r3, #3
 8004358:	d017      	beq.n	800438a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	2203      	movs	r2, #3
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d123      	bne.n	80043de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	08da      	lsrs	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3208      	adds	r2, #8
 800439e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	220f      	movs	r2, #15
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	6939      	ldr	r1, [r7, #16]
 80043da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	2203      	movs	r2, #3
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a6 	beq.w	800456c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004420:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <HAL_GPIO_Init+0x2e4>)
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	4a5a      	ldr	r2, [pc, #360]	; (8004590 <HAL_GPIO_Init+0x2e4>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6613      	str	r3, [r2, #96]	; 0x60
 800442c:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_GPIO_Init+0x2e4>)
 800442e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004438:	4a56      	ldr	r2, [pc, #344]	; (8004594 <HAL_GPIO_Init+0x2e8>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	3302      	adds	r3, #2
 8004440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	220f      	movs	r2, #15
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004462:	d01f      	beq.n	80044a4 <HAL_GPIO_Init+0x1f8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a4c      	ldr	r2, [pc, #304]	; (8004598 <HAL_GPIO_Init+0x2ec>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d019      	beq.n	80044a0 <HAL_GPIO_Init+0x1f4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a4b      	ldr	r2, [pc, #300]	; (800459c <HAL_GPIO_Init+0x2f0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_GPIO_Init+0x1f0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <HAL_GPIO_Init+0x2f4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00d      	beq.n	8004498 <HAL_GPIO_Init+0x1ec>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a49      	ldr	r2, [pc, #292]	; (80045a4 <HAL_GPIO_Init+0x2f8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <HAL_GPIO_Init+0x1e8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a48      	ldr	r2, [pc, #288]	; (80045a8 <HAL_GPIO_Init+0x2fc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_GPIO_Init+0x1e4>
 800448c:	2305      	movs	r3, #5
 800448e:	e00a      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 8004490:	2306      	movs	r3, #6
 8004492:	e008      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 8004494:	2304      	movs	r3, #4
 8004496:	e006      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 8004498:	2303      	movs	r3, #3
 800449a:	e004      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 800449c:	2302      	movs	r3, #2
 800449e:	e002      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_GPIO_Init+0x1fa>
 80044a4:	2300      	movs	r3, #0
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	f002 0203 	and.w	r2, r2, #3
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	4093      	lsls	r3, r2
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044b6:	4937      	ldr	r1, [pc, #220]	; (8004594 <HAL_GPIO_Init+0x2e8>)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044c4:	4b39      	ldr	r3, [pc, #228]	; (80045ac <HAL_GPIO_Init+0x300>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044e8:	4a30      	ldr	r2, [pc, #192]	; (80045ac <HAL_GPIO_Init+0x300>)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_GPIO_Init+0x300>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004512:	4a26      	ldr	r2, [pc, #152]	; (80045ac <HAL_GPIO_Init+0x300>)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_GPIO_Init+0x300>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_GPIO_Init+0x300>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <HAL_GPIO_Init+0x300>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <HAL_GPIO_Init+0x300>)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3301      	adds	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f ae9d 	bne.w	80042bc <HAL_GPIO_Init+0x10>
  }
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40021000 	.word	0x40021000
 8004594:	40010000 	.word	0x40010000
 8004598:	48000400 	.word	0x48000400
 800459c:	48000800 	.word	0x48000800
 80045a0:	48000c00 	.word	0x48000c00
 80045a4:	48001000 	.word	0x48001000
 80045a8:	48001400 	.word	0x48001400
 80045ac:	40010400 	.word	0x40010400

080045b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e001      	b.n	80045d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
 80045ec:	4613      	mov	r3, r2
 80045ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045f0:	787b      	ldrb	r3, [r7, #1]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045f6:	887a      	ldrh	r2, [r7, #2]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045fc:	e002      	b.n	8004604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004612:	b08b      	sub	sp, #44	; 0x2c
 8004614:	af06      	add	r7, sp, #24
 8004616:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0d7      	b.n	80047d2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f009 f9d8 	bl	800d9ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2203      	movs	r2, #3
 8004640:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f005 fb2e 	bl	8009caa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
 8004652:	e04c      	b.n	80046ee <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	440b      	add	r3, r1
 8004664:	3301      	adds	r3, #1
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	440b      	add	r3, r1
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800467e:	7bfa      	ldrb	r2, [r7, #15]
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	b298      	uxth	r0, r3
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	440b      	add	r3, r1
 8004690:	3336      	adds	r3, #54	; 0x36
 8004692:	4602      	mov	r2, r0
 8004694:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	440b      	add	r3, r1
 80046a6:	3303      	adds	r3, #3
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	440b      	add	r3, r1
 80046ba:	3338      	adds	r3, #56	; 0x38
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046c0:	7bfa      	ldrb	r2, [r7, #15]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	333c      	adds	r3, #60	; 0x3c
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	440b      	add	r3, r1
 80046e2:	3340      	adds	r3, #64	; 0x40
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	3301      	adds	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3ad      	bcc.n	8004654 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e044      	b.n	8004788 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	440b      	add	r3, r1
 800470c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	440b      	add	r3, r1
 8004722:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	440b      	add	r3, r1
 8004738:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	440b      	add	r3, r1
 800474e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	440b      	add	r3, r1
 800477a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	3301      	adds	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	d3b5      	bcc.n	80046fe <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	687e      	ldr	r6, [r7, #4]
 800479a:	466d      	mov	r5, sp
 800479c:	f106 0410 	add.w	r4, r6, #16
 80047a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	1d33      	adds	r3, r6, #4
 80047aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ac:	6838      	ldr	r0, [r7, #0]
 80047ae:	f005 fa97 	bl	8009ce0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d102      	bne.n	80047d0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fc11 	bl	8005ff2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_PCD_Start+0x16>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e012      	b.n	8004816 <HAL_PCD_Start+0x3c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f005 fa3d 	bl	8009c7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f007 fc56 	bl	800c0b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f007 fc5b 	bl	800c0e6 <USB_ReadInterrupts>
 8004830:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fb0e 	bl	8004e5e <PCD_EP_ISR_Handler>

    return;
 8004842:	e110      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	2b00      	cmp	r3, #0
 800484c:	d013      	beq.n	8004876 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004860:	b292      	uxth	r2, r2
 8004862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f009 f949 	bl	800dafe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800486c:	2100      	movs	r1, #0
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8fc 	bl	8004a6c <HAL_PCD_SetAddress>

    return;
 8004874:	e0f7      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004888:	b29a      	uxth	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004892:	b292      	uxth	r2, r2
 8004894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004898:	e0e5      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b6:	b292      	uxth	r2, r2
 80048b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80048bc:	e0d3      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d034      	beq.n	8004932 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	b292      	uxth	r2, r2
 80048dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0208 	bic.w	r2, r2, #8
 80048f2:	b292      	uxth	r2, r2
 80048f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800490a:	2100      	movs	r1, #0
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f009 fac5 	bl	800de9c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f009 f92c 	bl	800db70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004920:	b29a      	uxth	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800492a:	b292      	uxth	r2, r2
 800492c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004930:	e099      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004938:	2b00      	cmp	r3, #0
 800493a:	d027      	beq.n	800498c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	b292      	uxth	r2, r2
 8004950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004966:	b292      	uxth	r2, r2
 8004968:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0204 	orr.w	r2, r2, #4
 800497e:	b292      	uxth	r2, r2
 8004980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f009 f8d9 	bl	800db3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800498a:	e06c      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d040      	beq.n	8004a18 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a8:	b292      	uxth	r2, r2
 80049aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d12b      	bne.n	8004a10 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0204 	orr.w	r2, r2, #4
 80049ca:	b292      	uxth	r2, r2
 80049cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0208 	orr.w	r2, r2, #8
 80049e2:	b292      	uxth	r2, r2
 80049e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a06:	2101      	movs	r1, #1
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f009 fa47 	bl	800de9c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004a0e:	e02a      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f009 f893 	bl	800db3c <HAL_PCD_SuspendCallback>
    return;
 8004a16:	e026      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00f      	beq.n	8004a42 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a34:	b292      	uxth	r2, r2
 8004a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f009 f851 	bl	800dae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a40:	e011      	b.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00c      	beq.n	8004a66 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004a64:	bf00      	nop
  }
}
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_PCD_SetAddress+0x1a>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e013      	b.n	8004aae <HAL_PCD_SetAddress+0x42>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f007 faf6 	bl	800c090 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	4608      	mov	r0, r1
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	70fb      	strb	r3, [r7, #3]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	803b      	strh	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da0e      	bge.n	8004afa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	705a      	strb	r2, [r3, #1]
 8004af8:	e00e      	b.n	8004b18 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	f003 0207 	and.w	r2, r3, #7
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	4413      	add	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b24:	883a      	ldrh	r2, [r7, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	78ba      	ldrb	r2, [r7, #2]
 8004b2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b42:	78bb      	ldrb	r3, [r7, #2]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d102      	bne.n	8004b4e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_PCD_EP_Open+0xa6>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e00e      	b.n	8004b7a <HAL_PCD_EP_Open+0xc4>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f005 f8da 	bl	8009d24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004b78:	7afb      	ldrb	r3, [r7, #11]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da0e      	bge.n	8004bb4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	705a      	strb	r2, [r3, #1]
 8004bb2:	e00e      	b.n	8004bd2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 0207 	and.w	r2, r3, #7
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_PCD_EP_Close+0x6a>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e00e      	b.n	8004c0a <HAL_PCD_EP_Close+0x88>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68f9      	ldr	r1, [r7, #12]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f005 fc26 	bl	800a44c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c22:	7afb      	ldrb	r3, [r7, #11]
 8004c24:	f003 0207 	and.w	r2, r3, #7
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c52:	7afb      	ldrb	r3, [r7, #11]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c5e:	7afb      	ldrb	r3, [r7, #11]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d106      	bne.n	8004c76 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6979      	ldr	r1, [r7, #20]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f005 fdd9 	bl	800a826 <USB_EPStartXfer>
 8004c74:	e005      	b.n	8004c82 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6979      	ldr	r1, [r7, #20]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f005 fdd2 	bl	800a826 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c9c:	7afb      	ldrb	r3, [r7, #11]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd8:	7afb      	ldrb	r3, [r7, #11]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6979      	ldr	r1, [r7, #20]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f005 fd96 	bl	800a826 <USB_EPStartXfer>
 8004cfa:	e005      	b.n	8004d08 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6979      	ldr	r1, [r7, #20]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f005 fd8f 	bl	800a826 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 0207 	and.w	r2, r3, #7
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d901      	bls.n	8004d30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e03e      	b.n	8004dae <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	da0e      	bge.n	8004d56 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	705a      	strb	r2, [r3, #1]
 8004d54:	e00c      	b.n	8004d70 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	4413      	add	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_PCD_EP_SetStall+0x7e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e00e      	b.n	8004dae <HAL_PCD_EP_SetStall+0x9c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68f9      	ldr	r1, [r7, #12]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f007 f877 	bl	800be92 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	f003 020f 	and.w	r2, r3, #15
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d901      	bls.n	8004dd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e040      	b.n	8004e56 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da0e      	bge.n	8004dfa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	705a      	strb	r2, [r3, #1]
 8004df8:	e00e      	b.n	8004e18 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 0207 	and.w	r2, r3, #7
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_PCD_EP_ClrStall+0x82>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e00e      	b.n	8004e56 <HAL_PCD_EP_ClrStall+0xa0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f007 f874 	bl	800bf34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b096      	sub	sp, #88	; 0x58
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e66:	e39c      	b.n	80055a2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004e74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004e82:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 815e 	bne.w	8005148 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004e8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d150      	bne.n	8004f3a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	81fb      	strh	r3, [r7, #14]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	89fb      	ldrh	r3, [r7, #14]
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3328      	adds	r3, #40	; 0x28
 8004ec0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f008 fdd7 	bl	800daae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 834a 	beq.w	80055a2 <PCD_EP_ISR_Handler+0x744>
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f040 8345 	bne.w	80055a2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f38:	e333      	b.n	80055a2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f40:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d032      	beq.n	8004fbe <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f90:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f007 f8f9 	bl	800c18a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	823b      	strh	r3, [r7, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	8a3a      	ldrh	r2, [r7, #16]
 8004fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fb2:	b292      	uxth	r2, r2
 8004fb4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f008 fd4c 	bl	800da54 <HAL_PCD_SetupStageCallback>
 8004fbc:	e2f1      	b.n	80055a2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fbe:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f280 82ed 	bge.w	80055a2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	83fb      	strh	r3, [r7, #30]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	8bfa      	ldrh	r2, [r7, #30]
 8004fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	4413      	add	r3, r2
 8005000:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800500a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800500e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d019      	beq.n	800504a <PCD_EP_ISR_Handler+0x1ec>
 8005016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d015      	beq.n	800504a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005024:	6959      	ldr	r1, [r3, #20]
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800502a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800502e:	b29b      	uxth	r3, r3
 8005030:	f007 f8ab 	bl	800c18a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	441a      	add	r2, r3
 800503e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005040:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005042:	2100      	movs	r1, #0
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f008 fd17 	bl	800da78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 82a3 	bne.w	80055a2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506a:	b29b      	uxth	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	4413      	add	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b3e      	cmp	r3, #62	; 0x3e
 8005082:	d918      	bls.n	80050b6 <PCD_EP_ISR_Handler+0x258>
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <PCD_EP_ISR_Handler+0x240>
 8005098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509a:	3b01      	subs	r3, #1
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
 800509e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e029      	b.n	800510a <PCD_EP_ISR_Handler+0x2ac>
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d112      	bne.n	80050e4 <PCD_EP_ISR_Handler+0x286>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050dc:	b29a      	uxth	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	801a      	strh	r2, [r3, #0]
 80050e2:	e012      	b.n	800510a <PCD_EP_ISR_Handler+0x2ac>
 80050e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	647b      	str	r3, [r7, #68]	; 0x44
 80050ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <PCD_EP_ISR_Handler+0x2a0>
 80050f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fa:	3301      	adds	r3, #1
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
 80050fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005100:	b29b      	uxth	r3, r3
 8005102:	029b      	lsls	r3, r3, #10
 8005104:	b29a      	uxth	r2, r3
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	827b      	strh	r3, [r7, #18]
 800511c:	8a7b      	ldrh	r3, [r7, #18]
 800511e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005122:	827b      	strh	r3, [r7, #18]
 8005124:	8a7b      	ldrh	r3, [r7, #18]
 8005126:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800512a:	827b      	strh	r3, [r7, #18]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	8a7b      	ldrh	r3, [r7, #18]
 8005132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	b29b      	uxth	r3, r3
 8005144:	8013      	strh	r3, [r2, #0]
 8005146:	e22c      	b.n	80055a2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800515c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005160:	2b00      	cmp	r3, #0
 8005162:	f280 80f6 	bge.w	8005352 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29a      	uxth	r2, r3
 8005178:	f640 738f 	movw	r3, #3983	; 0xf8f
 800517c:	4013      	ands	r3, r2
 800517e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005198:	b292      	uxth	r2, r2
 800519a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800519c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	7b1b      	ldrb	r3, [r3, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d123      	bne.n	8005202 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	4413      	add	r3, r2
 80051d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80051e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 808e 	beq.w	8005308 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	6959      	ldr	r1, [r3, #20]
 80051f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f6:	88da      	ldrh	r2, [r3, #6]
 80051f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051fc:	f006 ffc5 	bl	800c18a <USB_ReadPMA>
 8005200:	e082      	b.n	8005308 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005204:	78db      	ldrb	r3, [r3, #3]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d10a      	bne.n	8005220 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800520a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800520e:	461a      	mov	r2, r3
 8005210:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9d3 	bl	80055be <HAL_PCD_EP_DB_Receive>
 8005218:	4603      	mov	r3, r0
 800521a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800521e:	e073      	b.n	8005308 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d022      	beq.n	80052c4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	4413      	add	r3, r2
 8005298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80052a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d02c      	beq.n	8005308 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b4:	6959      	ldr	r1, [r3, #20]
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	891a      	ldrh	r2, [r3, #8]
 80052ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052be:	f006 ff64 	bl	800c18a <USB_ReadPMA>
 80052c2:	e021      	b.n	8005308 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80052ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	6959      	ldr	r1, [r3, #20]
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	895a      	ldrh	r2, [r3, #10]
 8005300:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005304:	f006 ff41 	bl	800c18a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005310:	441a      	add	r2, r3
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800531e:	441a      	add	r2, r3
 8005320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005322:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <PCD_EP_ISR_Handler+0x4da>
 800532c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d206      	bcs.n	8005346 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f008 fb9a 	bl	800da78 <HAL_PCD_DataOutStageCallback>
 8005344:	e005      	b.n	8005352 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800534c:	4618      	mov	r0, r3
 800534e:	f005 fa6a 	bl	800a826 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005352:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8121 	beq.w	80055a2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8005360:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	441a      	add	r2, r3
 80053a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80053b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b2:	78db      	ldrb	r3, [r3, #3]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	f000 80a2 	beq.w	80054fe <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80053ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053bc:	2200      	movs	r2, #0
 80053be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80053c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c2:	7b1b      	ldrb	r3, [r3, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8093 	beq.w	80054f0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d046      	beq.n	8005464 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d126      	bne.n	800542c <PCD_EP_ISR_Handler+0x5ce>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	4413      	add	r3, r2
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	00da      	lsls	r2, r3, #3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	4413      	add	r3, r2
 8005400:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005410:	b29a      	uxth	r2, r3
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005424:	b29a      	uxth	r2, r3
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	e061      	b.n	80054f0 <PCD_EP_ISR_Handler+0x692>
 800542c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d15d      	bne.n	80054f0 <PCD_EP_ISR_Handler+0x692>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	4413      	add	r3, r2
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	00da      	lsls	r2, r3, #3
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005454:	4413      	add	r3, r2
 8005456:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2200      	movs	r2, #0
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e045      	b.n	80054f0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800546a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d126      	bne.n	80054c0 <PCD_EP_ISR_Handler+0x662>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005480:	b29b      	uxth	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	4413      	add	r3, r2
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
 800548a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	00da      	lsls	r2, r3, #3
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	4413      	add	r3, r2
 8005494:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005498:	633b      	str	r3, [r7, #48]	; 0x30
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	e017      	b.n	80054f0 <PCD_EP_ISR_Handler+0x692>
 80054c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d113      	bne.n	80054f0 <PCD_EP_ISR_Handler+0x692>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	4413      	add	r3, r2
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	00da      	lsls	r2, r3, #3
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e2:	4413      	add	r3, r2
 80054e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2200      	movs	r2, #0
 80054ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f008 fad9 	bl	800daae <HAL_PCD_DataInStageCallback>
 80054fc:	e051      	b.n	80055a2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80054fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d144      	bne.n	8005594 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005512:	b29b      	uxth	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	4413      	add	r3, r2
 8005524:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800553a:	429a      	cmp	r2, r3
 800553c:	d907      	bls.n	800554e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005546:	1ad2      	subs	r2, r2, r3
 8005548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554a:	619a      	str	r2, [r3, #24]
 800554c:	e002      	b.n	8005554 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800554e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005550:	2200      	movs	r2, #0
 8005552:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f008 faa3 	bl	800daae <HAL_PCD_DataInStageCallback>
 8005568:	e01b      	b.n	80055a2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	695a      	ldr	r2, [r3, #20]
 800556e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005572:	441a      	add	r2, r3
 8005574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005576:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005580:	441a      	add	r2, r3
 8005582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005584:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800558c:	4618      	mov	r0, r3
 800558e:	f005 f94a 	bl	800a826 <USB_EPStartXfer>
 8005592:	e006      	b.n	80055a2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005594:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005598:	461a      	mov	r2, r3
 800559a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f917 	bl	80057d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	b21b      	sxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f6ff ac5a 	blt.w	8004e68 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3758      	adds	r7, #88	; 0x58
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	4613      	mov	r3, r2
 80055ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d07c      	beq.n	80056d0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	8b7b      	ldrh	r3, [r7, #26]
 8005602:	429a      	cmp	r2, r3
 8005604:	d306      	bcc.n	8005614 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	8b7b      	ldrh	r3, [r7, #26]
 800560c:	1ad2      	subs	r2, r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	619a      	str	r2, [r3, #24]
 8005612:	e002      	b.n	800561a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d123      	bne.n	800566a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563c:	833b      	strh	r3, [r7, #24]
 800563e:	8b3b      	ldrh	r3, [r7, #24]
 8005640:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005644:	833b      	strh	r3, [r7, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	8b3b      	ldrh	r3, [r7, #24]
 8005656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01f      	beq.n	80056b4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	82fb      	strh	r3, [r7, #22]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	8afb      	ldrh	r3, [r7, #22]
 80056a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80056b4:	8b7b      	ldrh	r3, [r7, #26]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8085 	beq.w	80057c6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6959      	ldr	r1, [r3, #20]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	891a      	ldrh	r2, [r3, #8]
 80056c8:	8b7b      	ldrh	r3, [r7, #26]
 80056ca:	f006 fd5e 	bl	800c18a <USB_ReadPMA>
 80056ce:	e07a      	b.n	80057c6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d8:	b29b      	uxth	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	8b7b      	ldrh	r3, [r7, #26]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d306      	bcc.n	800570e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	8b7b      	ldrh	r3, [r7, #26]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	619a      	str	r2, [r3, #24]
 800570c:	e002      	b.n	8005714 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d123      	bne.n	8005764 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	83fb      	strh	r3, [r7, #30]
 8005738:	8bfb      	ldrh	r3, [r7, #30]
 800573a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800573e:	83fb      	strh	r3, [r7, #30]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	441a      	add	r2, r3
 800574e:	8bfb      	ldrh	r3, [r7, #30]
 8005750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	b29b      	uxth	r3, r3
 8005762:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11f      	bne.n	80057ae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	83bb      	strh	r3, [r7, #28]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	441a      	add	r2, r3
 8005798:	8bbb      	ldrh	r3, [r7, #28]
 800579a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80057ae:	8b7b      	ldrh	r3, [r7, #26]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6959      	ldr	r1, [r3, #20]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	895a      	ldrh	r2, [r3, #10]
 80057c0:	8b7b      	ldrh	r3, [r7, #26]
 80057c2:	f006 fce2 	bl	800c18a <USB_ReadPMA>
    }
  }

  return count;
 80057c6:	8b7b      	ldrh	r3, [r7, #26]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b0a2      	sub	sp, #136	; 0x88
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 81c5 	beq.w	8005b74 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	4413      	add	r3, r2
 8005804:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800581a:	429a      	cmp	r2, r3
 800581c:	d907      	bls.n	800582e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	619a      	str	r2, [r3, #24]
 800582c:	e002      	b.n	8005834 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 80b9 	bne.w	80059b0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d126      	bne.n	8005894 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	4413      	add	r3, r2
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	00da      	lsls	r2, r3, #3
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	4413      	add	r3, r2
 8005868:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005878:	b29a      	uxth	r2, r3
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e01a      	b.n	80058ca <HAL_PCD_EP_DB_Transmit+0xfa>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d116      	bne.n	80058ca <HAL_PCD_EP_DB_Transmit+0xfa>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	4413      	add	r3, r2
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	00da      	lsls	r2, r3, #3
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	4413      	add	r3, r2
 80058be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2200      	movs	r2, #0
 80058c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d126      	bne.n	8005926 <HAL_PCD_EP_DB_Transmit+0x156>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	4413      	add	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	00da      	lsls	r2, r3, #3
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590a:	b29a      	uxth	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29a      	uxth	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e017      	b.n	8005956 <HAL_PCD_EP_DB_Transmit+0x186>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d113      	bne.n	8005956 <HAL_PCD_EP_DB_Transmit+0x186>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005936:	b29b      	uxth	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	4413      	add	r3, r2
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	00da      	lsls	r2, r3, #3
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	4413      	add	r3, r2
 800594a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2200      	movs	r2, #0
 8005954:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f008 f8a6 	bl	800daae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 82d2 	beq.w	8005f12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	827b      	strh	r3, [r7, #18]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	8a7b      	ldrh	r3, [r7, #18]
 800599a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	8013      	strh	r3, [r2, #0]
 80059ae:	e2b0      	b.n	8005f12 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d021      	beq.n	80059fe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f040 8284 	bne.w	8005f12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a12:	441a      	add	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a20:	441a      	add	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6a1a      	ldr	r2, [r3, #32]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d309      	bcc.n	8005a46 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	621a      	str	r2, [r3, #32]
 8005a44:	e015      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005a4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a5c:	e009      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d155      	bne.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x356>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	4413      	add	r3, r2
 8005a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	00da      	lsls	r2, r3, #3
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa6:	d916      	bls.n	8005ad6 <HAL_PCD_EP_DB_Transmit+0x306>
 8005aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aba:	3b01      	subs	r3, #1
 8005abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	e043      	b.n	8005b5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d112      	bne.n	8005b02 <HAL_PCD_EP_DB_Transmit+0x332>
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e02d      	b.n	8005b5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_PCD_EP_DB_Transmit+0x348>
 8005b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b14:	3301      	adds	r3, #1
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e01b      	b.n	8005b5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d117      	bne.n	8005b5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b42:	4413      	add	r3, r2
 8005b44:	643b      	str	r3, [r7, #64]	; 0x40
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	00da      	lsls	r2, r3, #3
 8005b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4e:	4413      	add	r3, r2
 8005b50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6959      	ldr	r1, [r3, #20]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	891a      	ldrh	r2, [r3, #8]
 8005b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f006 faca 	bl	800c106 <USB_WritePMA>
 8005b72:	e1ce      	b.n	8005f12 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4413      	add	r3, r2
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d307      	bcc.n	8005bb8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	619a      	str	r2, [r3, #24]
 8005bb6:	e002      	b.n	8005bbe <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f040 80c4 	bne.w	8005d50 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d126      	bne.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x44e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005be4:	4413      	add	r3, r2
 8005be6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	00da      	lsls	r2, r3, #3
 8005bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8005bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e01a      	b.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x484>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d116      	bne.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x484>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3a:	4413      	add	r3, r2
 8005c3c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	00da      	lsls	r2, r3, #3
 8005c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c46:	4413      	add	r3, r2
 8005c48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c50:	2200      	movs	r2, #0
 8005c52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d12f      	bne.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	00da      	lsls	r2, r3, #3
 8005c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e017      	b.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0x522>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d113      	bne.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0x522>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cd8:	4413      	add	r3, r2
 8005cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	00da      	lsls	r2, r3, #3
 8005ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cea:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cee:	2200      	movs	r2, #0
 8005cf0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f007 fed8 	bl	800daae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 8104 	bne.w	8005f12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	441a      	add	r2, r3
 8005d36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	8013      	strh	r3, [r2, #0]
 8005d4e:	e0e0      	b.n	8005f12 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d121      	bne.n	8005d9e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	f040 80b4 	bne.w	8005f12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005db2:	441a      	add	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d309      	bcc.n	8005de6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	621a      	str	r2, [r3, #32]
 8005de4:	e015      	b.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d107      	bne.n	8005dfe <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005dee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005df2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005dfc:	e009      	b.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2200      	movs	r2, #0
 8005e08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	663b      	str	r3, [r7, #96]	; 0x60
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d155      	bne.n	8005ecc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e34:	4413      	add	r3, r2
 8005e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	00da      	lsls	r2, r3, #3
 8005e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e40:	4413      	add	r3, r2
 8005e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e46:	657b      	str	r3, [r7, #84]	; 0x54
 8005e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e4c:	d916      	bls.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	677b      	str	r3, [r7, #116]	; 0x74
 8005e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <HAL_PCD_EP_DB_Transmit+0x694>
 8005e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e60:	3b01      	subs	r3, #1
 8005e62:	677b      	str	r3, [r7, #116]	; 0x74
 8005e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	e040      	b.n	8005efe <HAL_PCD_EP_DB_Transmit+0x72e>
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d112      	bne.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e02a      	b.n	8005efe <HAL_PCD_EP_DB_Transmit+0x72e>
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	677b      	str	r3, [r7, #116]	; 0x74
 8005eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eba:	3301      	adds	r3, #1
 8005ebc:	677b      	str	r3, [r7, #116]	; 0x74
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	029b      	lsls	r3, r3, #10
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e018      	b.n	8005efe <HAL_PCD_EP_DB_Transmit+0x72e>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d114      	bne.n	8005efe <HAL_PCD_EP_DB_Transmit+0x72e>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee2:	4413      	add	r3, r2
 8005ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	00da      	lsls	r2, r3, #3
 8005eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005efc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6959      	ldr	r1, [r3, #20]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	895a      	ldrh	r2, [r3, #10]
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f006 f8fa 	bl	800c106 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2c:	823b      	strh	r3, [r7, #16]
 8005f2e:	8a3b      	ldrh	r3, [r7, #16]
 8005f30:	f083 0310 	eor.w	r3, r3, #16
 8005f34:	823b      	strh	r3, [r7, #16]
 8005f36:	8a3b      	ldrh	r3, [r7, #16]
 8005f38:	f083 0320 	eor.w	r3, r3, #32
 8005f3c:	823b      	strh	r3, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	441a      	add	r2, r3
 8005f4c:	8a3b      	ldrh	r3, [r7, #16]
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3788      	adds	r7, #136	; 0x88
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	817b      	strh	r3, [r7, #10]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f7e:	897b      	ldrh	r3, [r7, #10]
 8005f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e009      	b.n	8005fb6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fa2:	897a      	ldrh	r2, [r7, #10]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005fb6:	893b      	ldrh	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d107      	bne.n	8005fcc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	80da      	strh	r2, [r3, #6]
 8005fca:	e00b      	b.n	8005fe4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0c1b      	lsrs	r3, r3, #16
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006016:	b29b      	uxth	r3, r3
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800602a:	b29b      	uxth	r3, r3
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d141      	bne.n	80060da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006056:	4b4b      	ldr	r3, [pc, #300]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800605e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006062:	d131      	bne.n	80060c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006064:	4b47      	ldr	r3, [pc, #284]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606a:	4a46      	ldr	r2, [pc, #280]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800606c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006074:	4b43      	ldr	r3, [pc, #268]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800607c:	4a41      	ldr	r2, [pc, #260]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800607e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006084:	4b40      	ldr	r3, [pc, #256]	; (8006188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2232      	movs	r2, #50	; 0x32
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	4a3f      	ldr	r2, [pc, #252]	; (800618c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	0c9b      	lsrs	r3, r3, #18
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800609a:	e002      	b.n	80060a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3b01      	subs	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060a2:	4b38      	ldr	r3, [pc, #224]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	d102      	bne.n	80060b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f2      	bne.n	800609c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060b6:	4b33      	ldr	r3, [pc, #204]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	d158      	bne.n	8006176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e057      	b.n	8006178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060c8:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ce:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80060d8:	e04d      	b.n	8006176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d141      	bne.n	8006166 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060e2:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ee:	d131      	bne.n	8006154 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060f0:	4b24      	ldr	r3, [pc, #144]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f6:	4a23      	ldr	r2, [pc, #140]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006100:	4b20      	ldr	r3, [pc, #128]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006108:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800610a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800610e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006110:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2232      	movs	r2, #50	; 0x32
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	0c9b      	lsrs	r3, r3, #18
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006126:	e002      	b.n	800612e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3b01      	subs	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800613a:	d102      	bne.n	8006142 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f2      	bne.n	8006128 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006142:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800614e:	d112      	bne.n	8006176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e011      	b.n	8006178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006164:	e007      	b.n	8006176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800616e:	4a05      	ldr	r2, [pc, #20]	; (8006184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006174:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40007000 	.word	0x40007000
 8006188:	20000034 	.word	0x20000034
 800618c:	431bde83 	.word	0x431bde83

08006190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e306      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d075      	beq.n	800629a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ae:	4b97      	ldr	r3, [pc, #604]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 030c 	and.w	r3, r3, #12
 80061b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061b8:	4b94      	ldr	r3, [pc, #592]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d102      	bne.n	80061ce <HAL_RCC_OscConfig+0x3e>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d002      	beq.n	80061d4 <HAL_RCC_OscConfig+0x44>
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d10b      	bne.n	80061ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d4:	4b8d      	ldr	r3, [pc, #564]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d05b      	beq.n	8006298 <HAL_RCC_OscConfig+0x108>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d157      	bne.n	8006298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e2e1      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d106      	bne.n	8006204 <HAL_RCC_OscConfig+0x74>
 80061f6:	4b85      	ldr	r3, [pc, #532]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a84      	ldr	r2, [pc, #528]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80061fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e01d      	b.n	8006240 <HAL_RCC_OscConfig+0xb0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x98>
 800620e:	4b7f      	ldr	r3, [pc, #508]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a7e      	ldr	r2, [pc, #504]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b7c      	ldr	r3, [pc, #496]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a7b      	ldr	r2, [pc, #492]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e00b      	b.n	8006240 <HAL_RCC_OscConfig+0xb0>
 8006228:	4b78      	ldr	r3, [pc, #480]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a77      	ldr	r2, [pc, #476]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800622e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	4b75      	ldr	r3, [pc, #468]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a74      	ldr	r2, [pc, #464]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800623a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fd fb34 	bl	80038b4 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006250:	f7fd fb30 	bl	80038b4 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e2a6      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006262:	4b6a      	ldr	r3, [pc, #424]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0xc0>
 800626e:	e014      	b.n	800629a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fd fb20 	bl	80038b4 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006278:	f7fd fb1c 	bl	80038b4 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	; 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e292      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800628a:	4b60      	ldr	r3, [pc, #384]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0xe8>
 8006296:	e000      	b.n	800629a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d075      	beq.n	8006392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062a6:	4b59      	ldr	r3, [pc, #356]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b0:	4b56      	ldr	r3, [pc, #344]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d102      	bne.n	80062c6 <HAL_RCC_OscConfig+0x136>
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d002      	beq.n	80062cc <HAL_RCC_OscConfig+0x13c>
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d11f      	bne.n	800630c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062cc:	4b4f      	ldr	r3, [pc, #316]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_OscConfig+0x154>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e265      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e4:	4b49      	ldr	r3, [pc, #292]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	4946      	ldr	r1, [pc, #280]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062f8:	4b45      	ldr	r3, [pc, #276]	; (8006410 <HAL_RCC_OscConfig+0x280>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fd fa8d 	bl	800381c <HAL_InitTick>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d043      	beq.n	8006390 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e251      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d023      	beq.n	800635c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006314:	4b3d      	ldr	r3, [pc, #244]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3c      	ldr	r2, [pc, #240]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800631a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800631e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fd fac8 	bl	80038b4 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006328:	f7fd fac4 	bl	80038b4 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e23a      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800633a:	4b34      	ldr	r3, [pc, #208]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006346:	4b31      	ldr	r3, [pc, #196]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	061b      	lsls	r3, r3, #24
 8006354:	492d      	ldr	r1, [pc, #180]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006356:	4313      	orrs	r3, r2
 8006358:	604b      	str	r3, [r1, #4]
 800635a:	e01a      	b.n	8006392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635c:	4b2b      	ldr	r3, [pc, #172]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a2a      	ldr	r2, [pc, #168]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006368:	f7fd faa4 	bl	80038b4 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006370:	f7fd faa0 	bl	80038b4 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e216      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006382:	4b22      	ldr	r3, [pc, #136]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f0      	bne.n	8006370 <HAL_RCC_OscConfig+0x1e0>
 800638e:	e000      	b.n	8006392 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006390:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d041      	beq.n	8006422 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01c      	beq.n	80063e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a6:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80063a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ac:	4a17      	ldr	r2, [pc, #92]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b6:	f7fd fa7d 	bl	80038b4 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063be:	f7fd fa79 	bl	80038b4 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e1ef      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80063d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0ef      	beq.n	80063be <HAL_RCC_OscConfig+0x22e>
 80063de:	e020      	b.n	8006422 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80063e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e6:	4a09      	ldr	r2, [pc, #36]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fd fa60 	bl	80038b4 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063f6:	e00d      	b.n	8006414 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f8:	f7fd fa5c 	bl	80038b4 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d906      	bls.n	8006414 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1d2      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
 800640a:	bf00      	nop
 800640c:	40021000 	.word	0x40021000
 8006410:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006414:	4b8c      	ldr	r3, [pc, #560]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1ea      	bne.n	80063f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80a6 	beq.w	800657c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006430:	2300      	movs	r3, #0
 8006432:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006434:	4b84      	ldr	r3, [pc, #528]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_RCC_OscConfig+0x2b4>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <HAL_RCC_OscConfig+0x2b6>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644a:	4b7f      	ldr	r3, [pc, #508]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 800644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644e:	4a7e      	ldr	r2, [pc, #504]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006454:	6593      	str	r3, [r2, #88]	; 0x58
 8006456:	4b7c      	ldr	r3, [pc, #496]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006462:	2301      	movs	r3, #1
 8006464:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006466:	4b79      	ldr	r3, [pc, #484]	; (800664c <HAL_RCC_OscConfig+0x4bc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d118      	bne.n	80064a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006472:	4b76      	ldr	r3, [pc, #472]	; (800664c <HAL_RCC_OscConfig+0x4bc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a75      	ldr	r2, [pc, #468]	; (800664c <HAL_RCC_OscConfig+0x4bc>)
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800647e:	f7fd fa19 	bl	80038b4 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006486:	f7fd fa15 	bl	80038b4 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e18b      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006498:	4b6c      	ldr	r3, [pc, #432]	; (800664c <HAL_RCC_OscConfig+0x4bc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d108      	bne.n	80064be <HAL_RCC_OscConfig+0x32e>
 80064ac:	4b66      	ldr	r3, [pc, #408]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	4a65      	ldr	r2, [pc, #404]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064bc:	e024      	b.n	8006508 <HAL_RCC_OscConfig+0x378>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d110      	bne.n	80064e8 <HAL_RCC_OscConfig+0x358>
 80064c6:	4b60      	ldr	r3, [pc, #384]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064cc:	4a5e      	ldr	r2, [pc, #376]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064ce:	f043 0304 	orr.w	r3, r3, #4
 80064d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064d6:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064dc:	4a5a      	ldr	r2, [pc, #360]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064e6:	e00f      	b.n	8006508 <HAL_RCC_OscConfig+0x378>
 80064e8:	4b57      	ldr	r3, [pc, #348]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ee:	4a56      	ldr	r2, [pc, #344]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064f8:	4b53      	ldr	r3, [pc, #332]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	4a52      	ldr	r2, [pc, #328]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006500:	f023 0304 	bic.w	r3, r3, #4
 8006504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d016      	beq.n	800653e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006510:	f7fd f9d0 	bl	80038b4 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006516:	e00a      	b.n	800652e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006518:	f7fd f9cc 	bl	80038b4 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e140      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800652e:	4b46      	ldr	r3, [pc, #280]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ed      	beq.n	8006518 <HAL_RCC_OscConfig+0x388>
 800653c:	e015      	b.n	800656a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653e:	f7fd f9b9 	bl	80038b4 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006544:	e00a      	b.n	800655c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7fd f9b5 	bl	80038b4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f241 3288 	movw	r2, #5000	; 0x1388
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e129      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800655c:	4b3a      	ldr	r3, [pc, #232]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1ed      	bne.n	8006546 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800656a:	7ffb      	ldrb	r3, [r7, #31]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d105      	bne.n	800657c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006570:	4b35      	ldr	r3, [pc, #212]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006574:	4a34      	ldr	r2, [pc, #208]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800657a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d03c      	beq.n	8006602 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01c      	beq.n	80065ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006590:	4b2d      	ldr	r3, [pc, #180]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006596:	4a2c      	ldr	r2, [pc, #176]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a0:	f7fd f988 	bl	80038b4 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065a8:	f7fd f984 	bl	80038b4 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e0fa      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065ba:	4b23      	ldr	r3, [pc, #140]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80065bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ef      	beq.n	80065a8 <HAL_RCC_OscConfig+0x418>
 80065c8:	e01b      	b.n	8006602 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065ca:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80065cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065d0:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065da:	f7fd f96b 	bl	80038b4 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065e2:	f7fd f967 	bl	80038b4 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e0dd      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065f4:	4b14      	ldr	r3, [pc, #80]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 80065f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1ef      	bne.n	80065e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80d1 	beq.w	80067ae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800660c:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b0c      	cmp	r3, #12
 8006616:	f000 808b 	beq.w	8006730 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d15e      	bne.n	80066e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a08      	ldr	r2, [pc, #32]	; (8006648 <HAL_RCC_OscConfig+0x4b8>)
 8006628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800662c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662e:	f7fd f941 	bl	80038b4 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006634:	e00c      	b.n	8006650 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006636:	f7fd f93d 	bl	80038b4 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d905      	bls.n	8006650 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e0b3      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
 8006648:	40021000 	.word	0x40021000
 800664c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006650:	4b59      	ldr	r3, [pc, #356]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1ec      	bne.n	8006636 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800665c:	4b56      	ldr	r3, [pc, #344]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	4b56      	ldr	r3, [pc, #344]	; (80067bc <HAL_RCC_OscConfig+0x62c>)
 8006662:	4013      	ands	r3, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6a11      	ldr	r1, [r2, #32]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800666c:	3a01      	subs	r2, #1
 800666e:	0112      	lsls	r2, r2, #4
 8006670:	4311      	orrs	r1, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006676:	0212      	lsls	r2, r2, #8
 8006678:	4311      	orrs	r1, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800667e:	0852      	lsrs	r2, r2, #1
 8006680:	3a01      	subs	r2, #1
 8006682:	0552      	lsls	r2, r2, #21
 8006684:	4311      	orrs	r1, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800668a:	0852      	lsrs	r2, r2, #1
 800668c:	3a01      	subs	r2, #1
 800668e:	0652      	lsls	r2, r2, #25
 8006690:	4311      	orrs	r1, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006696:	06d2      	lsls	r2, r2, #27
 8006698:	430a      	orrs	r2, r1
 800669a:	4947      	ldr	r1, [pc, #284]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 800669c:	4313      	orrs	r3, r2
 800669e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a0:	4b45      	ldr	r3, [pc, #276]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a44      	ldr	r2, [pc, #272]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066ac:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4a41      	ldr	r2, [pc, #260]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fd f8fc 	bl	80038b4 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c0:	f7fd f8f8 	bl	80038b4 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e06e      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066d2:	4b39      	ldr	r3, [pc, #228]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0x530>
 80066de:	e066      	b.n	80067ae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e0:	4b35      	ldr	r3, [pc, #212]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a34      	ldr	r2, [pc, #208]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80066ec:	4b32      	ldr	r3, [pc, #200]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4a31      	ldr	r2, [pc, #196]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80066f8:	4b2f      	ldr	r3, [pc, #188]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4a2e      	ldr	r2, [pc, #184]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 80066fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006706:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fd f8d4 	bl	80038b4 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006710:	f7fd f8d0 	bl	80038b4 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e046      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006722:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x580>
 800672e:	e03e      	b.n	80067ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e039      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800673c:	4b1e      	ldr	r3, [pc, #120]	; (80067b8 <HAL_RCC_OscConfig+0x628>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f003 0203 	and.w	r2, r3, #3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	429a      	cmp	r2, r3
 800674e:	d12c      	bne.n	80067aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	3b01      	subs	r3, #1
 800675c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675e:	429a      	cmp	r2, r3
 8006760:	d123      	bne.n	80067aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d11b      	bne.n	80067aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800677e:	429a      	cmp	r2, r3
 8006780:	d113      	bne.n	80067aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	3b01      	subs	r3, #1
 8006790:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d109      	bne.n	80067aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	3b01      	subs	r3, #1
 80067a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d001      	beq.n	80067ae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40021000 	.word	0x40021000
 80067bc:	019f800c 	.word	0x019f800c

080067c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e11e      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067d8:	4b91      	ldr	r3, [pc, #580]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d910      	bls.n	8006808 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e6:	4b8e      	ldr	r3, [pc, #568]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f023 020f 	bic.w	r2, r3, #15
 80067ee:	498c      	ldr	r1, [pc, #560]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b8a      	ldr	r3, [pc, #552]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e106      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d073      	beq.n	80068fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d129      	bne.n	8006870 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800681c:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0f4      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800682c:	f000 f966 	bl	8006afc <RCC_GetSysClockFreqFromPLLSource>
 8006830:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4a7c      	ldr	r2, [pc, #496]	; (8006a28 <HAL_RCC_ClockConfig+0x268>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d93f      	bls.n	80068ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800683a:	4b7a      	ldr	r3, [pc, #488]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800684e:	2b00      	cmp	r3, #0
 8006850:	d033      	beq.n	80068ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006856:	2b00      	cmp	r3, #0
 8006858:	d12f      	bne.n	80068ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800685a:	4b72      	ldr	r3, [pc, #456]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006862:	4a70      	ldr	r2, [pc, #448]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006868:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	e024      	b.n	80068ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d107      	bne.n	8006888 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006878:	4b6a      	ldr	r3, [pc, #424]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0c6      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006888:	4b66      	ldr	r3, [pc, #408]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0be      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006898:	f000 f8ce 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 800689c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4a61      	ldr	r2, [pc, #388]	; (8006a28 <HAL_RCC_ClockConfig+0x268>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d909      	bls.n	80068ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068a6:	4b5f      	ldr	r3, [pc, #380]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ae:	4a5d      	ldr	r2, [pc, #372]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068ba:	4b5a      	ldr	r3, [pc, #360]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 0203 	bic.w	r2, r3, #3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4957      	ldr	r1, [pc, #348]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068cc:	f7fc fff2 	bl	80038b4 <HAL_GetTick>
 80068d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068d2:	e00a      	b.n	80068ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d4:	f7fc ffee 	bl	80038b4 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e095      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ea:	4b4e      	ldr	r3, [pc, #312]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 020c 	and.w	r2, r3, #12
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d1eb      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d023      	beq.n	8006950 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006914:	4b43      	ldr	r3, [pc, #268]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4a42      	ldr	r2, [pc, #264]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800691a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800691e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800692c:	4b3d      	ldr	r3, [pc, #244]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006934:	4a3b      	ldr	r2, [pc, #236]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800693a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4936      	ldr	r1, [pc, #216]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800694a:	4313      	orrs	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
 800694e:	e008      	b.n	8006962 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b80      	cmp	r3, #128	; 0x80
 8006954:	d105      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006956:	4b33      	ldr	r3, [pc, #204]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	4a32      	ldr	r2, [pc, #200]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 800695c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006960:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006962:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d21d      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006970:	4b2b      	ldr	r3, [pc, #172]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f023 020f 	bic.w	r2, r3, #15
 8006978:	4929      	ldr	r1, [pc, #164]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006980:	f7fc ff98 	bl	80038b4 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	e00a      	b.n	800699e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006988:	f7fc ff94 	bl	80038b4 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e03b      	b.n	8006a16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699e:	4b20      	ldr	r3, [pc, #128]	; (8006a20 <HAL_RCC_ClockConfig+0x260>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d1ed      	bne.n	8006988 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b8:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4917      	ldr	r1, [pc, #92]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	490f      	ldr	r1, [pc, #60]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069ea:	f000 f825 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <HAL_RCC_ClockConfig+0x264>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	490c      	ldr	r1, [pc, #48]	; (8006a2c <HAL_RCC_ClockConfig+0x26c>)
 80069fc:	5ccb      	ldrb	r3, [r1, r3]
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <HAL_RCC_ClockConfig+0x270>)
 8006a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <HAL_RCC_ClockConfig+0x274>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fc ff04 	bl	800381c <HAL_InitTick>
 8006a14:	4603      	mov	r3, r0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40022000 	.word	0x40022000
 8006a24:	40021000 	.word	0x40021000
 8006a28:	04c4b400 	.word	0x04c4b400
 8006a2c:	0800edc4 	.word	0x0800edc4
 8006a30:	20000034 	.word	0x20000034
 8006a34:	20000038 	.word	0x20000038

08006a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a3e:	4b2c      	ldr	r3, [pc, #176]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 030c 	and.w	r3, r3, #12
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d102      	bne.n	8006a50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a4a:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e047      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006a50:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 030c 	and.w	r3, r3, #12
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d102      	bne.n	8006a62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a5c:	4b26      	ldr	r3, [pc, #152]	; (8006af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	e03e      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006a62:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b0c      	cmp	r3, #12
 8006a6c:	d136      	bne.n	8006adc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a6e:	4b20      	ldr	r3, [pc, #128]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a78:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	3301      	adds	r3, #1
 8006a84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a96:	68d2      	ldr	r2, [r2, #12]
 8006a98:	0a12      	lsrs	r2, r2, #8
 8006a9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	617b      	str	r3, [r7, #20]
      break;
 8006aa4:	e00c      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aa6:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab0:	68d2      	ldr	r2, [r2, #12]
 8006ab2:	0a12      	lsrs	r2, r2, #8
 8006ab4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ab8:	fb02 f303 	mul.w	r3, r2, r3
 8006abc:	617b      	str	r3, [r7, #20]
      break;
 8006abe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	0e5b      	lsrs	r3, r3, #25
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	3301      	adds	r3, #1
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e001      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ae0:	693b      	ldr	r3, [r7, #16]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40021000 	.word	0x40021000
 8006af4:	00f42400 	.word	0x00f42400
 8006af8:	007a1200 	.word	0x007a1200

08006afc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b02:	4b1e      	ldr	r3, [pc, #120]	; (8006b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	3301      	adds	r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d10c      	bne.n	8006b3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b28:	4a14      	ldr	r2, [pc, #80]	; (8006b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b2a:	68d2      	ldr	r2, [r2, #12]
 8006b2c:	0a12      	lsrs	r2, r2, #8
 8006b2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b32:	fb02 f303 	mul.w	r3, r2, r3
 8006b36:	617b      	str	r3, [r7, #20]
    break;
 8006b38:	e00c      	b.n	8006b54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b3a:	4a12      	ldr	r2, [pc, #72]	; (8006b84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b42:	4a0e      	ldr	r2, [pc, #56]	; (8006b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b44:	68d2      	ldr	r2, [r2, #12]
 8006b46:	0a12      	lsrs	r2, r2, #8
 8006b48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b4c:	fb02 f303 	mul.w	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]
    break;
 8006b52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b54:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	0e5b      	lsrs	r3, r3, #25
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	3301      	adds	r3, #1
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b6e:	687b      	ldr	r3, [r7, #4]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	007a1200 	.word	0x007a1200
 8006b84:	00f42400 	.word	0x00f42400

08006b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b90:	2300      	movs	r3, #0
 8006b92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b94:	2300      	movs	r3, #0
 8006b96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8098 	beq.w	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006baa:	4b43      	ldr	r3, [pc, #268]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb6:	4b40      	ldr	r3, [pc, #256]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bba:	4a3f      	ldr	r2, [pc, #252]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8006bc2:	4b3d      	ldr	r3, [pc, #244]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bd2:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a39      	ldr	r2, [pc, #228]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bde:	f7fc fe69 	bl	80038b4 <HAL_GetTick>
 8006be2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006be4:	e009      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be6:	f7fc fe65 	bl	80038b4 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d902      	bls.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	74fb      	strb	r3, [r7, #19]
        break;
 8006bf8:	e005      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bfa:	4b30      	ldr	r3, [pc, #192]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ef      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006c06:	7cfb      	ldrb	r3, [r7, #19]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d159      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c0c:	4b2a      	ldr	r3, [pc, #168]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01e      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d019      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c28:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c34:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	4a1f      	ldr	r2, [pc, #124]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c44:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c54:	4a18      	ldr	r2, [pc, #96]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c66:	f7fc fe25 	bl	80038b4 <HAL_GetTick>
 8006c6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6c:	e00b      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6e:	f7fc fe21 	bl	80038b4 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d902      	bls.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	74fb      	strb	r3, [r7, #19]
            break;
 8006c84:	e006      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ec      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c94:	7cfb      	ldrb	r3, [r7, #19]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca8:	4903      	ldr	r1, [pc, #12]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006cb0:	e008      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cb2:	7cfb      	ldrb	r3, [r7, #19]
 8006cb4:	74bb      	strb	r3, [r7, #18]
 8006cb6:	e005      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	7cfb      	ldrb	r3, [r7, #19]
 8006cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cc4:	7c7b      	ldrb	r3, [r7, #17]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d105      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cca:	4ba7      	ldr	r3, [pc, #668]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	4aa6      	ldr	r2, [pc, #664]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ce2:	4ba1      	ldr	r3, [pc, #644]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce8:	f023 0203 	bic.w	r2, r3, #3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	499d      	ldr	r1, [pc, #628]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d04:	4b98      	ldr	r3, [pc, #608]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	f023 020c 	bic.w	r2, r3, #12
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	4995      	ldr	r1, [pc, #596]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d26:	4b90      	ldr	r3, [pc, #576]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	498c      	ldr	r1, [pc, #560]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d48:	4b87      	ldr	r3, [pc, #540]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	4984      	ldr	r1, [pc, #528]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d6a:	4b7f      	ldr	r3, [pc, #508]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	497b      	ldr	r1, [pc, #492]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d8c:	4b76      	ldr	r3, [pc, #472]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	4973      	ldr	r1, [pc, #460]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dae:	4b6e      	ldr	r3, [pc, #440]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	496a      	ldr	r1, [pc, #424]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dd0:	4b65      	ldr	r3, [pc, #404]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	4962      	ldr	r1, [pc, #392]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006df2:	4b5d      	ldr	r3, [pc, #372]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	4959      	ldr	r1, [pc, #356]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e14:	4b54      	ldr	r3, [pc, #336]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	4951      	ldr	r1, [pc, #324]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d015      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e36:	4b4c      	ldr	r3, [pc, #304]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4948      	ldr	r1, [pc, #288]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e54:	d105      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e56:	4b44      	ldr	r3, [pc, #272]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	4a43      	ldr	r2, [pc, #268]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d015      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e6e:	4b3e      	ldr	r3, [pc, #248]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	493a      	ldr	r1, [pc, #232]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e8c:	d105      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e8e:	4b36      	ldr	r3, [pc, #216]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	4a35      	ldr	r2, [pc, #212]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e98:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d015      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ea6:	4b30      	ldr	r3, [pc, #192]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb4:	492c      	ldr	r1, [pc, #176]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ec4:	d105      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ec6:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	4a27      	ldr	r2, [pc, #156]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ed0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d015      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	491e      	ldr	r1, [pc, #120]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efc:	d105      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006efe:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f08:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d015      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	4910      	ldr	r1, [pc, #64]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f34:	d105      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	4a0b      	ldr	r2, [pc, #44]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f40:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d018      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	4902      	ldr	r1, [pc, #8]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	e001      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f72:	d105      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f74:	4b21      	ldr	r3, [pc, #132]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d015      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006f8c:	4b1b      	ldr	r3, [pc, #108]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f92:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	4918      	ldr	r1, [pc, #96]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006faa:	d105      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006fac:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d015      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd2:	490a      	ldr	r1, [pc, #40]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fe2:	d105      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ff0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40021000 	.word	0x40021000

08007000 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e027      	b.n	8007062 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7a5b      	ldrb	r3, [r3, #9]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fc f8da 	bl	80031dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f023 0108 	bic.w	r1, r3, #8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0204 	orr.w	r2, r2, #4
 8007052:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7a1b      	ldrb	r3, [r3, #8]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_RNG_GenerateRandomNumber+0x1a>
 8007080:	2302      	movs	r3, #2
 8007082:	e044      	b.n	800710e <HAL_RNG_GenerateRandomNumber+0xa4>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7a5b      	ldrb	r3, [r3, #9]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d133      	bne.n	80070fc <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800709a:	f7fc fc0b 	bl	80038b4 <HAL_GetTick>
 800709e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80070a0:	e018      	b.n	80070d4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80070a2:	f7fc fc07 	bl	80038b4 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d911      	bls.n	80070d4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d00a      	beq.n	80070d4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e01c      	b.n	800710e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d1df      	bne.n	80070a2 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691a      	ldr	r2, [r3, #16]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	725a      	strb	r2, [r3, #9]
 80070fa:	e004      	b.n	8007106 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2204      	movs	r2, #4
 8007100:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	721a      	strb	r2, [r3, #8]

  return status;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e09d      	b.n	8007264 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d108      	bne.n	8007142 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007138:	d009      	beq.n	800714e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	61da      	str	r2, [r3, #28]
 8007140:	e005      	b.n	800714e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fc f8a9 	bl	80032c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007184:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800718e:	d902      	bls.n	8007196 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e002      	b.n	800719c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800719a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071a4:	d007      	beq.n	80071b6 <HAL_SPI_Init+0xa0>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071ae:	d002      	beq.n	80071b6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f8:	ea42 0103 	orr.w	r1, r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	f003 0204 	and.w	r2, r3, #4
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007232:	ea42 0103 	orr.w	r1, r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007252:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	4613      	mov	r3, r2
 800727a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_SPI_Transmit+0x22>
 800728a:	2302      	movs	r3, #2
 800728c:	e158      	b.n	8007540 <HAL_SPI_Transmit+0x2d4>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007296:	f7fc fb0d 	bl	80038b4 <HAL_GetTick>
 800729a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800729c:	88fb      	ldrh	r3, [r7, #6]
 800729e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d002      	beq.n	80072b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80072ac:	2302      	movs	r3, #2
 80072ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072b0:	e13d      	b.n	800752e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <HAL_SPI_Transmit+0x52>
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d102      	bne.n	80072c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072c2:	e134      	b.n	800752e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2203      	movs	r2, #3
 80072c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	88fa      	ldrh	r2, [r7, #6]
 80072dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	88fa      	ldrh	r2, [r7, #6]
 80072e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800730e:	d10f      	bne.n	8007330 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800732e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d007      	beq.n	800734e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800734c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007356:	d94b      	bls.n	80073f0 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SPI_Transmit+0xfa>
 8007360:	8afb      	ldrh	r3, [r7, #22]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d13e      	bne.n	80073e4 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	881a      	ldrh	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	1c9a      	adds	r2, r3, #2
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800738a:	e02b      	b.n	80073e4 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b02      	cmp	r3, #2
 8007398:	d112      	bne.n	80073c0 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	881a      	ldrh	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	1c9a      	adds	r2, r3, #2
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073be:	e011      	b.n	80073e4 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c0:	f7fc fa78 	bl	80038b4 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d803      	bhi.n	80073d8 <HAL_SPI_Transmit+0x16c>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d6:	d102      	bne.n	80073de <HAL_SPI_Transmit+0x172>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073e2:	e0a4      	b.n	800752e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1ce      	bne.n	800738c <HAL_SPI_Transmit+0x120>
 80073ee:	e07c      	b.n	80074ea <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_SPI_Transmit+0x192>
 80073f8:	8afb      	ldrh	r3, [r7, #22]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d170      	bne.n	80074e0 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	d912      	bls.n	800742e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	881a      	ldrh	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	1c9a      	adds	r2, r3, #2
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b02      	subs	r3, #2
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800742c:	e058      	b.n	80074e0 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007454:	e044      	b.n	80074e0 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b02      	cmp	r3, #2
 8007462:	d12b      	bne.n	80074bc <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b01      	cmp	r3, #1
 800746c:	d912      	bls.n	8007494 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	881a      	ldrh	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	1c9a      	adds	r2, r3, #2
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007488:	b29b      	uxth	r3, r3
 800748a:	3b02      	subs	r3, #2
 800748c:	b29a      	uxth	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007492:	e025      	b.n	80074e0 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074ba:	e011      	b.n	80074e0 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074bc:	f7fc f9fa 	bl	80038b4 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d803      	bhi.n	80074d4 <HAL_SPI_Transmit+0x268>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d102      	bne.n	80074da <HAL_SPI_Transmit+0x26e>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d102      	bne.n	80074e0 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074de:	e026      	b.n	800752e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1b5      	bne.n	8007456 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fce4 	bl	8007ebc <SPI_EndRxTxTransaction>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	77fb      	strb	r3, [r7, #31]
 800752a:	e000      	b.n	800752e <HAL_SPI_Transmit+0x2c2>
  }

error:
 800752c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800753e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af02      	add	r7, sp, #8
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007564:	d112      	bne.n	800758c <HAL_SPI_Receive+0x44>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10e      	bne.n	800758c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2204      	movs	r2, #4
 8007572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f910 	bl	80077a8 <HAL_SPI_TransmitReceive>
 8007588:	4603      	mov	r3, r0
 800758a:	e109      	b.n	80077a0 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_SPI_Receive+0x52>
 8007596:	2302      	movs	r3, #2
 8007598:	e102      	b.n	80077a0 <HAL_SPI_Receive+0x258>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075a2:	f7fc f987 	bl	80038b4 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d002      	beq.n	80075ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075b4:	2302      	movs	r3, #2
 80075b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075b8:	e0e9      	b.n	800778e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_SPI_Receive+0x7e>
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075ca:	e0e0      	b.n	800778e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2204      	movs	r2, #4
 80075d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007616:	d908      	bls.n	800762a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007626:	605a      	str	r2, [r3, #4]
 8007628:	e007      	b.n	800763a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007642:	d10f      	bne.n	8007664 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007652:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007662:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d007      	beq.n	8007682 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007680:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800768a:	d867      	bhi.n	800775c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800768c:	e030      	b.n	80076f0 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d117      	bne.n	80076cc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f103 020c 	add.w	r2, r3, #12
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	7812      	ldrb	r2, [r2, #0]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80076ca:	e011      	b.n	80076f0 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076cc:	f7fc f8f2 	bl	80038b4 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d803      	bhi.n	80076e4 <HAL_SPI_Receive+0x19c>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e2:	d102      	bne.n	80076ea <HAL_SPI_Receive+0x1a2>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076ee:	e04e      	b.n	800778e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1c8      	bne.n	800768e <HAL_SPI_Receive+0x146>
 80076fc:	e034      	b.n	8007768 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	d115      	bne.n	8007738 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	b292      	uxth	r2, r2
 8007718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	1c9a      	adds	r2, r3, #2
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007736:	e011      	b.n	800775c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007738:	f7fc f8bc 	bl	80038b4 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d803      	bhi.n	8007750 <HAL_SPI_Receive+0x208>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d102      	bne.n	8007756 <HAL_SPI_Receive+0x20e>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	75fb      	strb	r3, [r7, #23]
          goto error;
 800775a:	e018      	b.n	800778e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1ca      	bne.n	80076fe <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fb4d 	bl	8007e0c <SPI_EndRxTransaction>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
 800778a:	e000      	b.n	800778e <HAL_SPI_Receive+0x246>
  }

error :
 800778c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077b6:	2301      	movs	r3, #1
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x26>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e1fb      	b.n	8007bc6 <HAL_SPI_TransmitReceive+0x41e>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077d6:	f7fc f86d 	bl	80038b4 <HAL_GetTick>
 80077da:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077e2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80077ee:	887b      	ldrh	r3, [r7, #2]
 80077f0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077f2:	7efb      	ldrb	r3, [r7, #27]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d00e      	beq.n	8007816 <HAL_SPI_TransmitReceive+0x6e>
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077fe:	d106      	bne.n	800780e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <HAL_SPI_TransmitReceive+0x66>
 8007808:	7efb      	ldrb	r3, [r7, #27]
 800780a:	2b04      	cmp	r3, #4
 800780c:	d003      	beq.n	8007816 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800780e:	2302      	movs	r3, #2
 8007810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007814:	e1cd      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <HAL_SPI_TransmitReceive+0x80>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <HAL_SPI_TransmitReceive+0x80>
 8007822:	887b      	ldrh	r3, [r7, #2]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800782e:	e1c0      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b04      	cmp	r3, #4
 800783a:	d003      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2205      	movs	r2, #5
 8007840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	887a      	ldrh	r2, [r7, #2]
 8007854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	887a      	ldrh	r2, [r7, #2]
 800786a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	887a      	ldrh	r2, [r7, #2]
 8007870:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007886:	d802      	bhi.n	800788e <HAL_SPI_TransmitReceive+0xe6>
 8007888:	8a3b      	ldrh	r3, [r7, #16]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d908      	bls.n	80078a0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	e007      	b.n	80078b0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d007      	beq.n	80078ce <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078d6:	d97c      	bls.n	80079d2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0x13e>
 80078e0:	8a7b      	ldrh	r3, [r7, #18]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d169      	bne.n	80079ba <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	881a      	ldrh	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	1c9a      	adds	r2, r3, #2
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800790a:	e056      	b.n	80079ba <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b02      	cmp	r3, #2
 8007918:	d11b      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x1aa>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d016      	beq.n	8007952 <HAL_SPI_TransmitReceive+0x1aa>
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b01      	cmp	r3, #1
 8007928:	d113      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	881a      	ldrh	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	1c9a      	adds	r2, r3, #2
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	d11c      	bne.n	800799a <HAL_SPI_TransmitReceive+0x1f2>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d016      	beq.n	800799a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	b292      	uxth	r2, r2
 8007978:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007996:	2301      	movs	r3, #1
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800799a:	f7fb ff8b 	bl	80038b4 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d807      	bhi.n	80079ba <HAL_SPI_TransmitReceive+0x212>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b0:	d003      	beq.n	80079ba <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80079b8:	e0fb      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1a3      	bne.n	800790c <HAL_SPI_TransmitReceive+0x164>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d19d      	bne.n	800790c <HAL_SPI_TransmitReceive+0x164>
 80079d0:	e0df      	b.n	8007b92 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x23a>
 80079da:	8a7b      	ldrh	r3, [r7, #18]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	f040 80cb 	bne.w	8007b78 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d912      	bls.n	8007a12 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	881a      	ldrh	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b02      	subs	r3, #2
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a10:	e0b2      	b.n	8007b78 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	330c      	adds	r3, #12
 8007a1c:	7812      	ldrb	r2, [r2, #0]
 8007a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a38:	e09e      	b.n	8007b78 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d134      	bne.n	8007ab2 <HAL_SPI_TransmitReceive+0x30a>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d02f      	beq.n	8007ab2 <HAL_SPI_TransmitReceive+0x30a>
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d12c      	bne.n	8007ab2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d912      	bls.n	8007a88 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	881a      	ldrh	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b02      	subs	r3, #2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a86:	e012      	b.n	8007aae <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d148      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x3aa>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d042      	beq.n	8007b52 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d923      	bls.n	8007b20 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	1c9a      	adds	r2, r3, #2
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b02      	subs	r3, #2
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d81f      	bhi.n	8007b4e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b1c:	605a      	str	r2, [r3, #4]
 8007b1e:	e016      	b.n	8007b4e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f103 020c 	add.w	r2, r3, #12
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2c:	7812      	ldrb	r2, [r2, #0]
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b52:	f7fb feaf 	bl	80038b4 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d803      	bhi.n	8007b6a <HAL_SPI_TransmitReceive+0x3c2>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d102      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x3c8>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007b76:	e01c      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f47f af5b 	bne.w	8007a3a <HAL_SPI_TransmitReceive+0x292>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f af54 	bne.w	8007a3a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 f990 	bl	8007ebc <SPI_EndRxTxTransaction>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d006      	beq.n	8007bb0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	661a      	str	r2, [r3, #96]	; 0x60
 8007bae:	e000      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007bb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3728      	adds	r7, #40	; 0x28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007be0:	f7fb fe68 	bl	80038b4 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bf0:	f7fb fe60 	bl	80038b4 <HAL_GetTick>
 8007bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	015b      	lsls	r3, r3, #5
 8007bfc:	0d1b      	lsrs	r3, r3, #20
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	fb02 f303 	mul.w	r3, r2, r3
 8007c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c06:	e054      	b.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d050      	beq.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c10:	f7fb fe50 	bl	80038b4 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d902      	bls.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d13d      	bne.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3e:	d111      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c48:	d004      	beq.n	8007c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c52:	d107      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6c:	d10f      	bne.n	8007c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e017      	b.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d19b      	bne.n	8007c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000034 	.word	0x20000034

08007ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007cf2:	f7fb fddf 	bl	80038b4 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	4413      	add	r3, r2
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d02:	f7fb fdd7 	bl	80038b4 <HAL_GetTick>
 8007d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d10:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	00da      	lsls	r2, r3, #3
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	0d1b      	lsrs	r3, r3, #20
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	fb02 f303 	mul.w	r3, r2, r3
 8007d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d28:	e060      	b.n	8007dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d30:	d107      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d050      	beq.n	8007dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d4a:	f7fb fdb3 	bl	80038b4 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d902      	bls.n	8007d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d13d      	bne.n	8007ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d78:	d111      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d82:	d004      	beq.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8c:	d107      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da6:	d10f      	bne.n	8007dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e010      	b.n	8007dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4013      	ands	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d196      	bne.n	8007d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3728      	adds	r7, #40	; 0x28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000034 	.word	0x20000034

08007e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e20:	d111      	bne.n	8007e46 <SPI_EndRxTransaction+0x3a>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2a:	d004      	beq.n	8007e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e34:	d107      	bne.n	8007e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2180      	movs	r1, #128	; 0x80
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff febd 	bl	8007bd0 <SPI_WaitFlagStateUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e60:	f043 0220 	orr.w	r2, r3, #32
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e023      	b.n	8007eb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e74:	d11d      	bne.n	8007eb2 <SPI_EndRxTransaction+0xa6>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d004      	beq.n	8007e8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e88:	d113      	bne.n	8007eb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff ff22 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea6:	f043 0220 	orr.w	r2, r3, #32
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e000      	b.n	8007eb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff ff03 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e027      	b.n	8007f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff fe68 	bl	8007bd0 <SPI_WaitFlagStateUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0a:	f043 0220 	orr.w	r2, r3, #32
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e014      	b.n	8007f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fedc 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f32:	f043 0220 	orr.w	r2, r3, #32
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e000      	b.n	8007f40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e049      	b.n	8007fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fb fb8c 	bl	800368c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f001 f868 	bl	800905c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e049      	b.n	800809c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f841 	bl	80080a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	4619      	mov	r1, r3
 8008034:	4610      	mov	r0, r2
 8008036:	f001 f811 	bl	800905c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	bf0c      	ite	eq
 80080dc:	2301      	moveq	r3, #1
 80080de:	2300      	movne	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	e03c      	b.n	800815e <HAL_TIM_PWM_Start_DMA+0xa6>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d109      	bne.n	80080fe <HAL_TIM_PWM_Start_DMA+0x46>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	bf0c      	ite	eq
 80080f6:	2301      	moveq	r3, #1
 80080f8:	2300      	movne	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	e02f      	b.n	800815e <HAL_TIM_PWM_Start_DMA+0xa6>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b08      	cmp	r3, #8
 8008102:	d109      	bne.n	8008118 <HAL_TIM_PWM_Start_DMA+0x60>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	bf0c      	ite	eq
 8008110:	2301      	moveq	r3, #1
 8008112:	2300      	movne	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e022      	b.n	800815e <HAL_TIM_PWM_Start_DMA+0xa6>
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b0c      	cmp	r3, #12
 800811c:	d109      	bne.n	8008132 <HAL_TIM_PWM_Start_DMA+0x7a>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b02      	cmp	r3, #2
 8008128:	bf0c      	ite	eq
 800812a:	2301      	moveq	r3, #1
 800812c:	2300      	movne	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	e015      	b.n	800815e <HAL_TIM_PWM_Start_DMA+0xa6>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b10      	cmp	r3, #16
 8008136:	d109      	bne.n	800814c <HAL_TIM_PWM_Start_DMA+0x94>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	e008      	b.n	800815e <HAL_TIM_PWM_Start_DMA+0xa6>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008162:	2302      	movs	r3, #2
 8008164:	e1b0      	b.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <HAL_TIM_PWM_Start_DMA+0xc8>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	e03c      	b.n	80081fa <HAL_TIM_PWM_Start_DMA+0x142>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b04      	cmp	r3, #4
 8008184:	d109      	bne.n	800819a <HAL_TIM_PWM_Start_DMA+0xe2>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	bf0c      	ite	eq
 8008192:	2301      	moveq	r3, #1
 8008194:	2300      	movne	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	e02f      	b.n	80081fa <HAL_TIM_PWM_Start_DMA+0x142>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d109      	bne.n	80081b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e022      	b.n	80081fa <HAL_TIM_PWM_Start_DMA+0x142>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b0c      	cmp	r3, #12
 80081b8:	d109      	bne.n	80081ce <HAL_TIM_PWM_Start_DMA+0x116>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	e015      	b.n	80081fa <HAL_TIM_PWM_Start_DMA+0x142>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d109      	bne.n	80081e8 <HAL_TIM_PWM_Start_DMA+0x130>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	bf0c      	ite	eq
 80081e0:	2301      	moveq	r3, #1
 80081e2:	2300      	movne	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	e008      	b.n	80081fa <HAL_TIM_PWM_Start_DMA+0x142>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d034      	beq.n	8008268 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <HAL_TIM_PWM_Start_DMA+0x156>
 8008204:	887b      	ldrh	r3, [r7, #2]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e15c      	b.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <HAL_TIM_PWM_Start_DMA+0x166>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800821c:	e026      	b.n	800826c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d104      	bne.n	800822e <HAL_TIM_PWM_Start_DMA+0x176>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800822c:	e01e      	b.n	800826c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b08      	cmp	r3, #8
 8008232:	d104      	bne.n	800823e <HAL_TIM_PWM_Start_DMA+0x186>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800823c:	e016      	b.n	800826c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b0c      	cmp	r3, #12
 8008242:	d104      	bne.n	800824e <HAL_TIM_PWM_Start_DMA+0x196>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800824c:	e00e      	b.n	800826c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b10      	cmp	r3, #16
 8008252:	d104      	bne.n	800825e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800825c:	e006      	b.n	800826c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2202      	movs	r2, #2
 8008262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008266:	e001      	b.n	800826c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e12d      	b.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b0c      	cmp	r3, #12
 8008270:	f200 80ae 	bhi.w	80083d0 <HAL_TIM_PWM_Start_DMA+0x318>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082b1 	.word	0x080082b1
 8008280:	080083d1 	.word	0x080083d1
 8008284:	080083d1 	.word	0x080083d1
 8008288:	080083d1 	.word	0x080083d1
 800828c:	080082f9 	.word	0x080082f9
 8008290:	080083d1 	.word	0x080083d1
 8008294:	080083d1 	.word	0x080083d1
 8008298:	080083d1 	.word	0x080083d1
 800829c:	08008341 	.word	0x08008341
 80082a0:	080083d1 	.word	0x080083d1
 80082a4:	080083d1 	.word	0x080083d1
 80082a8:	080083d1 	.word	0x080083d1
 80082ac:	08008389 	.word	0x08008389
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	4a86      	ldr	r2, [pc, #536]	; (80084d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 80082b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	4a85      	ldr	r2, [pc, #532]	; (80084d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80082be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	4a84      	ldr	r2, [pc, #528]	; (80084d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 80082c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3334      	adds	r3, #52	; 0x34
 80082d4:	461a      	mov	r2, r3
 80082d6:	887b      	ldrh	r3, [r7, #2]
 80082d8:	f7fb fda8 	bl	8003e2c <HAL_DMA_Start_IT>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e0f0      	b.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f4:	60da      	str	r2, [r3, #12]
      break;
 80082f6:	e06e      	b.n	80083d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	4a74      	ldr	r2, [pc, #464]	; (80084d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 80082fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	4a73      	ldr	r2, [pc, #460]	; (80084d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008306:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	4a72      	ldr	r2, [pc, #456]	; (80084d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 800830e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3338      	adds	r3, #56	; 0x38
 800831c:	461a      	mov	r2, r3
 800831e:	887b      	ldrh	r3, [r7, #2]
 8008320:	f7fb fd84 	bl	8003e2c <HAL_DMA_Start_IT>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e0cc      	b.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800833c:	60da      	str	r2, [r3, #12]
      break;
 800833e:	e04a      	b.n	80083d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	4a62      	ldr	r2, [pc, #392]	; (80084d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	4a61      	ldr	r2, [pc, #388]	; (80084d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800834e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	4a60      	ldr	r2, [pc, #384]	; (80084d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	333c      	adds	r3, #60	; 0x3c
 8008364:	461a      	mov	r2, r3
 8008366:	887b      	ldrh	r3, [r7, #2]
 8008368:	f7fb fd60 	bl	8003e2c <HAL_DMA_Start_IT>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e0a8      	b.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008384:	60da      	str	r2, [r3, #12]
      break;
 8008386:	e026      	b.n	80083d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	4a50      	ldr	r2, [pc, #320]	; (80084d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800838e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	4a4f      	ldr	r2, [pc, #316]	; (80084d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008396:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	4a4e      	ldr	r2, [pc, #312]	; (80084d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 800839e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3340      	adds	r3, #64	; 0x40
 80083ac:	461a      	mov	r2, r3
 80083ae:	887b      	ldrh	r3, [r7, #2]
 80083b0:	f7fb fd3c 	bl	8003e2c <HAL_DMA_Start_IT>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e084      	b.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083cc:	60da      	str	r2, [r3, #12]
      break;
 80083ce:	e002      	b.n	80083d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	75fb      	strb	r3, [r7, #23]
      break;
 80083d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d174      	bne.n	80084c6 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2201      	movs	r2, #1
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 fa9d 	bl	8009924 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a3b      	ldr	r2, [pc, #236]	; (80084dc <HAL_TIM_PWM_Start_DMA+0x424>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d018      	beq.n	8008426 <HAL_TIM_PWM_Start_DMA+0x36e>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a39      	ldr	r2, [pc, #228]	; (80084e0 <HAL_TIM_PWM_Start_DMA+0x428>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d013      	beq.n	8008426 <HAL_TIM_PWM_Start_DMA+0x36e>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a38      	ldr	r2, [pc, #224]	; (80084e4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00e      	beq.n	8008426 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a36      	ldr	r2, [pc, #216]	; (80084e8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d009      	beq.n	8008426 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a35      	ldr	r2, [pc, #212]	; (80084ec <HAL_TIM_PWM_Start_DMA+0x434>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d004      	beq.n	8008426 <HAL_TIM_PWM_Start_DMA+0x36e>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a33      	ldr	r2, [pc, #204]	; (80084f0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d101      	bne.n	800842a <HAL_TIM_PWM_Start_DMA+0x372>
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <HAL_TIM_PWM_Start_DMA+0x374>
 800842a:	2300      	movs	r3, #0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800843e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a25      	ldr	r2, [pc, #148]	; (80084dc <HAL_TIM_PWM_Start_DMA+0x424>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d01d      	beq.n	8008486 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008452:	d018      	beq.n	8008486 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a26      	ldr	r2, [pc, #152]	; (80084f4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a25      	ldr	r2, [pc, #148]	; (80084f8 <HAL_TIM_PWM_Start_DMA+0x440>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00e      	beq.n	8008486 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a1c      	ldr	r2, [pc, #112]	; (80084e0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d009      	beq.n	8008486 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d004      	beq.n	8008486 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1b      	ldr	r2, [pc, #108]	; (80084f0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d115      	bne.n	80084b2 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	4b1b      	ldr	r3, [pc, #108]	; (80084fc <HAL_TIM_PWM_Start_DMA+0x444>)
 800848e:	4013      	ands	r3, r2
 8008490:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b06      	cmp	r3, #6
 8008496:	d015      	beq.n	80084c4 <HAL_TIM_PWM_Start_DMA+0x40c>
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849e:	d011      	beq.n	80084c4 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b0:	e008      	b.n	80084c4 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 0201 	orr.w	r2, r2, #1
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e000      	b.n	80084c6 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	08008f4b 	.word	0x08008f4b
 80084d4:	08008ff3 	.word	0x08008ff3
 80084d8:	08008eb9 	.word	0x08008eb9
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40013400 	.word	0x40013400
 80084e4:	40014000 	.word	0x40014000
 80084e8:	40014400 	.word	0x40014400
 80084ec:	40014800 	.word	0x40014800
 80084f0:	40015000 	.word	0x40015000
 80084f4:	40000400 	.word	0x40000400
 80084f8:	40000800 	.word	0x40000800
 80084fc:	00010007 	.word	0x00010007

08008500 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b0c      	cmp	r3, #12
 8008512:	d855      	bhi.n	80085c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008514:	a201      	add	r2, pc, #4	; (adr r2, 800851c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	08008551 	.word	0x08008551
 8008520:	080085c1 	.word	0x080085c1
 8008524:	080085c1 	.word	0x080085c1
 8008528:	080085c1 	.word	0x080085c1
 800852c:	0800856d 	.word	0x0800856d
 8008530:	080085c1 	.word	0x080085c1
 8008534:	080085c1 	.word	0x080085c1
 8008538:	080085c1 	.word	0x080085c1
 800853c:	08008589 	.word	0x08008589
 8008540:	080085c1 	.word	0x080085c1
 8008544:	080085c1 	.word	0x080085c1
 8008548:	080085c1 	.word	0x080085c1
 800854c:	080085a5 	.word	0x080085a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800855e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	4618      	mov	r0, r3
 8008566:	f7fb fcdc 	bl	8003f22 <HAL_DMA_Abort_IT>
      break;
 800856a:	e02c      	b.n	80085c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800857a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	4618      	mov	r0, r3
 8008582:	f7fb fcce 	bl	8003f22 <HAL_DMA_Abort_IT>
      break;
 8008586:	e01e      	b.n	80085c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008596:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	4618      	mov	r0, r3
 800859e:	f7fb fcc0 	bl	8003f22 <HAL_DMA_Abort_IT>
      break;
 80085a2:	e010      	b.n	80085c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fb fcb2 	bl	8003f22 <HAL_DMA_Abort_IT>
      break;
 80085be:	e002      	b.n	80085c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
      break;
 80085c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f040 8086 	bne.w	80086da <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f9a4 	bl	8009924 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a40      	ldr	r2, [pc, #256]	; (80086e4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d018      	beq.n	8008618 <HAL_TIM_PWM_Stop_DMA+0x118>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3f      	ldr	r2, [pc, #252]	; (80086e8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <HAL_TIM_PWM_Stop_DMA+0x118>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a3d      	ldr	r2, [pc, #244]	; (80086ec <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00e      	beq.n	8008618 <HAL_TIM_PWM_Stop_DMA+0x118>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a3c      	ldr	r2, [pc, #240]	; (80086f0 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_TIM_PWM_Stop_DMA+0x118>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a3a      	ldr	r2, [pc, #232]	; (80086f4 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <HAL_TIM_PWM_Stop_DMA+0x118>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a39      	ldr	r2, [pc, #228]	; (80086f8 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d101      	bne.n	800861c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8008618:	2301      	movs	r3, #1
 800861a:	e000      	b.n	800861e <HAL_TIM_PWM_Stop_DMA+0x11e>
 800861c:	2300      	movs	r3, #0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d017      	beq.n	8008652 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6a1a      	ldr	r2, [r3, #32]
 8008628:	f241 1311 	movw	r3, #4369	; 0x1111
 800862c:	4013      	ands	r3, r2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10f      	bne.n	8008652 <HAL_TIM_PWM_Stop_DMA+0x152>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a1a      	ldr	r2, [r3, #32]
 8008638:	f244 4344 	movw	r3, #17476	; 0x4444
 800863c:	4013      	ands	r3, r2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d107      	bne.n	8008652 <HAL_TIM_PWM_Stop_DMA+0x152>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6a1a      	ldr	r2, [r3, #32]
 8008658:	f241 1311 	movw	r3, #4369	; 0x1111
 800865c:	4013      	ands	r3, r2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10f      	bne.n	8008682 <HAL_TIM_PWM_Stop_DMA+0x182>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6a1a      	ldr	r2, [r3, #32]
 8008668:	f244 4344 	movw	r3, #17476	; 0x4444
 800866c:	4013      	ands	r3, r2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d107      	bne.n	8008682 <HAL_TIM_PWM_Stop_DMA+0x182>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0201 	bic.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d104      	bne.n	8008692 <HAL_TIM_PWM_Stop_DMA+0x192>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008690:	e023      	b.n	80086da <HAL_TIM_PWM_Stop_DMA+0x1da>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b04      	cmp	r3, #4
 8008696:	d104      	bne.n	80086a2 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086a0:	e01b      	b.n	80086da <HAL_TIM_PWM_Stop_DMA+0x1da>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d104      	bne.n	80086b2 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086b0:	e013      	b.n	80086da <HAL_TIM_PWM_Stop_DMA+0x1da>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b0c      	cmp	r3, #12
 80086b6:	d104      	bne.n	80086c2 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086c0:	e00b      	b.n	80086da <HAL_TIM_PWM_Stop_DMA+0x1da>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d104      	bne.n	80086d2 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086d0:	e003      	b.n	80086da <HAL_TIM_PWM_Stop_DMA+0x1da>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40012c00 	.word	0x40012c00
 80086e8:	40013400 	.word	0x40013400
 80086ec:	40014000 	.word	0x40014000
 80086f0:	40014400 	.word	0x40014400
 80086f4:	40014800 	.word	0x40014800
 80086f8:	40015000 	.word	0x40015000

080086fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b02      	cmp	r3, #2
 8008710:	d122      	bne.n	8008758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b02      	cmp	r3, #2
 800871e:	d11b      	bne.n	8008758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0202 	mvn.w	r2, #2
 8008728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fb88 	bl	8008e54 <HAL_TIM_IC_CaptureCallback>
 8008744:	e005      	b.n	8008752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fb7a 	bl	8008e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fb8b 	bl	8008e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b04      	cmp	r3, #4
 8008764:	d122      	bne.n	80087ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b04      	cmp	r3, #4
 8008772:	d11b      	bne.n	80087ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0204 	mvn.w	r2, #4
 800877c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fb5e 	bl	8008e54 <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fb50 	bl	8008e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fb61 	bl	8008e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d122      	bne.n	8008800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d11b      	bne.n	8008800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0208 	mvn.w	r2, #8
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fb34 	bl	8008e54 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fb26 	bl	8008e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fb37 	bl	8008e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0310 	and.w	r3, r3, #16
 800880a:	2b10      	cmp	r3, #16
 800880c:	d122      	bne.n	8008854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b10      	cmp	r3, #16
 800881a:	d11b      	bne.n	8008854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0210 	mvn.w	r2, #16
 8008824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2208      	movs	r2, #8
 800882a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb0a 	bl	8008e54 <HAL_TIM_IC_CaptureCallback>
 8008840:	e005      	b.n	800884e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fafc 	bl	8008e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb0d 	bl	8008e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10e      	bne.n	8008880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d107      	bne.n	8008880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0201 	mvn.w	r2, #1
 8008878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fad6 	bl	8008e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888a:	2b80      	cmp	r3, #128	; 0x80
 800888c:	d10e      	bne.n	80088ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008898:	2b80      	cmp	r3, #128	; 0x80
 800889a:	d107      	bne.n	80088ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 f9ac 	bl	8009c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ba:	d10e      	bne.n	80088da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d107      	bne.n	80088da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 f99f 	bl	8009c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	d10e      	bne.n	8008906 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d107      	bne.n	8008906 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fac5 	bl	8008e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	f003 0320 	and.w	r3, r3, #32
 8008910:	2b20      	cmp	r3, #32
 8008912:	d10e      	bne.n	8008932 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b20      	cmp	r3, #32
 8008920:	d107      	bne.n	8008932 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f06f 0220 	mvn.w	r2, #32
 800892a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f95f 	bl	8009bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800893c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008940:	d10f      	bne.n	8008962 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800894c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008950:	d107      	bne.n	8008962 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800895a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f965 	bl	8009c2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800896c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008970:	d10f      	bne.n	8008992 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800897c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008980:	d107      	bne.n	8008992 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800898a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 f957 	bl	8009c40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800899c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089a0:	d10f      	bne.n	80089c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089b0:	d107      	bne.n	80089c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80089ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f949 	bl	8009c54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089d0:	d10f      	bne.n	80089f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089e0:	d107      	bne.n	80089f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80089ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 f93b 	bl	8009c68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d101      	bne.n	8008a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a16:	2302      	movs	r3, #2
 8008a18:	e0ff      	b.n	8008c1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b14      	cmp	r3, #20
 8008a26:	f200 80f0 	bhi.w	8008c0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a2a:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a85 	.word	0x08008a85
 8008a34:	08008c0b 	.word	0x08008c0b
 8008a38:	08008c0b 	.word	0x08008c0b
 8008a3c:	08008c0b 	.word	0x08008c0b
 8008a40:	08008ac5 	.word	0x08008ac5
 8008a44:	08008c0b 	.word	0x08008c0b
 8008a48:	08008c0b 	.word	0x08008c0b
 8008a4c:	08008c0b 	.word	0x08008c0b
 8008a50:	08008b07 	.word	0x08008b07
 8008a54:	08008c0b 	.word	0x08008c0b
 8008a58:	08008c0b 	.word	0x08008c0b
 8008a5c:	08008c0b 	.word	0x08008c0b
 8008a60:	08008b47 	.word	0x08008b47
 8008a64:	08008c0b 	.word	0x08008c0b
 8008a68:	08008c0b 	.word	0x08008c0b
 8008a6c:	08008c0b 	.word	0x08008c0b
 8008a70:	08008b89 	.word	0x08008b89
 8008a74:	08008c0b 	.word	0x08008c0b
 8008a78:	08008c0b 	.word	0x08008c0b
 8008a7c:	08008c0b 	.word	0x08008c0b
 8008a80:	08008bc9 	.word	0x08008bc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fb84 	bl	8009198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0208 	orr.w	r2, r2, #8
 8008a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0204 	bic.w	r2, r2, #4
 8008aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6999      	ldr	r1, [r3, #24]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691a      	ldr	r2, [r3, #16]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	619a      	str	r2, [r3, #24]
      break;
 8008ac2:	e0a5      	b.n	8008c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fbfe 	bl	80092cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6999      	ldr	r1, [r3, #24]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	021a      	lsls	r2, r3, #8
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	619a      	str	r2, [r3, #24]
      break;
 8008b04:	e084      	b.n	8008c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fc71 	bl	80093f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69da      	ldr	r2, [r3, #28]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0208 	orr.w	r2, r2, #8
 8008b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0204 	bic.w	r2, r2, #4
 8008b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69d9      	ldr	r1, [r3, #28]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	61da      	str	r2, [r3, #28]
      break;
 8008b44:	e064      	b.n	8008c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fce3 	bl	8009518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69d9      	ldr	r1, [r3, #28]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	021a      	lsls	r2, r3, #8
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	61da      	str	r2, [r3, #28]
      break;
 8008b86:	e043      	b.n	8008c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fd56 	bl	8009640 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0208 	orr.w	r2, r2, #8
 8008ba2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0204 	bic.w	r2, r2, #4
 8008bb2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008bc6:	e023      	b.n	8008c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fda0 	bl	8009714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008be2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bf2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	021a      	lsls	r2, r3, #8
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008c08:	e002      	b.n	8008c10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop

08008c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIM_ConfigClockSource+0x1c>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e0e6      	b.n	8008e0e <HAL_TIM_ConfigClockSource+0x1ea>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a67      	ldr	r2, [pc, #412]	; (8008e18 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	f000 80b1 	beq.w	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008c80:	4a65      	ldr	r2, [pc, #404]	; (8008e18 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	f200 80b6 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c88:	4a64      	ldr	r2, [pc, #400]	; (8008e1c <HAL_TIM_ConfigClockSource+0x1f8>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	f000 80a9 	beq.w	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008c90:	4a62      	ldr	r2, [pc, #392]	; (8008e1c <HAL_TIM_ConfigClockSource+0x1f8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	f200 80ae 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c98:	4a61      	ldr	r2, [pc, #388]	; (8008e20 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	f000 80a1 	beq.w	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008ca0:	4a5f      	ldr	r2, [pc, #380]	; (8008e20 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	f200 80a6 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ca8:	4a5e      	ldr	r2, [pc, #376]	; (8008e24 <HAL_TIM_ConfigClockSource+0x200>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	f000 8099 	beq.w	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008cb0:	4a5c      	ldr	r2, [pc, #368]	; (8008e24 <HAL_TIM_ConfigClockSource+0x200>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	f200 809e 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cb8:	4a5b      	ldr	r2, [pc, #364]	; (8008e28 <HAL_TIM_ConfigClockSource+0x204>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	f000 8091 	beq.w	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008cc0:	4a59      	ldr	r2, [pc, #356]	; (8008e28 <HAL_TIM_ConfigClockSource+0x204>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	f200 8096 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ccc:	f000 8089 	beq.w	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008cd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008cd4:	f200 808e 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cdc:	d03e      	beq.n	8008d5c <HAL_TIM_ConfigClockSource+0x138>
 8008cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ce2:	f200 8087 	bhi.w	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cea:	f000 8086 	beq.w	8008dfa <HAL_TIM_ConfigClockSource+0x1d6>
 8008cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf2:	d87f      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cf4:	2b70      	cmp	r3, #112	; 0x70
 8008cf6:	d01a      	beq.n	8008d2e <HAL_TIM_ConfigClockSource+0x10a>
 8008cf8:	2b70      	cmp	r3, #112	; 0x70
 8008cfa:	d87b      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cfc:	2b60      	cmp	r3, #96	; 0x60
 8008cfe:	d050      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0x17e>
 8008d00:	2b60      	cmp	r3, #96	; 0x60
 8008d02:	d877      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008d04:	2b50      	cmp	r3, #80	; 0x50
 8008d06:	d03c      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x15e>
 8008d08:	2b50      	cmp	r3, #80	; 0x50
 8008d0a:	d873      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008d0c:	2b40      	cmp	r3, #64	; 0x40
 8008d0e:	d058      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x19e>
 8008d10:	2b40      	cmp	r3, #64	; 0x40
 8008d12:	d86f      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008d14:	2b30      	cmp	r3, #48	; 0x30
 8008d16:	d064      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008d18:	2b30      	cmp	r3, #48	; 0x30
 8008d1a:	d86b      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d060      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d867      	bhi.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d05c      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008d28:	2b10      	cmp	r3, #16
 8008d2a:	d05a      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x1be>
 8008d2c:	e062      	b.n	8008df4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6899      	ldr	r1, [r3, #8]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f000 fdd1 	bl	80098e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	609a      	str	r2, [r3, #8]
      break;
 8008d5a:	e04f      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	6899      	ldr	r1, [r3, #8]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f000 fdba 	bl	80098e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d7e:	609a      	str	r2, [r3, #8]
      break;
 8008d80:	e03c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6859      	ldr	r1, [r3, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f000 fd2c 	bl	80097ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2150      	movs	r1, #80	; 0x50
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fd85 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008da0:	e02c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6859      	ldr	r1, [r3, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f000 fd4b 	bl	800984a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2160      	movs	r1, #96	; 0x60
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fd75 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008dc0:	e01c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6859      	ldr	r1, [r3, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f000 fd0c 	bl	80097ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2140      	movs	r1, #64	; 0x40
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fd65 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008de0:	e00c      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f000 fd5c 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008df2:	e003      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
      break;
 8008df8:	e000      	b.n	8008dfc <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	00100070 	.word	0x00100070
 8008e1c:	00100050 	.word	0x00100050
 8008e20:	00100040 	.word	0x00100040
 8008e24:	00100030 	.word	0x00100030
 8008e28:	00100020 	.word	0x00100020

08008e2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d107      	bne.n	8008ee0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ede:	e02a      	b.n	8008f36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d107      	bne.n	8008efa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2202      	movs	r2, #2
 8008eee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ef8:	e01d      	b.n	8008f36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d107      	bne.n	8008f14 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2204      	movs	r2, #4
 8008f08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f12:	e010      	b.n	8008f36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d107      	bne.n	8008f2e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2208      	movs	r2, #8
 8008f22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f2c:	e003      	b.n	8008f36 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f7ff ffb4 	bl	8008ea4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	771a      	strb	r2, [r3, #28]
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d10b      	bne.n	8008f7a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d136      	bne.n	8008fde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f78:	e031      	b.n	8008fde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d10b      	bne.n	8008f9c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2202      	movs	r2, #2
 8008f88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d125      	bne.n	8008fde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f9a:	e020      	b.n	8008fde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d10b      	bne.n	8008fbe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2204      	movs	r2, #4
 8008faa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d114      	bne.n	8008fde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fbc:	e00f      	b.n	8008fde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d10a      	bne.n	8008fde <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2208      	movs	r2, #8
 8008fcc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d103      	bne.n	8008fde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff ff42 	bl	8008e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	771a      	strb	r2, [r3, #28]
}
 8008fea:	bf00      	nop
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d103      	bne.n	8009012 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2201      	movs	r2, #1
 800900e:	771a      	strb	r2, [r3, #28]
 8009010:	e019      	b.n	8009046 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d103      	bne.n	8009024 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2202      	movs	r2, #2
 8009020:	771a      	strb	r2, [r3, #28]
 8009022:	e010      	b.n	8009046 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	429a      	cmp	r2, r3
 800902c:	d103      	bne.n	8009036 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2204      	movs	r2, #4
 8009032:	771a      	strb	r2, [r3, #28]
 8009034:	e007      	b.n	8009046 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d102      	bne.n	8009046 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2208      	movs	r2, #8
 8009044:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7ff ff18 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	771a      	strb	r2, [r3, #28]
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a42      	ldr	r2, [pc, #264]	; (8009178 <TIM_Base_SetConfig+0x11c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d013      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907a:	d00f      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a3f      	ldr	r2, [pc, #252]	; (800917c <TIM_Base_SetConfig+0x120>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00b      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a3e      	ldr	r2, [pc, #248]	; (8009180 <TIM_Base_SetConfig+0x124>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d007      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a3d      	ldr	r2, [pc, #244]	; (8009184 <TIM_Base_SetConfig+0x128>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d003      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a3c      	ldr	r2, [pc, #240]	; (8009188 <TIM_Base_SetConfig+0x12c>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d108      	bne.n	80090ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a31      	ldr	r2, [pc, #196]	; (8009178 <TIM_Base_SetConfig+0x11c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d01f      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090bc:	d01b      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a2e      	ldr	r2, [pc, #184]	; (800917c <TIM_Base_SetConfig+0x120>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d017      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a2d      	ldr	r2, [pc, #180]	; (8009180 <TIM_Base_SetConfig+0x124>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d013      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a2c      	ldr	r2, [pc, #176]	; (8009184 <TIM_Base_SetConfig+0x128>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d00f      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a2c      	ldr	r2, [pc, #176]	; (800918c <TIM_Base_SetConfig+0x130>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d00b      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a2b      	ldr	r2, [pc, #172]	; (8009190 <TIM_Base_SetConfig+0x134>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d007      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a2a      	ldr	r2, [pc, #168]	; (8009194 <TIM_Base_SetConfig+0x138>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d003      	beq.n	80090f6 <TIM_Base_SetConfig+0x9a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a25      	ldr	r2, [pc, #148]	; (8009188 <TIM_Base_SetConfig+0x12c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d108      	bne.n	8009108 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4313      	orrs	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a12      	ldr	r2, [pc, #72]	; (8009178 <TIM_Base_SetConfig+0x11c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d013      	beq.n	800915c <TIM_Base_SetConfig+0x100>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a13      	ldr	r2, [pc, #76]	; (8009184 <TIM_Base_SetConfig+0x128>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00f      	beq.n	800915c <TIM_Base_SetConfig+0x100>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a13      	ldr	r2, [pc, #76]	; (800918c <TIM_Base_SetConfig+0x130>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00b      	beq.n	800915c <TIM_Base_SetConfig+0x100>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a12      	ldr	r2, [pc, #72]	; (8009190 <TIM_Base_SetConfig+0x134>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d007      	beq.n	800915c <TIM_Base_SetConfig+0x100>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a11      	ldr	r2, [pc, #68]	; (8009194 <TIM_Base_SetConfig+0x138>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d003      	beq.n	800915c <TIM_Base_SetConfig+0x100>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a0c      	ldr	r2, [pc, #48]	; (8009188 <TIM_Base_SetConfig+0x12c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d103      	bne.n	8009164 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	615a      	str	r2, [r3, #20]
}
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40012c00 	.word	0x40012c00
 800917c:	40000400 	.word	0x40000400
 8009180:	40000800 	.word	0x40000800
 8009184:	40013400 	.word	0x40013400
 8009188:	40015000 	.word	0x40015000
 800918c:	40014000 	.word	0x40014000
 8009190:	40014400 	.word	0x40014400
 8009194:	40014800 	.word	0x40014800

08009198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f023 0201 	bic.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 0302 	bic.w	r3, r3, #2
 80091e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a30      	ldr	r2, [pc, #192]	; (80092b4 <TIM_OC1_SetConfig+0x11c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d013      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a2f      	ldr	r2, [pc, #188]	; (80092b8 <TIM_OC1_SetConfig+0x120>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00f      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a2e      	ldr	r2, [pc, #184]	; (80092bc <TIM_OC1_SetConfig+0x124>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00b      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a2d      	ldr	r2, [pc, #180]	; (80092c0 <TIM_OC1_SetConfig+0x128>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a2c      	ldr	r2, [pc, #176]	; (80092c4 <TIM_OC1_SetConfig+0x12c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a2b      	ldr	r2, [pc, #172]	; (80092c8 <TIM_OC1_SetConfig+0x130>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10c      	bne.n	800923a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f023 0308 	bic.w	r3, r3, #8
 8009226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f023 0304 	bic.w	r3, r3, #4
 8009238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a1d      	ldr	r2, [pc, #116]	; (80092b4 <TIM_OC1_SetConfig+0x11c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a1c      	ldr	r2, [pc, #112]	; (80092b8 <TIM_OC1_SetConfig+0x120>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00f      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <TIM_OC1_SetConfig+0x124>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d00b      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <TIM_OC1_SetConfig+0x128>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d007      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a19      	ldr	r2, [pc, #100]	; (80092c4 <TIM_OC1_SetConfig+0x12c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <TIM_OC1_SetConfig+0x130>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d111      	bne.n	800928e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	4313      	orrs	r3, r2
 800928c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	621a      	str	r2, [r3, #32]
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	40012c00 	.word	0x40012c00
 80092b8:	40013400 	.word	0x40013400
 80092bc:	40014000 	.word	0x40014000
 80092c0:	40014400 	.word	0x40014400
 80092c4:	40014800 	.word	0x40014800
 80092c8:	40015000 	.word	0x40015000

080092cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	f023 0210 	bic.w	r2, r3, #16
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0320 	bic.w	r3, r3, #32
 800931a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a2c      	ldr	r2, [pc, #176]	; (80093dc <TIM_OC2_SetConfig+0x110>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <TIM_OC2_SetConfig+0x74>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a2b      	ldr	r2, [pc, #172]	; (80093e0 <TIM_OC2_SetConfig+0x114>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_OC2_SetConfig+0x74>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a2a      	ldr	r2, [pc, #168]	; (80093e4 <TIM_OC2_SetConfig+0x118>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10d      	bne.n	800935c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	011b      	lsls	r3, r3, #4
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800935a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a1f      	ldr	r2, [pc, #124]	; (80093dc <TIM_OC2_SetConfig+0x110>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d013      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a1e      	ldr	r2, [pc, #120]	; (80093e0 <TIM_OC2_SetConfig+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00f      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a1e      	ldr	r2, [pc, #120]	; (80093e8 <TIM_OC2_SetConfig+0x11c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d00b      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a1d      	ldr	r2, [pc, #116]	; (80093ec <TIM_OC2_SetConfig+0x120>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d007      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a1c      	ldr	r2, [pc, #112]	; (80093f0 <TIM_OC2_SetConfig+0x124>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d003      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a17      	ldr	r2, [pc, #92]	; (80093e4 <TIM_OC2_SetConfig+0x118>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d113      	bne.n	80093b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800939a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40012c00 	.word	0x40012c00
 80093e0:	40013400 	.word	0x40013400
 80093e4:	40015000 	.word	0x40015000
 80093e8:	40014000 	.word	0x40014000
 80093ec:	40014400 	.word	0x40014400
 80093f0:	40014800 	.word	0x40014800

080093f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0303 	bic.w	r3, r3, #3
 800942e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	4313      	orrs	r3, r2
 800944c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a2b      	ldr	r2, [pc, #172]	; (8009500 <TIM_OC3_SetConfig+0x10c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d007      	beq.n	8009466 <TIM_OC3_SetConfig+0x72>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a2a      	ldr	r2, [pc, #168]	; (8009504 <TIM_OC3_SetConfig+0x110>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d003      	beq.n	8009466 <TIM_OC3_SetConfig+0x72>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a29      	ldr	r2, [pc, #164]	; (8009508 <TIM_OC3_SetConfig+0x114>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d10d      	bne.n	8009482 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800946c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	4313      	orrs	r3, r2
 8009478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a1e      	ldr	r2, [pc, #120]	; (8009500 <TIM_OC3_SetConfig+0x10c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d013      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <TIM_OC3_SetConfig+0x110>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00f      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a1d      	ldr	r2, [pc, #116]	; (800950c <TIM_OC3_SetConfig+0x118>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00b      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1c      	ldr	r2, [pc, #112]	; (8009510 <TIM_OC3_SetConfig+0x11c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d007      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1b      	ldr	r2, [pc, #108]	; (8009514 <TIM_OC3_SetConfig+0x120>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d003      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a16      	ldr	r2, [pc, #88]	; (8009508 <TIM_OC3_SetConfig+0x114>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d113      	bne.n	80094da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40012c00 	.word	0x40012c00
 8009504:	40013400 	.word	0x40013400
 8009508:	40015000 	.word	0x40015000
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800

08009518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800954a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	031b      	lsls	r3, r3, #12
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a2c      	ldr	r2, [pc, #176]	; (8009628 <TIM_OC4_SetConfig+0x110>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d007      	beq.n	800958c <TIM_OC4_SetConfig+0x74>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a2b      	ldr	r2, [pc, #172]	; (800962c <TIM_OC4_SetConfig+0x114>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_OC4_SetConfig+0x74>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <TIM_OC4_SetConfig+0x118>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d10d      	bne.n	80095a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	031b      	lsls	r3, r3, #12
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1f      	ldr	r2, [pc, #124]	; (8009628 <TIM_OC4_SetConfig+0x110>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d013      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1e      	ldr	r2, [pc, #120]	; (800962c <TIM_OC4_SetConfig+0x114>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00f      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1e      	ldr	r2, [pc, #120]	; (8009634 <TIM_OC4_SetConfig+0x11c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00b      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a1d      	ldr	r2, [pc, #116]	; (8009638 <TIM_OC4_SetConfig+0x120>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d007      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a1c      	ldr	r2, [pc, #112]	; (800963c <TIM_OC4_SetConfig+0x124>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a17      	ldr	r2, [pc, #92]	; (8009630 <TIM_OC4_SetConfig+0x118>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d113      	bne.n	8009600 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	019b      	lsls	r3, r3, #6
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	019b      	lsls	r3, r3, #6
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	621a      	str	r2, [r3, #32]
}
 800961a:	bf00      	nop
 800961c:	371c      	adds	r7, #28
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40012c00 	.word	0x40012c00
 800962c:	40013400 	.word	0x40013400
 8009630:	40015000 	.word	0x40015000
 8009634:	40014000 	.word	0x40014000
 8009638:	40014400 	.word	0x40014400
 800963c:	40014800 	.word	0x40014800

08009640 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800966e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009684:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	041b      	lsls	r3, r3, #16
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	4313      	orrs	r3, r2
 8009690:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a19      	ldr	r2, [pc, #100]	; (80096fc <TIM_OC5_SetConfig+0xbc>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d013      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a18      	ldr	r2, [pc, #96]	; (8009700 <TIM_OC5_SetConfig+0xc0>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00f      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a17      	ldr	r2, [pc, #92]	; (8009704 <TIM_OC5_SetConfig+0xc4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00b      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a16      	ldr	r2, [pc, #88]	; (8009708 <TIM_OC5_SetConfig+0xc8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d007      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a15      	ldr	r2, [pc, #84]	; (800970c <TIM_OC5_SetConfig+0xcc>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d003      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a14      	ldr	r2, [pc, #80]	; (8009710 <TIM_OC5_SetConfig+0xd0>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d109      	bne.n	80096d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	621a      	str	r2, [r3, #32]
}
 80096f0:	bf00      	nop
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	40012c00 	.word	0x40012c00
 8009700:	40013400 	.word	0x40013400
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400
 800970c:	40014800 	.word	0x40014800
 8009710:	40015000 	.word	0x40015000

08009714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800975a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	051b      	lsls	r3, r3, #20
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a1a      	ldr	r2, [pc, #104]	; (80097d4 <TIM_OC6_SetConfig+0xc0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d013      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a19      	ldr	r2, [pc, #100]	; (80097d8 <TIM_OC6_SetConfig+0xc4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00f      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a18      	ldr	r2, [pc, #96]	; (80097dc <TIM_OC6_SetConfig+0xc8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00b      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a17      	ldr	r2, [pc, #92]	; (80097e0 <TIM_OC6_SetConfig+0xcc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d007      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a16      	ldr	r2, [pc, #88]	; (80097e4 <TIM_OC6_SetConfig+0xd0>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d003      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <TIM_OC6_SetConfig+0xd4>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d109      	bne.n	80097ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800979e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	029b      	lsls	r3, r3, #10
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	40012c00 	.word	0x40012c00
 80097d8:	40013400 	.word	0x40013400
 80097dc:	40014000 	.word	0x40014000
 80097e0:	40014400 	.word	0x40014400
 80097e4:	40014800 	.word	0x40014800
 80097e8:	40015000 	.word	0x40015000

080097ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	f023 0201 	bic.w	r2, r3, #1
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f023 030a 	bic.w	r3, r3, #10
 8009828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	621a      	str	r2, [r3, #32]
}
 800983e:	bf00      	nop
 8009840:	371c      	adds	r7, #28
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800984a:	b480      	push	{r7}
 800984c:	b087      	sub	sp, #28
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	f023 0210 	bic.w	r2, r3, #16
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	031b      	lsls	r3, r3, #12
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	4313      	orrs	r3, r2
 800987e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80098c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f043 0307 	orr.w	r3, r3, #7
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	609a      	str	r2, [r3, #8]
}
 80098d8:	bf00      	nop
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	431a      	orrs	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4313      	orrs	r3, r2
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	609a      	str	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2201      	movs	r2, #1
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	43db      	mvns	r3, r3
 8009946:	401a      	ands	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f003 031f 	and.w	r3, r3, #31
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	fa01 f303 	lsl.w	r3, r1, r3
 800995c:	431a      	orrs	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009984:	2302      	movs	r3, #2
 8009986:	e06f      	b.n	8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a31      	ldr	r2, [pc, #196]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d009      	beq.n	80099c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a30      	ldr	r2, [pc, #192]	; (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d004      	beq.n	80099c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a2e      	ldr	r2, [pc, #184]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d108      	bne.n	80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1e      	ldr	r2, [pc, #120]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d01d      	beq.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a08:	d018      	beq.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a1c      	ldr	r2, [pc, #112]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d013      	beq.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1a      	ldr	r2, [pc, #104]	; (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d00e      	beq.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a15      	ldr	r2, [pc, #84]	; (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d009      	beq.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a16      	ldr	r2, [pc, #88]	; (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d004      	beq.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a11      	ldr	r2, [pc, #68]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d10c      	bne.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	40015000 	.word	0x40015000
 8009a80:	40000400 	.word	0x40000400
 8009a84:	40000800 	.word	0x40000800
 8009a88:	40014000 	.word	0x40014000

08009a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e096      	b.n	8009bd6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	041b      	lsls	r3, r3, #16
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a2f      	ldr	r2, [pc, #188]	; (8009be4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d009      	beq.n	8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a2d      	ldr	r2, [pc, #180]	; (8009be8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a2c      	ldr	r2, [pc, #176]	; (8009bec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d106      	bne.n	8009b4e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a24      	ldr	r2, [pc, #144]	; (8009be4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d009      	beq.n	8009b6c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a22      	ldr	r2, [pc, #136]	; (8009be8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d004      	beq.n	8009b6c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a21      	ldr	r2, [pc, #132]	; (8009bec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d12b      	bne.n	8009bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	051b      	lsls	r3, r3, #20
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a11      	ldr	r2, [pc, #68]	; (8009be4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d009      	beq.n	8009bb6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a10      	ldr	r2, [pc, #64]	; (8009be8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d004      	beq.n	8009bb6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a0e      	ldr	r2, [pc, #56]	; (8009bec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d106      	bne.n	8009bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	40012c00 	.word	0x40012c00
 8009be8:	40013400 	.word	0x40013400
 8009bec:	40015000 	.word	0x40015000

08009bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c8c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009c90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b085      	sub	sp, #20
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009cb2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009cb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	43db      	mvns	r3, r3
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	4013      	ands	r3, r2
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	f107 0014 	add.w	r0, r7, #20
 8009cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	b004      	add	sp, #16
 8009d20:	4770      	bx	lr
	...

08009d24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b09d      	sub	sp, #116	; 0x74
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	78db      	ldrb	r3, [r3, #3]
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d81f      	bhi.n	8009d96 <USB_ActivateEndpoint+0x72>
 8009d56:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <USB_ActivateEndpoint+0x38>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d6d 	.word	0x08009d6d
 8009d60:	08009d89 	.word	0x08009d89
 8009d64:	08009d9f 	.word	0x08009d9f
 8009d68:	08009d7b 	.word	0x08009d7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009d6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009d78:	e012      	b.n	8009da0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009d7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009d82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009d86:	e00b      	b.n	8009da0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009d88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009d94:	e004      	b.n	8009da0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009d9c:	e000      	b.n	8009da0 <USB_ActivateEndpoint+0x7c>
      break;
 8009d9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	441a      	add	r2, r3
 8009daa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	b21b      	sxth	r3, r3
 8009dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dda:	b21a      	sxth	r2, r3
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b21b      	sxth	r3, r3
 8009de6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	441a      	add	r2, r3
 8009df4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	7b1b      	ldrb	r3, [r3, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f040 8149 	bne.w	800a0a8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	785b      	ldrb	r3, [r3, #1]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 8084 	beq.w	8009f28 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	61bb      	str	r3, [r7, #24]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	4413      	add	r3, r2
 8009e32:	61bb      	str	r3, [r7, #24]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	00da      	lsls	r2, r3, #3
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	88db      	ldrh	r3, [r3, #6]
 8009e48:	085b      	lsrs	r3, r3, #1
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	827b      	strh	r3, [r7, #18]
 8009e62:	8a7b      	ldrh	r3, [r7, #18]
 8009e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01b      	beq.n	8009ea4 <USB_ActivateEndpoint+0x180>
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	823b      	strh	r3, [r7, #16]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	441a      	add	r2, r3
 8009e8e:	8a3b      	ldrh	r3, [r7, #16]
 8009e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	78db      	ldrb	r3, [r3, #3]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d020      	beq.n	8009eee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec2:	81bb      	strh	r3, [r7, #12]
 8009ec4:	89bb      	ldrh	r3, [r7, #12]
 8009ec6:	f083 0320 	eor.w	r3, r3, #32
 8009eca:	81bb      	strh	r3, [r7, #12]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	441a      	add	r2, r3
 8009ed6:	89bb      	ldrh	r3, [r7, #12]
 8009ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	8013      	strh	r3, [r2, #0]
 8009eec:	e2a6      	b.n	800a43c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f04:	81fb      	strh	r3, [r7, #14]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	441a      	add	r2, r3
 8009f10:	89fb      	ldrh	r3, [r7, #14]
 8009f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	8013      	strh	r3, [r2, #0]
 8009f26:	e289      	b.n	800a43c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	461a      	mov	r2, r3
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	4413      	add	r3, r2
 8009f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	00da      	lsls	r2, r3, #3
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	4413      	add	r3, r2
 8009f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	88db      	ldrh	r3, [r3, #6]
 8009f50:	085b      	lsrs	r3, r3, #1
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	4413      	add	r3, r2
 8009f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	00da      	lsls	r2, r3, #3
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	4413      	add	r3, r2
 8009f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b3e      	cmp	r3, #62	; 0x3e
 8009f86:	d918      	bls.n	8009fba <USB_ActivateEndpoint+0x296>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	095b      	lsrs	r3, r3, #5
 8009f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	f003 031f 	and.w	r3, r3, #31
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <USB_ActivateEndpoint+0x27e>
 8009f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	029b      	lsls	r3, r3, #10
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	801a      	strh	r2, [r3, #0]
 8009fb8:	e029      	b.n	800a00e <USB_ActivateEndpoint+0x2ea>
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d112      	bne.n	8009fe8 <USB_ActivateEndpoint+0x2c4>
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	801a      	strh	r2, [r3, #0]
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	801a      	strh	r2, [r3, #0]
 8009fe6:	e012      	b.n	800a00e <USB_ActivateEndpoint+0x2ea>
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	085b      	lsrs	r3, r3, #1
 8009fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <USB_ActivateEndpoint+0x2de>
 8009ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ffe:	3301      	adds	r3, #1
 800a000:	66bb      	str	r3, [r7, #104]	; 0x68
 800a002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a004:	b29b      	uxth	r3, r3
 800a006:	029b      	lsls	r3, r3, #10
 800a008:	b29a      	uxth	r2, r3
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a01c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a01e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d01b      	beq.n	800a05e <USB_ActivateEndpoint+0x33a>
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a03c:	843b      	strh	r3, [r7, #32]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	441a      	add	r2, r3
 800a048:	8c3b      	ldrh	r3, [r7, #32]
 800a04a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a04e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a074:	83fb      	strh	r3, [r7, #30]
 800a076:	8bfb      	ldrh	r3, [r7, #30]
 800a078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a07c:	83fb      	strh	r3, [r7, #30]
 800a07e:	8bfb      	ldrh	r3, [r7, #30]
 800a080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a084:	83fb      	strh	r3, [r7, #30]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	441a      	add	r2, r3
 800a090:	8bfb      	ldrh	r3, [r7, #30]
 800a092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a09a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	8013      	strh	r3, [r2, #0]
 800a0a6:	e1c9      	b.n	800a43c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	78db      	ldrb	r3, [r3, #3]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d11e      	bne.n	800a0ee <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4413      	add	r3, r2
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	441a      	add	r2, r3
 800a0d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a0d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	8013      	strh	r3, [r2, #0]
 800a0ec:	e01d      	b.n	800a12a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a104:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	441a      	add	r2, r3
 800a112:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a11a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a126:	b29b      	uxth	r3, r3
 800a128:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a134:	b29b      	uxth	r3, r3
 800a136:	461a      	mov	r2, r3
 800a138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a13a:	4413      	add	r3, r2
 800a13c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	00da      	lsls	r2, r3, #3
 800a144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a146:	4413      	add	r3, r2
 800a148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a14c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	891b      	ldrh	r3, [r3, #8]
 800a152:	085b      	lsrs	r3, r3, #1
 800a154:	b29b      	uxth	r3, r3
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	657b      	str	r3, [r7, #84]	; 0x54
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a168:	b29b      	uxth	r3, r3
 800a16a:	461a      	mov	r2, r3
 800a16c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a16e:	4413      	add	r3, r2
 800a170:	657b      	str	r3, [r7, #84]	; 0x54
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	00da      	lsls	r2, r3, #3
 800a178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a17a:	4413      	add	r3, r2
 800a17c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a180:	653b      	str	r3, [r7, #80]	; 0x50
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	895b      	ldrh	r3, [r3, #10]
 800a186:	085b      	lsrs	r3, r3, #1
 800a188:	b29b      	uxth	r3, r3
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a190:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b00      	cmp	r3, #0
 800a198:	f040 8093 	bne.w	800a2c2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a1ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a1b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01b      	beq.n	800a1f0 <USB_ActivateEndpoint+0x4cc>
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	441a      	add	r2, r3
 800a1da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a1fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a204:	2b00      	cmp	r3, #0
 800a206:	d01b      	beq.n	800a240 <USB_ActivateEndpoint+0x51c>
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	b29b      	uxth	r3, r3
 800a216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	441a      	add	r2, r3
 800a22a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a22c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a256:	873b      	strh	r3, [r7, #56]	; 0x38
 800a258:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a25a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a25e:	873b      	strh	r3, [r7, #56]	; 0x38
 800a260:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a262:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a266:	873b      	strh	r3, [r7, #56]	; 0x38
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	441a      	add	r2, r3
 800a272:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29b      	uxth	r3, r3
 800a296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a29a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a29e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	441a      	add	r2, r3
 800a2aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	8013      	strh	r3, [r2, #0]
 800a2c0:	e0bc      	b.n	800a43c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a2d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d01d      	beq.n	800a31a <USB_ActivateEndpoint+0x5f6>
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	441a      	add	r2, r3
 800a302:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a30a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a30e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a316:	b29b      	uxth	r3, r3
 800a318:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a32a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	d01d      	beq.n	800a372 <USB_ActivateEndpoint+0x64e>
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	b29b      	uxth	r3, r3
 800a344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	441a      	add	r2, r3
 800a35a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a35e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a36a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a36e:	b29b      	uxth	r3, r3
 800a370:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	78db      	ldrb	r3, [r3, #3]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d024      	beq.n	800a3c4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a390:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a398:	f083 0320 	eor.w	r3, r3, #32
 800a39c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	441a      	add	r2, r3
 800a3aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a3ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	8013      	strh	r3, [r2, #0]
 800a3c2:	e01d      	b.n	800a400 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	441a      	add	r2, r3
 800a3e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a3ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a416:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	441a      	add	r2, r3
 800a424:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a42c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a438:	b29b      	uxth	r3, r3
 800a43a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a43c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a440:	4618      	mov	r0, r3
 800a442:	3774      	adds	r7, #116	; 0x74
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b08d      	sub	sp, #52	; 0x34
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	7b1b      	ldrb	r3, [r3, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f040 808e 	bne.w	800a57c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d044      	beq.n	800a4f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	81bb      	strh	r3, [r7, #12]
 800a476:	89bb      	ldrh	r3, [r7, #12]
 800a478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01b      	beq.n	800a4b8 <USB_DeactivateEndpoint+0x6c>
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a496:	817b      	strh	r3, [r7, #10]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	441a      	add	r2, r3
 800a4a2:	897b      	ldrh	r3, [r7, #10]
 800a4a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4ce:	813b      	strh	r3, [r7, #8]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	441a      	add	r2, r3
 800a4da:	893b      	ldrh	r3, [r7, #8]
 800a4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	8013      	strh	r3, [r2, #0]
 800a4f0:	e192      	b.n	800a818 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	827b      	strh	r3, [r7, #18]
 800a500:	8a7b      	ldrh	r3, [r7, #18]
 800a502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d01b      	beq.n	800a542 <USB_DeactivateEndpoint+0xf6>
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	b29b      	uxth	r3, r3
 800a518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a51c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a520:	823b      	strh	r3, [r7, #16]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	441a      	add	r2, r3
 800a52c:	8a3b      	ldrh	r3, [r7, #16]
 800a52e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a53e:	b29b      	uxth	r3, r3
 800a540:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a558:	81fb      	strh	r3, [r7, #14]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	441a      	add	r2, r3
 800a564:	89fb      	ldrh	r3, [r7, #14]
 800a566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a56a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a56e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a576:	b29b      	uxth	r3, r3
 800a578:	8013      	strh	r3, [r2, #0]
 800a57a:	e14d      	b.n	800a818 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 80a5 	bne.w	800a6d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	843b      	strh	r3, [r7, #32]
 800a594:	8c3b      	ldrh	r3, [r7, #32]
 800a596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d01b      	beq.n	800a5d6 <USB_DeactivateEndpoint+0x18a>
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b4:	83fb      	strh	r3, [r7, #30]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	441a      	add	r2, r3
 800a5c0:	8bfb      	ldrh	r3, [r7, #30]
 800a5c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	83bb      	strh	r3, [r7, #28]
 800a5e4:	8bbb      	ldrh	r3, [r7, #28]
 800a5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d01b      	beq.n	800a626 <USB_DeactivateEndpoint+0x1da>
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a604:	837b      	strh	r3, [r7, #26]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	441a      	add	r2, r3
 800a610:	8b7b      	ldrh	r3, [r7, #26]
 800a612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a61a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a61e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a622:	b29b      	uxth	r3, r3
 800a624:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	b29b      	uxth	r3, r3
 800a634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63c:	833b      	strh	r3, [r7, #24]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	441a      	add	r2, r3
 800a648:	8b3b      	ldrh	r3, [r7, #24]
 800a64a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a64e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a656:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a674:	82fb      	strh	r3, [r7, #22]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	441a      	add	r2, r3
 800a680:	8afb      	ldrh	r3, [r7, #22]
 800a682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a68a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a692:	b29b      	uxth	r3, r3
 800a694:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ac:	82bb      	strh	r3, [r7, #20]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	441a      	add	r2, r3
 800a6b8:	8abb      	ldrh	r3, [r7, #20]
 800a6ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	8013      	strh	r3, [r2, #0]
 800a6ce:	e0a3      	b.n	800a818 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a6de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d01b      	beq.n	800a720 <USB_DeactivateEndpoint+0x2d4>
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	441a      	add	r2, r3
 800a70a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a70c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a72e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01b      	beq.n	800a770 <USB_DeactivateEndpoint+0x324>
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	b29b      	uxth	r3, r3
 800a746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	441a      	add	r2, r3
 800a75a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a75c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a768:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a786:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	441a      	add	r2, r3
 800a792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a79c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7be:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	441a      	add	r2, r3
 800a7ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	441a      	add	r2, r3
 800a802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a80c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a814:	b29b      	uxth	r3, r3
 800a816:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3734      	adds	r7, #52	; 0x34
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b0c2      	sub	sp, #264	; 0x108
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a834:	6018      	str	r0, [r3, #0]
 800a836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	785b      	ldrb	r3, [r3, #1]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	f040 867b 	bne.w	800b548 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	699a      	ldr	r2, [r3, #24]
 800a85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d908      	bls.n	800a880 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a87e:	e007      	b.n	800a890 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	7b1b      	ldrb	r3, [r3, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d13a      	bne.n	800a916 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6959      	ldr	r1, [r3, #20]
 800a8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	88da      	ldrh	r2, [r3, #6]
 800a8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a8c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a8c6:	6800      	ldr	r0, [r0, #0]
 800a8c8:	f001 fc1d 	bl	800c106 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	613b      	str	r3, [r7, #16]
 800a8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]
 800a8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	00da      	lsls	r2, r3, #3
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	4413      	add	r3, r2
 800a902:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	801a      	strh	r2, [r3, #0]
 800a912:	f000 bde3 	b.w	800b4dc <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	78db      	ldrb	r3, [r3, #3]
 800a922:	2b02      	cmp	r3, #2
 800a924:	f040 843a 	bne.w	800b19c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6a1a      	ldr	r2, [r3, #32]
 800a934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	429a      	cmp	r2, r3
 800a942:	f240 83b7 	bls.w	800b0b4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a94a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	b29b      	uxth	r3, r3
 800a964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a96c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	441a      	add	r2, r3
 800a98a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a98e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a996:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6a1a      	ldr	r2, [r3, #32]
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	1ad2      	subs	r2, r2, r3
 800a9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 81b3 	beq.w	800ad4e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	633b      	str	r3, [r7, #48]	; 0x30
 800a9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d16d      	bne.n	800aae0 <USB_EPStartXfer+0x2ba>
 800aa04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	461a      	mov	r2, r3
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	4413      	add	r3, r2
 800aa26:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	00da      	lsls	r2, r3, #3
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	4413      	add	r3, r2
 800aa3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	2b3e      	cmp	r3, #62	; 0x3e
 800aa46:	d91c      	bls.n	800aa82 <USB_EPStartXfer+0x25c>
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4c:	095b      	lsrs	r3, r3, #5
 800aa4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa56:	f003 031f 	and.w	r3, r3, #31
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d104      	bne.n	800aa68 <USB_EPStartXfer+0x242>
 800aa5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aa62:	3b01      	subs	r3, #1
 800aa64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	029b      	lsls	r3, r3, #10
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	801a      	strh	r2, [r3, #0]
 800aa80:	e053      	b.n	800ab2a <USB_EPStartXfer+0x304>
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d112      	bne.n	800aab0 <USB_EPStartXfer+0x28a>
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	801a      	strh	r2, [r3, #0]
 800aaae:	e03c      	b.n	800ab2a <USB_EPStartXfer+0x304>
 800aab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab4:	085b      	lsrs	r3, r3, #1
 800aab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <USB_EPStartXfer+0x2aa>
 800aac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aaca:	3301      	adds	r3, #1
 800aacc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aad0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	029b      	lsls	r3, r3, #10
 800aad8:	b29a      	uxth	r2, r3
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	e024      	b.n	800ab2a <USB_EPStartXfer+0x304>
 800aae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	785b      	ldrb	r3, [r3, #1]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d11c      	bne.n	800ab2a <USB_EPStartXfer+0x304>
 800aaf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	461a      	mov	r2, r3
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	4413      	add	r3, r2
 800ab06:	633b      	str	r3, [r7, #48]	; 0x30
 800ab08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	00da      	lsls	r2, r3, #3
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	4413      	add	r3, r2
 800ab1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	895b      	ldrh	r3, [r3, #10]
 800ab36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6959      	ldr	r1, [r3, #20]
 800ab46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab50:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab54:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab58:	6800      	ldr	r0, [r0, #0]
 800ab5a:	f001 fad4 	bl	800c106 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	695a      	ldr	r2, [r3, #20]
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	441a      	add	r2, r3
 800ab70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6a1a      	ldr	r2, [r3, #32]
 800ab88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d90f      	bls.n	800abb8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800ab98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6a1a      	ldr	r2, [r3, #32]
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	1ad2      	subs	r2, r2, r3
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	621a      	str	r2, [r3, #32]
 800abb6:	e00e      	b.n	800abd6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800abb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800abc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2200      	movs	r2, #0
 800abd4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	785b      	ldrb	r3, [r3, #1]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d16d      	bne.n	800acc2 <USB_EPStartXfer+0x49c>
 800abe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	461a      	mov	r2, r3
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	4413      	add	r3, r2
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	00da      	lsls	r2, r3, #3
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac26:	2b3e      	cmp	r3, #62	; 0x3e
 800ac28:	d91c      	bls.n	800ac64 <USB_EPStartXfer+0x43e>
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac38:	f003 031f 	and.w	r3, r3, #31
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <USB_EPStartXfer+0x424>
 800ac40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac44:	3b01      	subs	r3, #1
 800ac46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	029b      	lsls	r3, r3, #10
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	801a      	strh	r2, [r3, #0]
 800ac62:	e059      	b.n	800ad18 <USB_EPStartXfer+0x4f2>
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d112      	bne.n	800ac92 <USB_EPStartXfer+0x46c>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	801a      	strh	r2, [r3, #0]
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	801a      	strh	r2, [r3, #0]
 800ac90:	e042      	b.n	800ad18 <USB_EPStartXfer+0x4f2>
 800ac92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac96:	085b      	lsrs	r3, r3, #1
 800ac98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d004      	beq.n	800acb2 <USB_EPStartXfer+0x48c>
 800aca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acac:	3301      	adds	r3, #1
 800acae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800acb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	029b      	lsls	r3, r3, #10
 800acba:	b29a      	uxth	r2, r3
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	801a      	strh	r2, [r3, #0]
 800acc0:	e02a      	b.n	800ad18 <USB_EPStartXfer+0x4f2>
 800acc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	785b      	ldrb	r3, [r3, #1]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d122      	bne.n	800ad18 <USB_EPStartXfer+0x4f2>
 800acd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	623b      	str	r3, [r7, #32]
 800acde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acec:	b29b      	uxth	r3, r3
 800acee:	461a      	mov	r2, r3
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	4413      	add	r3, r2
 800acf4:	623b      	str	r3, [r7, #32]
 800acf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	00da      	lsls	r2, r3, #3
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	4413      	add	r3, r2
 800ad08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	891b      	ldrh	r3, [r3, #8]
 800ad24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6959      	ldr	r1, [r3, #20]
 800ad34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad46:	6800      	ldr	r0, [r0, #0]
 800ad48:	f001 f9dd 	bl	800c106 <USB_WritePMA>
 800ad4c:	e3c6      	b.n	800b4dc <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	785b      	ldrb	r3, [r3, #1]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d16d      	bne.n	800ae3a <USB_EPStartXfer+0x614>
 800ad5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad7e:	4413      	add	r3, r2
 800ad80:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	00da      	lsls	r2, r3, #3
 800ad90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad92:	4413      	add	r3, r2
 800ad94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad98:	647b      	str	r3, [r7, #68]	; 0x44
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9e:	2b3e      	cmp	r3, #62	; 0x3e
 800ada0:	d91c      	bls.n	800addc <USB_EPStartXfer+0x5b6>
 800ada2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada6:	095b      	lsrs	r3, r3, #5
 800ada8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d104      	bne.n	800adc2 <USB_EPStartXfer+0x59c>
 800adb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800adbc:	3b01      	subs	r3, #1
 800adbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800adc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	029b      	lsls	r3, r3, #10
 800adca:	b29b      	uxth	r3, r3
 800adcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add4:	b29a      	uxth	r2, r3
 800add6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800add8:	801a      	strh	r2, [r3, #0]
 800adda:	e059      	b.n	800ae90 <USB_EPStartXfer+0x66a>
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d112      	bne.n	800ae0a <USB_EPStartXfer+0x5e4>
 800ade4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adee:	b29a      	uxth	r2, r3
 800adf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf2:	801a      	strh	r2, [r3, #0]
 800adf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae06:	801a      	strh	r2, [r3, #0]
 800ae08:	e042      	b.n	800ae90 <USB_EPStartXfer+0x66a>
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d004      	beq.n	800ae2a <USB_EPStartXfer+0x604>
 800ae20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae24:	3301      	adds	r3, #1
 800ae26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	029b      	lsls	r3, r3, #10
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	e02a      	b.n	800ae90 <USB_EPStartXfer+0x66a>
 800ae3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d122      	bne.n	800ae90 <USB_EPStartXfer+0x66a>
 800ae4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	653b      	str	r3, [r7, #80]	; 0x50
 800ae56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	461a      	mov	r2, r3
 800ae68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae6a:	4413      	add	r3, r2
 800ae6c:	653b      	str	r3, [r7, #80]	; 0x50
 800ae6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	00da      	lsls	r2, r3, #3
 800ae7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae7e:	4413      	add	r3, r2
 800ae80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	891b      	ldrh	r3, [r3, #8]
 800ae9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	6959      	ldr	r1, [r3, #20]
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aeb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aeba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aebe:	6800      	ldr	r0, [r0, #0]
 800aec0:	f001 f921 	bl	800c106 <USB_WritePMA>
            ep->xfer_buff += len;
 800aec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	695a      	ldr	r2, [r3, #20]
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed4:	441a      	add	r2, r3
 800aed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6a1a      	ldr	r2, [r3, #32]
 800aeee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d90f      	bls.n	800af1e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800aefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6a1a      	ldr	r2, [r3, #32]
 800af0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	621a      	str	r2, [r3, #32]
 800af1c:	e00e      	b.n	800af3c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800af1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800af2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2200      	movs	r2, #0
 800af3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	643b      	str	r3, [r7, #64]	; 0x40
 800af48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d16d      	bne.n	800b034 <USB_EPStartXfer+0x80e>
 800af58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	63bb      	str	r3, [r7, #56]	; 0x38
 800af64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af72:	b29b      	uxth	r3, r3
 800af74:	461a      	mov	r2, r3
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	4413      	add	r3, r2
 800af7a:	63bb      	str	r3, [r7, #56]	; 0x38
 800af7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	00da      	lsls	r2, r3, #3
 800af8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8c:	4413      	add	r3, r2
 800af8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af92:	637b      	str	r3, [r7, #52]	; 0x34
 800af94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af98:	2b3e      	cmp	r3, #62	; 0x3e
 800af9a:	d91c      	bls.n	800afd6 <USB_EPStartXfer+0x7b0>
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa0:	095b      	lsrs	r3, r3, #5
 800afa2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800afa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afaa:	f003 031f 	and.w	r3, r3, #31
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d104      	bne.n	800afbc <USB_EPStartXfer+0x796>
 800afb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb6:	3b01      	subs	r3, #1
 800afb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800afbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	029b      	lsls	r3, r3, #10
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afce:	b29a      	uxth	r2, r3
 800afd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd2:	801a      	strh	r2, [r3, #0]
 800afd4:	e053      	b.n	800b07e <USB_EPStartXfer+0x858>
 800afd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d112      	bne.n	800b004 <USB_EPStartXfer+0x7de>
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afe8:	b29a      	uxth	r2, r3
 800afea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afec:	801a      	strh	r2, [r3, #0]
 800afee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800affc:	b29a      	uxth	r2, r3
 800affe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b000:	801a      	strh	r2, [r3, #0]
 800b002:	e03c      	b.n	800b07e <USB_EPStartXfer+0x858>
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b008:	085b      	lsrs	r3, r3, #1
 800b00a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	d004      	beq.n	800b024 <USB_EPStartXfer+0x7fe>
 800b01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b01e:	3301      	adds	r3, #1
 800b020:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b028:	b29b      	uxth	r3, r3
 800b02a:	029b      	lsls	r3, r3, #10
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b030:	801a      	strh	r2, [r3, #0]
 800b032:	e024      	b.n	800b07e <USB_EPStartXfer+0x858>
 800b034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	785b      	ldrb	r3, [r3, #1]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d11c      	bne.n	800b07e <USB_EPStartXfer+0x858>
 800b044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b052:	b29b      	uxth	r3, r3
 800b054:	461a      	mov	r2, r3
 800b056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b058:	4413      	add	r3, r2
 800b05a:	643b      	str	r3, [r7, #64]	; 0x40
 800b05c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	00da      	lsls	r2, r3, #3
 800b06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b06c:	4413      	add	r3, r2
 800b06e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b078:	b29a      	uxth	r2, r3
 800b07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	895b      	ldrh	r3, [r3, #10]
 800b08a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6959      	ldr	r1, [r3, #20]
 800b09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b0a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0ac:	6800      	ldr	r0, [r0, #0]
 800b0ae:	f001 f82a 	bl	800c106 <USB_WritePMA>
 800b0b2:	e213      	b.n	800b4dc <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	881b      	ldrh	r3, [r3, #0]
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b0e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	441a      	add	r2, r3
 800b108:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b10c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b140:	4413      	add	r3, r2
 800b142:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	00da      	lsls	r2, r3, #3
 800b152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b154:	4413      	add	r3, r2
 800b156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b15a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b160:	b29a      	uxth	r2, r3
 800b162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b164:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	891b      	ldrh	r3, [r3, #8]
 800b172:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6959      	ldr	r1, [r3, #20]
 800b182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b186:	b29b      	uxth	r3, r3
 800b188:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b18c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b190:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b194:	6800      	ldr	r0, [r0, #0]
 800b196:	f000 ffb6 	bl	800c106 <USB_WritePMA>
 800b19a:	e19f      	b.n	800b4dc <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6a1a      	ldr	r2, [r3, #32]
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ac:	1ad2      	subs	r2, r2, r3
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 80bc 	beq.w	800b35a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b1e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	673b      	str	r3, [r7, #112]	; 0x70
 800b1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	785b      	ldrb	r3, [r3, #1]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d16d      	bne.n	800b2da <USB_EPStartXfer+0xab4>
 800b1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	66bb      	str	r3, [r7, #104]	; 0x68
 800b20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b218:	b29b      	uxth	r3, r3
 800b21a:	461a      	mov	r2, r3
 800b21c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b21e:	4413      	add	r3, r2
 800b220:	66bb      	str	r3, [r7, #104]	; 0x68
 800b222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	00da      	lsls	r2, r3, #3
 800b230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b232:	4413      	add	r3, r2
 800b234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b238:	667b      	str	r3, [r7, #100]	; 0x64
 800b23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23e:	2b3e      	cmp	r3, #62	; 0x3e
 800b240:	d91c      	bls.n	800b27c <USB_EPStartXfer+0xa56>
 800b242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b250:	f003 031f 	and.w	r3, r3, #31
 800b254:	2b00      	cmp	r3, #0
 800b256:	d104      	bne.n	800b262 <USB_EPStartXfer+0xa3c>
 800b258:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b25c:	3b01      	subs	r3, #1
 800b25e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b262:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b266:	b29b      	uxth	r3, r3
 800b268:	029b      	lsls	r3, r3, #10
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b274:	b29a      	uxth	r2, r3
 800b276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b278:	801a      	strh	r2, [r3, #0]
 800b27a:	e053      	b.n	800b324 <USB_EPStartXfer+0xafe>
 800b27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b280:	2b00      	cmp	r3, #0
 800b282:	d112      	bne.n	800b2aa <USB_EPStartXfer+0xa84>
 800b284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b28e:	b29a      	uxth	r2, r3
 800b290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b292:	801a      	strh	r2, [r3, #0]
 800b294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b29e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2a6:	801a      	strh	r2, [r3, #0]
 800b2a8:	e03c      	b.n	800b324 <USB_EPStartXfer+0xafe>
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ae:	085b      	lsrs	r3, r3, #1
 800b2b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <USB_EPStartXfer+0xaa4>
 800b2c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b2ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	029b      	lsls	r3, r3, #10
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2d6:	801a      	strh	r2, [r3, #0]
 800b2d8:	e024      	b.n	800b324 <USB_EPStartXfer+0xafe>
 800b2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	785b      	ldrb	r3, [r3, #1]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d11c      	bne.n	800b324 <USB_EPStartXfer+0xafe>
 800b2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2fe:	4413      	add	r3, r2
 800b300:	673b      	str	r3, [r7, #112]	; 0x70
 800b302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	00da      	lsls	r2, r3, #3
 800b310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b312:	4413      	add	r3, r2
 800b314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b31e:	b29a      	uxth	r2, r3
 800b320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b322:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	895b      	ldrh	r3, [r3, #10]
 800b330:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6959      	ldr	r1, [r3, #20]
 800b340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b344:	b29b      	uxth	r3, r3
 800b346:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b34a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b34e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b352:	6800      	ldr	r0, [r0, #0]
 800b354:	f000 fed7 	bl	800c106 <USB_WritePMA>
 800b358:	e0c0      	b.n	800b4dc <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	785b      	ldrb	r3, [r3, #1]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d16d      	bne.n	800b446 <USB_EPStartXfer+0xc20>
 800b36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b36e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b37a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b384:	b29b      	uxth	r3, r3
 800b386:	461a      	mov	r2, r3
 800b388:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b38a:	4413      	add	r3, r2
 800b38c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	00da      	lsls	r2, r3, #3
 800b39c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b39e:	4413      	add	r3, r2
 800b3a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3aa:	2b3e      	cmp	r3, #62	; 0x3e
 800b3ac:	d91c      	bls.n	800b3e8 <USB_EPStartXfer+0xbc2>
 800b3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b2:	095b      	lsrs	r3, r3, #5
 800b3b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3bc:	f003 031f 	and.w	r3, r3, #31
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d104      	bne.n	800b3ce <USB_EPStartXfer+0xba8>
 800b3c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b3ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	029b      	lsls	r3, r3, #10
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3e4:	801a      	strh	r2, [r3, #0]
 800b3e6:	e05f      	b.n	800b4a8 <USB_EPStartXfer+0xc82>
 800b3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d112      	bne.n	800b416 <USB_EPStartXfer+0xbf0>
 800b3f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3fe:	801a      	strh	r2, [r3, #0]
 800b400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b402:	881b      	ldrh	r3, [r3, #0]
 800b404:	b29b      	uxth	r3, r3
 800b406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b40a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b40e:	b29a      	uxth	r2, r3
 800b410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b412:	801a      	strh	r2, [r3, #0]
 800b414:	e048      	b.n	800b4a8 <USB_EPStartXfer+0xc82>
 800b416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <USB_EPStartXfer+0xc10>
 800b42c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b430:	3301      	adds	r3, #1
 800b432:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b436:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	029b      	lsls	r3, r3, #10
 800b43e:	b29a      	uxth	r2, r3
 800b440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b442:	801a      	strh	r2, [r3, #0]
 800b444:	e030      	b.n	800b4a8 <USB_EPStartXfer+0xc82>
 800b446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	785b      	ldrb	r3, [r3, #1]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d128      	bne.n	800b4a8 <USB_EPStartXfer+0xc82>
 800b456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b472:	b29b      	uxth	r3, r3
 800b474:	461a      	mov	r2, r3
 800b476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b47a:	4413      	add	r3, r2
 800b47c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	00da      	lsls	r2, r3, #3
 800b48e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b492:	4413      	add	r3, r2
 800b494:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b4a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b4a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	891b      	ldrh	r3, [r3, #8]
 800b4b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6959      	ldr	r1, [r3, #20]
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b4ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b4d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b4d6:	6800      	ldr	r0, [r0, #0]
 800b4d8:	f000 fe15 	bl	800c106 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	881b      	ldrh	r3, [r3, #0]
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b502:	817b      	strh	r3, [r7, #10]
 800b504:	897b      	ldrh	r3, [r7, #10]
 800b506:	f083 0310 	eor.w	r3, r3, #16
 800b50a:	817b      	strh	r3, [r7, #10]
 800b50c:	897b      	ldrh	r3, [r7, #10]
 800b50e:	f083 0320 	eor.w	r3, r3, #32
 800b512:	817b      	strh	r3, [r7, #10]
 800b514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	441a      	add	r2, r3
 800b52e:	897b      	ldrh	r3, [r7, #10]
 800b530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b540:	b29b      	uxth	r3, r3
 800b542:	8013      	strh	r3, [r2, #0]
 800b544:	f000 bc9f 	b.w	800be86 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	7b1b      	ldrb	r3, [r3, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f040 80ae 	bne.w	800b6b6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	699a      	ldr	r2, [r3, #24]
 800b566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	429a      	cmp	r2, r3
 800b574:	d917      	bls.n	800b5a6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b596:	1ad2      	subs	r2, r2, r3
 800b598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	619a      	str	r2, [r3, #24]
 800b5a4:	e00e      	b.n	800b5c4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	00da      	lsls	r2, r3, #3
 800b5fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b600:	4413      	add	r3, r2
 800b602:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60e:	2b3e      	cmp	r3, #62	; 0x3e
 800b610:	d91d      	bls.n	800b64e <USB_EPStartXfer+0xe28>
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	095b      	lsrs	r3, r3, #5
 800b618:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b620:	f003 031f 	and.w	r3, r3, #31
 800b624:	2b00      	cmp	r3, #0
 800b626:	d104      	bne.n	800b632 <USB_EPStartXfer+0xe0c>
 800b628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b62c:	3b01      	subs	r3, #1
 800b62e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b632:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b636:	b29b      	uxth	r3, r3
 800b638:	029b      	lsls	r3, r3, #10
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b644:	b29a      	uxth	r2, r3
 800b646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b64a:	801a      	strh	r2, [r3, #0]
 800b64c:	e3e1      	b.n	800be12 <USB_EPStartXfer+0x15ec>
 800b64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b652:	2b00      	cmp	r3, #0
 800b654:	d116      	bne.n	800b684 <USB_EPStartXfer+0xe5e>
 800b656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b662:	b29a      	uxth	r2, r3
 800b664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b668:	801a      	strh	r2, [r3, #0]
 800b66a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	b29b      	uxth	r3, r3
 800b672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b680:	801a      	strh	r2, [r3, #0]
 800b682:	e3c6      	b.n	800be12 <USB_EPStartXfer+0x15ec>
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b688:	085b      	lsrs	r3, r3, #1
 800b68a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <USB_EPStartXfer+0xe7e>
 800b69a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b69e:	3301      	adds	r3, #1
 800b6a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b6a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	029b      	lsls	r3, r3, #10
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6b2:	801a      	strh	r2, [r3, #0]
 800b6b4:	e3ad      	b.n	800be12 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	78db      	ldrb	r3, [r3, #3]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	f040 8200 	bne.w	800bac8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	785b      	ldrb	r3, [r3, #1]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f040 8091 	bne.w	800b7fc <USB_EPStartXfer+0xfd6>
 800b6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6fe:	4413      	add	r3, r2
 800b700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	00da      	lsls	r2, r3, #3
 800b712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b716:	4413      	add	r3, r2
 800b718:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b71c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	2b3e      	cmp	r3, #62	; 0x3e
 800b72e:	d925      	bls.n	800b77c <USB_EPStartXfer+0xf56>
 800b730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	095b      	lsrs	r3, r3, #5
 800b73e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	f003 031f 	and.w	r3, r3, #31
 800b752:	2b00      	cmp	r3, #0
 800b754:	d104      	bne.n	800b760 <USB_EPStartXfer+0xf3a>
 800b756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75a:	3b01      	subs	r3, #1
 800b75c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b764:	b29b      	uxth	r3, r3
 800b766:	029b      	lsls	r3, r3, #10
 800b768:	b29b      	uxth	r3, r3
 800b76a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b76e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b772:	b29a      	uxth	r2, r3
 800b774:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b778:	801a      	strh	r2, [r3, #0]
 800b77a:	e074      	b.n	800b866 <USB_EPStartXfer+0x1040>
 800b77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d116      	bne.n	800b7ba <USB_EPStartXfer+0xf94>
 800b78c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b790:	881b      	ldrh	r3, [r3, #0]
 800b792:	b29b      	uxth	r3, r3
 800b794:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b798:	b29a      	uxth	r2, r3
 800b79a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b79e:	801a      	strh	r2, [r3, #0]
 800b7a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7a4:	881b      	ldrh	r3, [r3, #0]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7b6:	801a      	strh	r2, [r3, #0]
 800b7b8:	e055      	b.n	800b866 <USB_EPStartXfer+0x1040>
 800b7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	f003 0301 	and.w	r3, r3, #1
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d004      	beq.n	800b7ea <USB_EPStartXfer+0xfc4>
 800b7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	029b      	lsls	r3, r3, #10
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7f8:	801a      	strh	r2, [r3, #0]
 800b7fa:	e034      	b.n	800b866 <USB_EPStartXfer+0x1040>
 800b7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	785b      	ldrb	r3, [r3, #1]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d12c      	bne.n	800b866 <USB_EPStartXfer+0x1040>
 800b80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b828:	b29b      	uxth	r3, r3
 800b82a:	461a      	mov	r2, r3
 800b82c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b830:	4413      	add	r3, r2
 800b832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	00da      	lsls	r2, r3, #3
 800b844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b848:	4413      	add	r3, r2
 800b84a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b84e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	b29a      	uxth	r2, r3
 800b860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b864:	801a      	strh	r2, [r3, #0]
 800b866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	785b      	ldrb	r3, [r3, #1]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f040 8091 	bne.w	800b9a8 <USB_EPStartXfer+0x1182>
 800b886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	00da      	lsls	r2, r3, #3
 800b8be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	2b3e      	cmp	r3, #62	; 0x3e
 800b8da:	d925      	bls.n	800b928 <USB_EPStartXfer+0x1102>
 800b8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	095b      	lsrs	r3, r3, #5
 800b8ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	f003 031f 	and.w	r3, r3, #31
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d104      	bne.n	800b90c <USB_EPStartXfer+0x10e6>
 800b902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b906:	3b01      	subs	r3, #1
 800b908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b910:	b29b      	uxth	r3, r3
 800b912:	029b      	lsls	r3, r3, #10
 800b914:	b29b      	uxth	r3, r3
 800b916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b91a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b91e:	b29a      	uxth	r2, r3
 800b920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b924:	801a      	strh	r2, [r3, #0]
 800b926:	e06d      	b.n	800ba04 <USB_EPStartXfer+0x11de>
 800b928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d116      	bne.n	800b966 <USB_EPStartXfer+0x1140>
 800b938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b944:	b29a      	uxth	r2, r3
 800b946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b94a:	801a      	strh	r2, [r3, #0]
 800b94c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	b29b      	uxth	r3, r3
 800b954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b962:	801a      	strh	r2, [r3, #0]
 800b964:	e04e      	b.n	800ba04 <USB_EPStartXfer+0x11de>
 800b966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b97c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <USB_EPStartXfer+0x1170>
 800b98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b990:	3301      	adds	r3, #1
 800b992:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	029b      	lsls	r3, r3, #10
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9a4:	801a      	strh	r2, [r3, #0]
 800b9a6:	e02d      	b.n	800ba04 <USB_EPStartXfer+0x11de>
 800b9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	785b      	ldrb	r3, [r3, #1]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d125      	bne.n	800ba04 <USB_EPStartXfer+0x11de>
 800b9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	00da      	lsls	r2, r3, #3
 800b9e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba02:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ba04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69db      	ldr	r3, [r3, #28]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 81fe 	beq.w	800be12 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ba16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ba36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <USB_EPStartXfer+0x1228>
 800ba42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10d      	bne.n	800ba6a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ba4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f040 81db 	bne.w	800be12 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ba5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f040 81d4 	bne.w	800be12 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ba6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba90:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ba94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	441a      	add	r2, r3
 800baae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800bab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800babe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	8013      	strh	r3, [r2, #0]
 800bac6:	e1a4      	b.n	800be12 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	78db      	ldrb	r3, [r3, #3]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	f040 819a 	bne.w	800be0e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699a      	ldr	r2, [r3, #24]
 800bae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d917      	bls.n	800bb26 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800baf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800bb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb16:	1ad2      	subs	r2, r2, r3
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	619a      	str	r2, [r3, #24]
 800bb24:	e00e      	b.n	800bb44 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800bb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800bb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2200      	movs	r2, #0
 800bb42:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bb44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	785b      	ldrb	r3, [r3, #1]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d178      	bne.n	800bc46 <USB_EPStartXfer+0x1420>
 800bb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	461a      	mov	r2, r3
 800bb74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bb78:	4413      	add	r3, r2
 800bb7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	00da      	lsls	r2, r3, #3
 800bb8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bb90:	4413      	add	r3, r2
 800bb92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb9e:	2b3e      	cmp	r3, #62	; 0x3e
 800bba0:	d91d      	bls.n	800bbde <USB_EPStartXfer+0x13b8>
 800bba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba6:	095b      	lsrs	r3, r3, #5
 800bba8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb0:	f003 031f 	and.w	r3, r3, #31
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d104      	bne.n	800bbc2 <USB_EPStartXfer+0x139c>
 800bbb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	029b      	lsls	r3, r3, #10
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbda:	801a      	strh	r2, [r3, #0]
 800bbdc:	e064      	b.n	800bca8 <USB_EPStartXfer+0x1482>
 800bbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d116      	bne.n	800bc14 <USB_EPStartXfer+0x13ee>
 800bbe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbf8:	801a      	strh	r2, [r3, #0]
 800bbfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc10:	801a      	strh	r2, [r3, #0]
 800bc12:	e049      	b.n	800bca8 <USB_EPStartXfer+0x1482>
 800bc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc18:	085b      	lsrs	r3, r3, #1
 800bc1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bc1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d004      	beq.n	800bc34 <USB_EPStartXfer+0x140e>
 800bc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2e:	3301      	adds	r3, #1
 800bc30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bc34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	029b      	lsls	r3, r3, #10
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc42:	801a      	strh	r2, [r3, #0]
 800bc44:	e030      	b.n	800bca8 <USB_EPStartXfer+0x1482>
 800bc46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	785b      	ldrb	r3, [r3, #1]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d128      	bne.n	800bca8 <USB_EPStartXfer+0x1482>
 800bc56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc7a:	4413      	add	r3, r2
 800bc7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	00da      	lsls	r2, r3, #3
 800bc8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc92:	4413      	add	r3, r2
 800bc94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bca6:	801a      	strh	r2, [r3, #0]
 800bca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bcb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	785b      	ldrb	r3, [r3, #1]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d178      	bne.n	800bdb8 <USB_EPStartXfer+0x1592>
 800bcc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	461a      	mov	r2, r3
 800bce6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bcea:	4413      	add	r3, r2
 800bcec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	00da      	lsls	r2, r3, #3
 800bcfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bd02:	4413      	add	r3, r2
 800bd04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd10:	2b3e      	cmp	r3, #62	; 0x3e
 800bd12:	d91d      	bls.n	800bd50 <USB_EPStartXfer+0x152a>
 800bd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd18:	095b      	lsrs	r3, r3, #5
 800bd1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd22:	f003 031f 	and.w	r3, r3, #31
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d104      	bne.n	800bd34 <USB_EPStartXfer+0x150e>
 800bd2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	029b      	lsls	r3, r3, #10
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd4c:	801a      	strh	r2, [r3, #0]
 800bd4e:	e060      	b.n	800be12 <USB_EPStartXfer+0x15ec>
 800bd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d116      	bne.n	800bd86 <USB_EPStartXfer+0x1560>
 800bd58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd6a:	801a      	strh	r2, [r3, #0]
 800bd6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd82:	801a      	strh	r2, [r3, #0]
 800bd84:	e045      	b.n	800be12 <USB_EPStartXfer+0x15ec>
 800bd86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd8a:	085b      	lsrs	r3, r3, #1
 800bd8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d004      	beq.n	800bda6 <USB_EPStartXfer+0x1580>
 800bd9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bda0:	3301      	adds	r3, #1
 800bda2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bda6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	029b      	lsls	r3, r3, #10
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdb4:	801a      	strh	r2, [r3, #0]
 800bdb6:	e02c      	b.n	800be12 <USB_EPStartXfer+0x15ec>
 800bdb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	785b      	ldrb	r3, [r3, #1]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d124      	bne.n	800be12 <USB_EPStartXfer+0x15ec>
 800bdc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	461a      	mov	r2, r3
 800bdda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bdde:	4413      	add	r3, r2
 800bde0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bde4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	00da      	lsls	r2, r3, #3
 800bdf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bdfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be04:	b29a      	uxth	r2, r3
 800be06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be0a:	801a      	strh	r2, [r3, #0]
 800be0c:	e001      	b.n	800be12 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	e03a      	b.n	800be88 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800be3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800be40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800be48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800be4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800be54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	441a      	add	r2, r3
 800be6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800be72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be82:	b29b      	uxth	r3, r3
 800be84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be92:	b480      	push	{r7}
 800be94:	b085      	sub	sp, #20
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d020      	beq.n	800bee6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beba:	81bb      	strh	r3, [r7, #12]
 800bebc:	89bb      	ldrh	r3, [r7, #12]
 800bebe:	f083 0310 	eor.w	r3, r3, #16
 800bec2:	81bb      	strh	r3, [r7, #12]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	441a      	add	r2, r3
 800bece:	89bb      	ldrh	r3, [r7, #12]
 800bed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	8013      	strh	r3, [r2, #0]
 800bee4:	e01f      	b.n	800bf26 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4413      	add	r3, r2
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800befc:	81fb      	strh	r3, [r7, #14]
 800befe:	89fb      	ldrh	r3, [r7, #14]
 800bf00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bf04:	81fb      	strh	r3, [r7, #14]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	441a      	add	r2, r3
 800bf10:	89fb      	ldrh	r3, [r7, #14]
 800bf12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	7b1b      	ldrb	r3, [r3, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 809d 	bne.w	800c082 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	785b      	ldrb	r3, [r3, #1]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d04c      	beq.n	800bfea <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	823b      	strh	r3, [r7, #16]
 800bf5e:	8a3b      	ldrh	r3, [r7, #16]
 800bf60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01b      	beq.n	800bfa0 <USB_EPClearStall+0x6c>
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf7e:	81fb      	strh	r3, [r7, #14]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	441a      	add	r2, r3
 800bf8a:	89fb      	ldrh	r3, [r7, #14]
 800bf8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	78db      	ldrb	r3, [r3, #3]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d06c      	beq.n	800c082 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfbe:	81bb      	strh	r3, [r7, #12]
 800bfc0:	89bb      	ldrh	r3, [r7, #12]
 800bfc2:	f083 0320 	eor.w	r3, r3, #32
 800bfc6:	81bb      	strh	r3, [r7, #12]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	441a      	add	r2, r3
 800bfd2:	89bb      	ldrh	r3, [r7, #12]
 800bfd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	8013      	strh	r3, [r2, #0]
 800bfe8:	e04b      	b.n	800c082 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	82fb      	strh	r3, [r7, #22]
 800bff8:	8afb      	ldrh	r3, [r7, #22]
 800bffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d01b      	beq.n	800c03a <USB_EPClearStall+0x106>
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	b29b      	uxth	r3, r3
 800c010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c018:	82bb      	strh	r3, [r7, #20]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	441a      	add	r2, r3
 800c024:	8abb      	ldrh	r3, [r7, #20]
 800c026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c02e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c036:	b29b      	uxth	r3, r3
 800c038:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	b29b      	uxth	r3, r3
 800c048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c050:	827b      	strh	r3, [r7, #18]
 800c052:	8a7b      	ldrh	r3, [r7, #18]
 800c054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c058:	827b      	strh	r3, [r7, #18]
 800c05a:	8a7b      	ldrh	r3, [r7, #18]
 800c05c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c060:	827b      	strh	r3, [r7, #18]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	441a      	add	r2, r3
 800c06c:	8a7b      	ldrh	r3, [r7, #18]
 800c06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c07e:	b29b      	uxth	r3, r3
 800c080:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	371c      	adds	r7, #28
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c09c:	78fb      	ldrb	r3, [r7, #3]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d103      	bne.n	800c0aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2280      	movs	r2, #128	; 0x80
 800c0a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c106:	b480      	push	{r7}
 800c108:	b08d      	sub	sp, #52	; 0x34
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	60f8      	str	r0, [r7, #12]
 800c10e:	60b9      	str	r1, [r7, #8]
 800c110:	4611      	mov	r1, r2
 800c112:	461a      	mov	r2, r3
 800c114:	460b      	mov	r3, r1
 800c116:	80fb      	strh	r3, [r7, #6]
 800c118:	4613      	mov	r3, r2
 800c11a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c11c:	88bb      	ldrh	r3, [r7, #4]
 800c11e:	3301      	adds	r3, #1
 800c120:	085b      	lsrs	r3, r3, #1
 800c122:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c12c:	88fa      	ldrh	r2, [r7, #6]
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	4413      	add	r3, r2
 800c132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c13c:	e01b      	b.n	800c176 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	3301      	adds	r3, #1
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	021b      	lsls	r3, r3, #8
 800c152:	b29b      	uxth	r3, r3
 800c154:	461a      	mov	r2, r3
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	4313      	orrs	r3, r2
 800c15a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	b29a      	uxth	r2, r3
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c166:	3302      	adds	r3, #2
 800c168:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	3301      	adds	r3, #1
 800c16e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	3b01      	subs	r3, #1
 800c174:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1e0      	bne.n	800c13e <USB_WritePMA+0x38>
  }
}
 800c17c:	bf00      	nop
 800c17e:	bf00      	nop
 800c180:	3734      	adds	r7, #52	; 0x34
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b08b      	sub	sp, #44	; 0x2c
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	4611      	mov	r1, r2
 800c196:	461a      	mov	r2, r3
 800c198:	460b      	mov	r3, r1
 800c19a:	80fb      	strh	r3, [r7, #6]
 800c19c:	4613      	mov	r3, r2
 800c19e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c1a0:	88bb      	ldrh	r3, [r7, #4]
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1b0:	88fa      	ldrh	r2, [r7, #6]
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ba:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c0:	e018      	b.n	800c1f4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	3302      	adds	r3, #2
 800c1ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	0a1b      	lsrs	r3, r3, #8
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1e3      	bne.n	800c1c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c1fa:	88bb      	ldrh	r3, [r7, #4]
 800c1fc:	f003 0301 	and.w	r3, r3, #1
 800c200:	b29b      	uxth	r3, r3
 800c202:	2b00      	cmp	r3, #0
 800c204:	d007      	beq.n	800c216 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800c206:	6a3b      	ldr	r3, [r7, #32]
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	b2da      	uxtb	r2, r3
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	701a      	strb	r2, [r3, #0]
  }
}
 800c216:	bf00      	nop
 800c218:	372c      	adds	r7, #44	; 0x2c
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	460b      	mov	r3, r1
 800c22c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800c22e:	2010      	movs	r0, #16
 800c230:	f001 fe6a 	bl	800df08 <USBD_static_malloc>
 800c234:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d105      	bne.n	800c248 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c244:	2302      	movs	r3, #2
 800c246:	e01b      	b.n	800c280 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7c1b      	ldrb	r3, [r3, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d103      	bne.n	800c260 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2207      	movs	r2, #7
 800c25c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800c25e:	e002      	b.n	800c266 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	220a      	movs	r2, #10
 800c264:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800c266:	2304      	movs	r3, #4
 800c268:	2203      	movs	r2, #3
 800c26a:	2181      	movs	r1, #129	; 0x81
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f001 fd04 	bl	800dc7a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800c294:	2181      	movs	r1, #129	; 0x81
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 fd15 	bl	800dcc6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d009      	beq.n	800c2c6 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f001 fe33 	bl	800df24 <USBD_static_free>
    pdev->pClassData = NULL;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2e0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e0e8      	b.n	800c4c6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d046      	beq.n	800c38e <USBD_HID_Setup+0xbe>
 800c300:	2b20      	cmp	r3, #32
 800c302:	f040 80d8 	bne.w	800c4b6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	785b      	ldrb	r3, [r3, #1]
 800c30a:	3b02      	subs	r3, #2
 800c30c:	2b09      	cmp	r3, #9
 800c30e:	d836      	bhi.n	800c37e <USBD_HID_Setup+0xae>
 800c310:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <USBD_HID_Setup+0x48>)
 800c312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c316:	bf00      	nop
 800c318:	0800c36f 	.word	0x0800c36f
 800c31c:	0800c34f 	.word	0x0800c34f
 800c320:	0800c37f 	.word	0x0800c37f
 800c324:	0800c37f 	.word	0x0800c37f
 800c328:	0800c37f 	.word	0x0800c37f
 800c32c:	0800c37f 	.word	0x0800c37f
 800c330:	0800c37f 	.word	0x0800c37f
 800c334:	0800c37f 	.word	0x0800c37f
 800c338:	0800c35d 	.word	0x0800c35d
 800c33c:	0800c341 	.word	0x0800c341
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	885b      	ldrh	r3, [r3, #2]
 800c344:	b2db      	uxtb	r3, r3
 800c346:	461a      	mov	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	601a      	str	r2, [r3, #0]
          break;
 800c34c:	e01e      	b.n	800c38c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2201      	movs	r2, #1
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 f9b0 	bl	800d6ba <USBD_CtlSendData>
          break;
 800c35a:	e017      	b.n	800c38c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	885b      	ldrh	r3, [r3, #2]
 800c360:	0a1b      	lsrs	r3, r3, #8
 800c362:	b29b      	uxth	r3, r3
 800c364:	b2db      	uxtb	r3, r3
 800c366:	461a      	mov	r2, r3
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	605a      	str	r2, [r3, #4]
          break;
 800c36c:	e00e      	b.n	800c38c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3304      	adds	r3, #4
 800c372:	2201      	movs	r2, #1
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f001 f99f 	bl	800d6ba <USBD_CtlSendData>
          break;
 800c37c:	e006      	b.n	800c38c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f001 f929 	bl	800d5d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800c386:	2303      	movs	r3, #3
 800c388:	75fb      	strb	r3, [r7, #23]
          break;
 800c38a:	bf00      	nop
      }
      break;
 800c38c:	e09a      	b.n	800c4c4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	785b      	ldrb	r3, [r3, #1]
 800c392:	2b0b      	cmp	r3, #11
 800c394:	f200 8086 	bhi.w	800c4a4 <USBD_HID_Setup+0x1d4>
 800c398:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <USBD_HID_Setup+0xd0>)
 800c39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39e:	bf00      	nop
 800c3a0:	0800c3d1 	.word	0x0800c3d1
 800c3a4:	0800c4b3 	.word	0x0800c4b3
 800c3a8:	0800c4a5 	.word	0x0800c4a5
 800c3ac:	0800c4a5 	.word	0x0800c4a5
 800c3b0:	0800c4a5 	.word	0x0800c4a5
 800c3b4:	0800c4a5 	.word	0x0800c4a5
 800c3b8:	0800c3fb 	.word	0x0800c3fb
 800c3bc:	0800c4a5 	.word	0x0800c4a5
 800c3c0:	0800c4a5 	.word	0x0800c4a5
 800c3c4:	0800c4a5 	.word	0x0800c4a5
 800c3c8:	0800c453 	.word	0x0800c453
 800c3cc:	0800c47d 	.word	0x0800c47d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d107      	bne.n	800c3ec <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c3dc:	f107 030a 	add.w	r3, r7, #10
 800c3e0:	2202      	movs	r2, #2
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f001 f968 	bl	800d6ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3ea:	e063      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f001 f8f2 	bl	800d5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	75fb      	strb	r3, [r7, #23]
          break;
 800c3f8:	e05c      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	885b      	ldrh	r3, [r3, #2]
 800c3fe:	0a1b      	lsrs	r3, r3, #8
 800c400:	b29b      	uxth	r3, r3
 800c402:	2b22      	cmp	r3, #34	; 0x22
 800c404:	d108      	bne.n	800c418 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	88db      	ldrh	r3, [r3, #6]
 800c40a:	2b4a      	cmp	r3, #74	; 0x4a
 800c40c:	bf28      	it	cs
 800c40e:	234a      	movcs	r3, #74	; 0x4a
 800c410:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800c412:	4b2f      	ldr	r3, [pc, #188]	; (800c4d0 <USBD_HID_Setup+0x200>)
 800c414:	613b      	str	r3, [r7, #16]
 800c416:	e015      	b.n	800c444 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	885b      	ldrh	r3, [r3, #2]
 800c41c:	0a1b      	lsrs	r3, r3, #8
 800c41e:	b29b      	uxth	r3, r3
 800c420:	2b21      	cmp	r3, #33	; 0x21
 800c422:	d108      	bne.n	800c436 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800c424:	4b2b      	ldr	r3, [pc, #172]	; (800c4d4 <USBD_HID_Setup+0x204>)
 800c426:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	88db      	ldrh	r3, [r3, #6]
 800c42c:	2b09      	cmp	r3, #9
 800c42e:	bf28      	it	cs
 800c430:	2309      	movcs	r3, #9
 800c432:	82bb      	strh	r3, [r7, #20]
 800c434:	e006      	b.n	800c444 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f001 f8cd 	bl	800d5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c43e:	2303      	movs	r3, #3
 800c440:	75fb      	strb	r3, [r7, #23]
            break;
 800c442:	e037      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800c444:	8abb      	ldrh	r3, [r7, #20]
 800c446:	461a      	mov	r2, r3
 800c448:	6939      	ldr	r1, [r7, #16]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 f935 	bl	800d6ba <USBD_CtlSendData>
          break;
 800c450:	e030      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d107      	bne.n	800c46e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3308      	adds	r3, #8
 800c462:	2201      	movs	r2, #1
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 f927 	bl	800d6ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c46c:	e022      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 f8b1 	bl	800d5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c476:	2303      	movs	r3, #3
 800c478:	75fb      	strb	r3, [r7, #23]
          break;
 800c47a:	e01b      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b03      	cmp	r3, #3
 800c486:	d106      	bne.n	800c496 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	885b      	ldrh	r3, [r3, #2]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	461a      	mov	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c494:	e00e      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f001 f89d 	bl	800d5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	75fb      	strb	r3, [r7, #23]
          break;
 800c4a2:	e007      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f001 f896 	bl	800d5d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	75fb      	strb	r3, [r7, #23]
          break;
 800c4b0:	e000      	b.n	800c4b4 <USBD_HID_Setup+0x1e4>
          break;
 800c4b2:	bf00      	nop
      }
      break;
 800c4b4:	e006      	b.n	800c4c4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f001 f88d 	bl	800d5d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	75fb      	strb	r3, [r7, #23]
      break;
 800c4c2:	bf00      	nop
  }

  return (uint8_t)ret;
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	200000fc 	.word	0x200000fc
 800c4d4:	200000e4 	.word	0x200000e4

0800c4d8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2222      	movs	r2, #34	; 0x22
 800c4e4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800c4e6:	4b03      	ldr	r3, [pc, #12]	; (800c4f4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	20000078 	.word	0x20000078

0800c4f8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2222      	movs	r2, #34	; 0x22
 800c504:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800c506:	4b03      	ldr	r3, [pc, #12]	; (800c514 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	2000009c 	.word	0x2000009c

0800c518 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2222      	movs	r2, #34	; 0x22
 800c524:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800c526:	4b03      	ldr	r3, [pc, #12]	; (800c534 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800c528:	4618      	mov	r0, r3
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	200000c0 	.word	0x200000c0

0800c538 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c54a:	2200      	movs	r2, #0
 800c54c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	220a      	movs	r2, #10
 800c568:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800c56a:	4b03      	ldr	r3, [pc, #12]	; (800c578 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	200000f0 	.word	0x200000f0

0800c57c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c590:	2303      	movs	r3, #3
 800c592:	e01f      	b.n	800c5d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	79fa      	ldrb	r2, [r7, #7]
 800c5c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f001 faed 	bl	800dba8 <USBD_LL_Init>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d101      	bne.n	800c5f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e016      	b.n	800c622 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00b      	beq.n	800c620 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c610:	f107 020e 	add.w	r2, r7, #14
 800c614:	4610      	mov	r0, r2
 800c616:	4798      	blx	r3
 800c618:	4602      	mov	r2, r0
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 fb06 	bl	800dc44 <USBD_LL_Start>
 800c638:	4603      	mov	r3, r0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	460b      	mov	r3, r1
 800c662:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c664:	2303      	movs	r3, #3
 800c666:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d009      	beq.n	800c686 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	78fa      	ldrb	r2, [r7, #3]
 800c67c:	4611      	mov	r1, r2
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	4798      	blx	r3
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c686:	7bfb      	ldrb	r3, [r7, #15]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	460b      	mov	r3, r1
 800c69a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d007      	beq.n	800c6b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	78fa      	ldrb	r2, [r7, #3]
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	4798      	blx	r3
  }

  return USBD_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 ff46 	bl	800d564 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c6f4:	f003 031f 	and.w	r3, r3, #31
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d01a      	beq.n	800c732 <USBD_LL_SetupStage+0x72>
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d822      	bhi.n	800c746 <USBD_LL_SetupStage+0x86>
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <USBD_LL_SetupStage+0x4a>
 800c704:	2b01      	cmp	r3, #1
 800c706:	d00a      	beq.n	800c71e <USBD_LL_SetupStage+0x5e>
 800c708:	e01d      	b.n	800c746 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f9ee 	bl	800caf4 <USBD_StdDevReq>
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
      break;
 800c71c:	e020      	b.n	800c760 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa52 	bl	800cbd0 <USBD_StdItfReq>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]
      break;
 800c730:	e016      	b.n	800c760 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa91 	bl	800cc62 <USBD_StdEPReq>
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
      break;
 800c744:	e00c      	b.n	800c760 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c74c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c750:	b2db      	uxtb	r3, r3
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 fad5 	bl	800dd04 <USBD_LL_StallEP>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73fb      	strb	r3, [r7, #15]
      break;
 800c75e:	bf00      	nop
  }

  return ret;
 800c760:	7bfb      	ldrb	r3, [r7, #15]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b086      	sub	sp, #24
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	460b      	mov	r3, r1
 800c774:	607a      	str	r2, [r7, #4]
 800c776:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c778:	7afb      	ldrb	r3, [r7, #11]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d138      	bne.n	800c7f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c784:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	d14a      	bne.n	800c826 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d913      	bls.n	800c7c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	689a      	ldr	r2, [r3, #8]
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	1ad2      	subs	r2, r2, r3
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	68da      	ldr	r2, [r3, #12]
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	bf28      	it	cs
 800c7b6:	4613      	movcs	r3, r2
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6879      	ldr	r1, [r7, #4]
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 ffa8 	bl	800d712 <USBD_CtlContinueRx>
 800c7c2:	e030      	b.n	800c826 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	d10b      	bne.n	800c7e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d005      	beq.n	800c7e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f000 ffa3 	bl	800d734 <USBD_CtlSendStatus>
 800c7ee:	e01a      	b.n	800c826 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d114      	bne.n	800c826 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	7afa      	ldrb	r2, [r7, #11]
 800c812:	4611      	mov	r1, r2
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	4798      	blx	r3
 800c818:	4603      	mov	r3, r0
 800c81a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c81c:	7dfb      	ldrb	r3, [r7, #23]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c822:	7dfb      	ldrb	r3, [r7, #23]
 800c824:	e000      	b.n	800c828 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	460b      	mov	r3, r1
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c83e:	7afb      	ldrb	r3, [r7, #11]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d16b      	bne.n	800c91c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3314      	adds	r3, #20
 800c848:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c850:	2b02      	cmp	r3, #2
 800c852:	d156      	bne.n	800c902 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d914      	bls.n	800c88a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	689a      	ldr	r2, [r3, #8]
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	1ad2      	subs	r2, r2, r3
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	461a      	mov	r2, r3
 800c874:	6879      	ldr	r1, [r7, #4]
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f000 ff3a 	bl	800d6f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c87c:	2300      	movs	r3, #0
 800c87e:	2200      	movs	r2, #0
 800c880:	2100      	movs	r1, #0
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f001 fae9 	bl	800de5a <USBD_LL_PrepareReceive>
 800c888:	e03b      	b.n	800c902 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	68da      	ldr	r2, [r3, #12]
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	429a      	cmp	r2, r3
 800c894:	d11c      	bne.n	800c8d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d316      	bcc.n	800c8d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d20f      	bcs.n	800c8d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f000 ff1b 	bl	800d6f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f001 fac6 	bl	800de5a <USBD_LL_PrepareReceive>
 800c8ce:	e018      	b.n	800c902 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d10b      	bne.n	800c8f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d005      	beq.n	800c8f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8f4:	2180      	movs	r1, #128	; 0x80
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f001 fa04 	bl	800dd04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f000 ff2c 	bl	800d75a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d122      	bne.n	800c952 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f7ff fe98 	bl	800c642 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c91a:	e01a      	b.n	800c952 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b03      	cmp	r3, #3
 800c926:	d114      	bne.n	800c952 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00e      	beq.n	800c952 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	7afa      	ldrb	r2, [r7, #11]
 800c93e:	4611      	mov	r1, r2
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	4798      	blx	r3
 800c944:	4603      	mov	r3, r0
 800c946:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c948:	7dfb      	ldrb	r3, [r7, #23]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	e000      	b.n	800c954 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d101      	bne.n	800c990 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e02f      	b.n	800c9f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00f      	beq.n	800c9ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	6852      	ldr	r2, [r2, #4]
 800c9b2:	b2d2      	uxtb	r2, r2
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9ba:	2340      	movs	r3, #64	; 0x40
 800c9bc:	2200      	movs	r2, #0
 800c9be:	2100      	movs	r1, #0
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 f95a 	bl	800dc7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2240      	movs	r2, #64	; 0x40
 800c9d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9d6:	2340      	movs	r3, #64	; 0x40
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2180      	movs	r1, #128	; 0x80
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f001 f94c 	bl	800dc7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2240      	movs	r2, #64	; 0x40
 800c9ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	78fa      	ldrb	r2, [r7, #3]
 800ca08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2204      	movs	r2, #4
 800ca32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b04      	cmp	r3, #4
 800ca56:	d106      	bne.n	800ca66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e012      	b.n	800cab0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d10b      	bne.n	800caae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d005      	beq.n	800caae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cab8:	b480      	push	{r7}
 800caba:	b087      	sub	sp, #28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	3301      	adds	r3, #1
 800cace:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cad6:	8a3b      	ldrh	r3, [r7, #16]
 800cad8:	021b      	lsls	r3, r3, #8
 800cada:	b21a      	sxth	r2, r3
 800cadc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	b21b      	sxth	r3, r3
 800cae4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cae6:	89fb      	ldrh	r3, [r7, #14]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	371c      	adds	r7, #28
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb0a:	2b40      	cmp	r3, #64	; 0x40
 800cb0c:	d005      	beq.n	800cb1a <USBD_StdDevReq+0x26>
 800cb0e:	2b40      	cmp	r3, #64	; 0x40
 800cb10:	d853      	bhi.n	800cbba <USBD_StdDevReq+0xc6>
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00b      	beq.n	800cb2e <USBD_StdDevReq+0x3a>
 800cb16:	2b20      	cmp	r3, #32
 800cb18:	d14f      	bne.n	800cbba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	4798      	blx	r3
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb2c:	e04a      	b.n	800cbc4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	785b      	ldrb	r3, [r3, #1]
 800cb32:	2b09      	cmp	r3, #9
 800cb34:	d83b      	bhi.n	800cbae <USBD_StdDevReq+0xba>
 800cb36:	a201      	add	r2, pc, #4	; (adr r2, 800cb3c <USBD_StdDevReq+0x48>)
 800cb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3c:	0800cb91 	.word	0x0800cb91
 800cb40:	0800cba5 	.word	0x0800cba5
 800cb44:	0800cbaf 	.word	0x0800cbaf
 800cb48:	0800cb9b 	.word	0x0800cb9b
 800cb4c:	0800cbaf 	.word	0x0800cbaf
 800cb50:	0800cb6f 	.word	0x0800cb6f
 800cb54:	0800cb65 	.word	0x0800cb65
 800cb58:	0800cbaf 	.word	0x0800cbaf
 800cb5c:	0800cb87 	.word	0x0800cb87
 800cb60:	0800cb79 	.word	0x0800cb79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f9de 	bl	800cf28 <USBD_GetDescriptor>
          break;
 800cb6c:	e024      	b.n	800cbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cb6e:	6839      	ldr	r1, [r7, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fb6d 	bl	800d250 <USBD_SetAddress>
          break;
 800cb76:	e01f      	b.n	800cbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cb78:	6839      	ldr	r1, [r7, #0]
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fbac 	bl	800d2d8 <USBD_SetConfig>
 800cb80:	4603      	mov	r3, r0
 800cb82:	73fb      	strb	r3, [r7, #15]
          break;
 800cb84:	e018      	b.n	800cbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fc4b 	bl	800d424 <USBD_GetConfig>
          break;
 800cb8e:	e013      	b.n	800cbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fc7c 	bl	800d490 <USBD_GetStatus>
          break;
 800cb98:	e00e      	b.n	800cbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 fcab 	bl	800d4f8 <USBD_SetFeature>
          break;
 800cba2:	e009      	b.n	800cbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fcba 	bl	800d520 <USBD_ClrFeature>
          break;
 800cbac:	e004      	b.n	800cbb8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fd11 	bl	800d5d8 <USBD_CtlError>
          break;
 800cbb6:	bf00      	nop
      }
      break;
 800cbb8:	e004      	b.n	800cbc4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 fd0b 	bl	800d5d8 <USBD_CtlError>
      break;
 800cbc2:	bf00      	nop
  }

  return ret;
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop

0800cbd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbe6:	2b40      	cmp	r3, #64	; 0x40
 800cbe8:	d005      	beq.n	800cbf6 <USBD_StdItfReq+0x26>
 800cbea:	2b40      	cmp	r3, #64	; 0x40
 800cbec:	d82f      	bhi.n	800cc4e <USBD_StdItfReq+0x7e>
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <USBD_StdItfReq+0x26>
 800cbf2:	2b20      	cmp	r3, #32
 800cbf4:	d12b      	bne.n	800cc4e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d81d      	bhi.n	800cc40 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	889b      	ldrh	r3, [r3, #4]
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d813      	bhi.n	800cc36 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	4798      	blx	r3
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	88db      	ldrh	r3, [r3, #6]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d110      	bne.n	800cc4a <USBD_StdItfReq+0x7a>
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10d      	bne.n	800cc4a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fd80 	bl	800d734 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc34:	e009      	b.n	800cc4a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fccd 	bl	800d5d8 <USBD_CtlError>
          break;
 800cc3e:	e004      	b.n	800cc4a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fcc8 	bl	800d5d8 <USBD_CtlError>
          break;
 800cc48:	e000      	b.n	800cc4c <USBD_StdItfReq+0x7c>
          break;
 800cc4a:	bf00      	nop
      }
      break;
 800cc4c:	e004      	b.n	800cc58 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fcc1 	bl	800d5d8 <USBD_CtlError>
      break;
 800cc56:	bf00      	nop
  }

  return ret;
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	889b      	ldrh	r3, [r3, #4]
 800cc74:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc7e:	2b40      	cmp	r3, #64	; 0x40
 800cc80:	d007      	beq.n	800cc92 <USBD_StdEPReq+0x30>
 800cc82:	2b40      	cmp	r3, #64	; 0x40
 800cc84:	f200 8145 	bhi.w	800cf12 <USBD_StdEPReq+0x2b0>
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00c      	beq.n	800cca6 <USBD_StdEPReq+0x44>
 800cc8c:	2b20      	cmp	r3, #32
 800cc8e:	f040 8140 	bne.w	800cf12 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3
 800cca0:	4603      	mov	r3, r0
 800cca2:	73fb      	strb	r3, [r7, #15]
      break;
 800cca4:	e13a      	b.n	800cf1c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	785b      	ldrb	r3, [r3, #1]
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	d007      	beq.n	800ccbe <USBD_StdEPReq+0x5c>
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	f300 8129 	bgt.w	800cf06 <USBD_StdEPReq+0x2a4>
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d07f      	beq.n	800cdb8 <USBD_StdEPReq+0x156>
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d03c      	beq.n	800cd36 <USBD_StdEPReq+0xd4>
 800ccbc:	e123      	b.n	800cf06 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d002      	beq.n	800ccd0 <USBD_StdEPReq+0x6e>
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d016      	beq.n	800ccfc <USBD_StdEPReq+0x9a>
 800ccce:	e02c      	b.n	800cd2a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccd0:	7bbb      	ldrb	r3, [r7, #14]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00d      	beq.n	800ccf2 <USBD_StdEPReq+0x90>
 800ccd6:	7bbb      	ldrb	r3, [r7, #14]
 800ccd8:	2b80      	cmp	r3, #128	; 0x80
 800ccda:	d00a      	beq.n	800ccf2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f001 f80f 	bl	800dd04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cce6:	2180      	movs	r1, #128	; 0x80
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 f80b 	bl	800dd04 <USBD_LL_StallEP>
 800ccee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ccf0:	e020      	b.n	800cd34 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ccf2:	6839      	ldr	r1, [r7, #0]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fc6f 	bl	800d5d8 <USBD_CtlError>
              break;
 800ccfa:	e01b      	b.n	800cd34 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	885b      	ldrh	r3, [r3, #2]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10e      	bne.n	800cd22 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd04:	7bbb      	ldrb	r3, [r7, #14]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00b      	beq.n	800cd22 <USBD_StdEPReq+0xc0>
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
 800cd0c:	2b80      	cmp	r3, #128	; 0x80
 800cd0e:	d008      	beq.n	800cd22 <USBD_StdEPReq+0xc0>
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	88db      	ldrh	r3, [r3, #6]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d104      	bne.n	800cd22 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fff1 	bl	800dd04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fd06 	bl	800d734 <USBD_CtlSendStatus>

              break;
 800cd28:	e004      	b.n	800cd34 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fc53 	bl	800d5d8 <USBD_CtlError>
              break;
 800cd32:	bf00      	nop
          }
          break;
 800cd34:	e0ec      	b.n	800cf10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d002      	beq.n	800cd48 <USBD_StdEPReq+0xe6>
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d016      	beq.n	800cd74 <USBD_StdEPReq+0x112>
 800cd46:	e030      	b.n	800cdaa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00d      	beq.n	800cd6a <USBD_StdEPReq+0x108>
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
 800cd50:	2b80      	cmp	r3, #128	; 0x80
 800cd52:	d00a      	beq.n	800cd6a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
 800cd56:	4619      	mov	r1, r3
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 ffd3 	bl	800dd04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd5e:	2180      	movs	r1, #128	; 0x80
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 ffcf 	bl	800dd04 <USBD_LL_StallEP>
 800cd66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd68:	e025      	b.n	800cdb6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 fc33 	bl	800d5d8 <USBD_CtlError>
              break;
 800cd72:	e020      	b.n	800cdb6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	885b      	ldrh	r3, [r3, #2]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d11b      	bne.n	800cdb4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d004      	beq.n	800cd90 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd86:	7bbb      	ldrb	r3, [r7, #14]
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 ffd9 	bl	800dd42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fccf 	bl	800d734 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	4798      	blx	r3
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cda8:	e004      	b.n	800cdb4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fc13 	bl	800d5d8 <USBD_CtlError>
              break;
 800cdb2:	e000      	b.n	800cdb6 <USBD_StdEPReq+0x154>
              break;
 800cdb4:	bf00      	nop
          }
          break;
 800cdb6:	e0ab      	b.n	800cf10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d002      	beq.n	800cdca <USBD_StdEPReq+0x168>
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d032      	beq.n	800ce2e <USBD_StdEPReq+0x1cc>
 800cdc8:	e097      	b.n	800cefa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d007      	beq.n	800cde0 <USBD_StdEPReq+0x17e>
 800cdd0:	7bbb      	ldrb	r3, [r7, #14]
 800cdd2:	2b80      	cmp	r3, #128	; 0x80
 800cdd4:	d004      	beq.n	800cde0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fbfd 	bl	800d5d8 <USBD_CtlError>
                break;
 800cdde:	e091      	b.n	800cf04 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cde0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	da0b      	bge.n	800ce00 <USBD_StdEPReq+0x19e>
 800cde8:	7bbb      	ldrb	r3, [r7, #14]
 800cdea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	3310      	adds	r3, #16
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	e00b      	b.n	800ce18 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce06:	4613      	mov	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4413      	add	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	4413      	add	r3, r2
 800ce16:	3304      	adds	r3, #4
 800ce18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	2202      	movs	r2, #2
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fc47 	bl	800d6ba <USBD_CtlSendData>
              break;
 800ce2c:	e06a      	b.n	800cf04 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ce2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	da11      	bge.n	800ce5a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	f003 020f 	and.w	r2, r3, #15
 800ce3c:	6879      	ldr	r1, [r7, #4]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	440b      	add	r3, r1
 800ce48:	3324      	adds	r3, #36	; 0x24
 800ce4a:	881b      	ldrh	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d117      	bne.n	800ce80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fbc0 	bl	800d5d8 <USBD_CtlError>
                  break;
 800ce58:	e054      	b.n	800cf04 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce5a:	7bbb      	ldrb	r3, [r7, #14]
 800ce5c:	f003 020f 	and.w	r2, r3, #15
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d104      	bne.n	800ce80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fbad 	bl	800d5d8 <USBD_CtlError>
                  break;
 800ce7e:	e041      	b.n	800cf04 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	da0b      	bge.n	800cea0 <USBD_StdEPReq+0x23e>
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce8e:	4613      	mov	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	3310      	adds	r3, #16
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	e00b      	b.n	800ceb8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
 800cea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cea6:	4613      	mov	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	3304      	adds	r3, #4
 800ceb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ceba:	7bbb      	ldrb	r3, [r7, #14]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <USBD_StdEPReq+0x264>
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b80      	cmp	r3, #128	; 0x80
 800cec4:	d103      	bne.n	800cece <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	e00e      	b.n	800ceec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cece:	7bbb      	ldrb	r3, [r7, #14]
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 ff54 	bl	800dd80 <USBD_LL_IsStallEP>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d003      	beq.n	800cee6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	2201      	movs	r2, #1
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	e002      	b.n	800ceec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	2200      	movs	r2, #0
 800ceea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2202      	movs	r2, #2
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fbe1 	bl	800d6ba <USBD_CtlSendData>
              break;
 800cef8:	e004      	b.n	800cf04 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cefa:	6839      	ldr	r1, [r7, #0]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fb6b 	bl	800d5d8 <USBD_CtlError>
              break;
 800cf02:	bf00      	nop
          }
          break;
 800cf04:	e004      	b.n	800cf10 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fb65 	bl	800d5d8 <USBD_CtlError>
          break;
 800cf0e:	bf00      	nop
      }
      break;
 800cf10:	e004      	b.n	800cf1c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fb5f 	bl	800d5d8 <USBD_CtlError>
      break;
 800cf1a:	bf00      	nop
  }

  return ret;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	885b      	ldrh	r3, [r3, #2]
 800cf42:	0a1b      	lsrs	r3, r3, #8
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	3b01      	subs	r3, #1
 800cf48:	2b0e      	cmp	r3, #14
 800cf4a:	f200 8152 	bhi.w	800d1f2 <USBD_GetDescriptor+0x2ca>
 800cf4e:	a201      	add	r2, pc, #4	; (adr r2, 800cf54 <USBD_GetDescriptor+0x2c>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cfc5 	.word	0x0800cfc5
 800cf58:	0800cfdd 	.word	0x0800cfdd
 800cf5c:	0800d01d 	.word	0x0800d01d
 800cf60:	0800d1f3 	.word	0x0800d1f3
 800cf64:	0800d1f3 	.word	0x0800d1f3
 800cf68:	0800d193 	.word	0x0800d193
 800cf6c:	0800d1bf 	.word	0x0800d1bf
 800cf70:	0800d1f3 	.word	0x0800d1f3
 800cf74:	0800d1f3 	.word	0x0800d1f3
 800cf78:	0800d1f3 	.word	0x0800d1f3
 800cf7c:	0800d1f3 	.word	0x0800d1f3
 800cf80:	0800d1f3 	.word	0x0800d1f3
 800cf84:	0800d1f3 	.word	0x0800d1f3
 800cf88:	0800d1f3 	.word	0x0800d1f3
 800cf8c:	0800cf91 	.word	0x0800cf91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf96:	69db      	ldr	r3, [r3, #28]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00b      	beq.n	800cfb4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	7c12      	ldrb	r2, [r2, #16]
 800cfa8:	f107 0108 	add.w	r1, r7, #8
 800cfac:	4610      	mov	r0, r2
 800cfae:	4798      	blx	r3
 800cfb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfb2:	e126      	b.n	800d202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fb0e 	bl	800d5d8 <USBD_CtlError>
        err++;
 800cfbc:	7afb      	ldrb	r3, [r7, #11]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	72fb      	strb	r3, [r7, #11]
      break;
 800cfc2:	e11e      	b.n	800d202 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	7c12      	ldrb	r2, [r2, #16]
 800cfd0:	f107 0108 	add.w	r1, r7, #8
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	4798      	blx	r3
 800cfd8:	60f8      	str	r0, [r7, #12]
      break;
 800cfda:	e112      	b.n	800d202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	7c1b      	ldrb	r3, [r3, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10d      	bne.n	800d000 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfec:	f107 0208 	add.w	r2, r7, #8
 800cff0:	4610      	mov	r0, r2
 800cff2:	4798      	blx	r3
 800cff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3301      	adds	r3, #1
 800cffa:	2202      	movs	r2, #2
 800cffc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cffe:	e100      	b.n	800d202 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	f107 0208 	add.w	r2, r7, #8
 800d00c:	4610      	mov	r0, r2
 800d00e:	4798      	blx	r3
 800d010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	3301      	adds	r3, #1
 800d016:	2202      	movs	r2, #2
 800d018:	701a      	strb	r2, [r3, #0]
      break;
 800d01a:	e0f2      	b.n	800d202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	885b      	ldrh	r3, [r3, #2]
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b05      	cmp	r3, #5
 800d024:	f200 80ac 	bhi.w	800d180 <USBD_GetDescriptor+0x258>
 800d028:	a201      	add	r2, pc, #4	; (adr r2, 800d030 <USBD_GetDescriptor+0x108>)
 800d02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02e:	bf00      	nop
 800d030:	0800d049 	.word	0x0800d049
 800d034:	0800d07d 	.word	0x0800d07d
 800d038:	0800d0b1 	.word	0x0800d0b1
 800d03c:	0800d0e5 	.word	0x0800d0e5
 800d040:	0800d119 	.word	0x0800d119
 800d044:	0800d14d 	.word	0x0800d14d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00b      	beq.n	800d06c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	7c12      	ldrb	r2, [r2, #16]
 800d060:	f107 0108 	add.w	r1, r7, #8
 800d064:	4610      	mov	r0, r2
 800d066:	4798      	blx	r3
 800d068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d06a:	e091      	b.n	800d190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 fab2 	bl	800d5d8 <USBD_CtlError>
            err++;
 800d074:	7afb      	ldrb	r3, [r7, #11]
 800d076:	3301      	adds	r3, #1
 800d078:	72fb      	strb	r3, [r7, #11]
          break;
 800d07a:	e089      	b.n	800d190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00b      	beq.n	800d0a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	7c12      	ldrb	r2, [r2, #16]
 800d094:	f107 0108 	add.w	r1, r7, #8
 800d098:	4610      	mov	r0, r2
 800d09a:	4798      	blx	r3
 800d09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d09e:	e077      	b.n	800d190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fa98 	bl	800d5d8 <USBD_CtlError>
            err++;
 800d0a8:	7afb      	ldrb	r3, [r7, #11]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ae:	e06f      	b.n	800d190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00b      	beq.n	800d0d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	7c12      	ldrb	r2, [r2, #16]
 800d0c8:	f107 0108 	add.w	r1, r7, #8
 800d0cc:	4610      	mov	r0, r2
 800d0ce:	4798      	blx	r3
 800d0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0d2:	e05d      	b.n	800d190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fa7e 	bl	800d5d8 <USBD_CtlError>
            err++;
 800d0dc:	7afb      	ldrb	r3, [r7, #11]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d0e2:	e055      	b.n	800d190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0f6:	691b      	ldr	r3, [r3, #16]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	7c12      	ldrb	r2, [r2, #16]
 800d0fc:	f107 0108 	add.w	r1, r7, #8
 800d100:	4610      	mov	r0, r2
 800d102:	4798      	blx	r3
 800d104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d106:	e043      	b.n	800d190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fa64 	bl	800d5d8 <USBD_CtlError>
            err++;
 800d110:	7afb      	ldrb	r3, [r7, #11]
 800d112:	3301      	adds	r3, #1
 800d114:	72fb      	strb	r3, [r7, #11]
          break;
 800d116:	e03b      	b.n	800d190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	7c12      	ldrb	r2, [r2, #16]
 800d130:	f107 0108 	add.w	r1, r7, #8
 800d134:	4610      	mov	r0, r2
 800d136:	4798      	blx	r3
 800d138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d13a:	e029      	b.n	800d190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fa4a 	bl	800d5d8 <USBD_CtlError>
            err++;
 800d144:	7afb      	ldrb	r3, [r7, #11]
 800d146:	3301      	adds	r3, #1
 800d148:	72fb      	strb	r3, [r7, #11]
          break;
 800d14a:	e021      	b.n	800d190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00b      	beq.n	800d170 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	7c12      	ldrb	r2, [r2, #16]
 800d164:	f107 0108 	add.w	r1, r7, #8
 800d168:	4610      	mov	r0, r2
 800d16a:	4798      	blx	r3
 800d16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d16e:	e00f      	b.n	800d190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fa30 	bl	800d5d8 <USBD_CtlError>
            err++;
 800d178:	7afb      	ldrb	r3, [r7, #11]
 800d17a:	3301      	adds	r3, #1
 800d17c:	72fb      	strb	r3, [r7, #11]
          break;
 800d17e:	e007      	b.n	800d190 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa28 	bl	800d5d8 <USBD_CtlError>
          err++;
 800d188:	7afb      	ldrb	r3, [r7, #11]
 800d18a:	3301      	adds	r3, #1
 800d18c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d18e:	bf00      	nop
      }
      break;
 800d190:	e037      	b.n	800d202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7c1b      	ldrb	r3, [r3, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d109      	bne.n	800d1ae <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a2:	f107 0208 	add.w	r2, r7, #8
 800d1a6:	4610      	mov	r0, r2
 800d1a8:	4798      	blx	r3
 800d1aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1ac:	e029      	b.n	800d202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 fa11 	bl	800d5d8 <USBD_CtlError>
        err++;
 800d1b6:	7afb      	ldrb	r3, [r7, #11]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d1bc:	e021      	b.n	800d202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	7c1b      	ldrb	r3, [r3, #16]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10d      	bne.n	800d1e2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ce:	f107 0208 	add.w	r2, r7, #8
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	4798      	blx	r3
 800d1d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	2207      	movs	r2, #7
 800d1de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1e0:	e00f      	b.n	800d202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d1e2:	6839      	ldr	r1, [r7, #0]
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f9f7 	bl	800d5d8 <USBD_CtlError>
        err++;
 800d1ea:	7afb      	ldrb	r3, [r7, #11]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800d1f0:	e007      	b.n	800d202 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f9ef 	bl	800d5d8 <USBD_CtlError>
      err++;
 800d1fa:	7afb      	ldrb	r3, [r7, #11]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d200:	bf00      	nop
  }

  if (err != 0U)
 800d202:	7afb      	ldrb	r3, [r7, #11]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d11e      	bne.n	800d246 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	88db      	ldrh	r3, [r3, #6]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d016      	beq.n	800d23e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d210:	893b      	ldrh	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00e      	beq.n	800d234 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	88da      	ldrh	r2, [r3, #6]
 800d21a:	893b      	ldrh	r3, [r7, #8]
 800d21c:	4293      	cmp	r3, r2
 800d21e:	bf28      	it	cs
 800d220:	4613      	movcs	r3, r2
 800d222:	b29b      	uxth	r3, r3
 800d224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d226:	893b      	ldrh	r3, [r7, #8]
 800d228:	461a      	mov	r2, r3
 800d22a:	68f9      	ldr	r1, [r7, #12]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fa44 	bl	800d6ba <USBD_CtlSendData>
 800d232:	e009      	b.n	800d248 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f9ce 	bl	800d5d8 <USBD_CtlError>
 800d23c:	e004      	b.n	800d248 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fa78 	bl	800d734 <USBD_CtlSendStatus>
 800d244:	e000      	b.n	800d248 <USBD_GetDescriptor+0x320>
    return;
 800d246:	bf00      	nop
  }
}
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop

0800d250 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	889b      	ldrh	r3, [r3, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d131      	bne.n	800d2c6 <USBD_SetAddress+0x76>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	88db      	ldrh	r3, [r3, #6]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d12d      	bne.n	800d2c6 <USBD_SetAddress+0x76>
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	885b      	ldrh	r3, [r3, #2]
 800d26e:	2b7f      	cmp	r3, #127	; 0x7f
 800d270:	d829      	bhi.n	800d2c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	885b      	ldrh	r3, [r3, #2]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b03      	cmp	r3, #3
 800d288:	d104      	bne.n	800d294 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f9a3 	bl	800d5d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d292:	e01d      	b.n	800d2d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	7bfa      	ldrb	r2, [r7, #15]
 800d298:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fd9a 	bl	800ddda <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fa44 	bl	800d734 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d004      	beq.n	800d2bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ba:	e009      	b.n	800d2d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2c4:	e004      	b.n	800d2d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d2c6:	6839      	ldr	r1, [r7, #0]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f985 	bl	800d5d8 <USBD_CtlError>
  }
}
 800d2ce:	bf00      	nop
 800d2d0:	bf00      	nop
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	885b      	ldrh	r3, [r3, #2]
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	4b4c      	ldr	r3, [pc, #304]	; (800d420 <USBD_SetConfig+0x148>)
 800d2ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2f0:	4b4b      	ldr	r3, [pc, #300]	; (800d420 <USBD_SetConfig+0x148>)
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d905      	bls.n	800d304 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f96c 	bl	800d5d8 <USBD_CtlError>
    return USBD_FAIL;
 800d300:	2303      	movs	r3, #3
 800d302:	e088      	b.n	800d416 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d002      	beq.n	800d316 <USBD_SetConfig+0x3e>
 800d310:	2b03      	cmp	r3, #3
 800d312:	d025      	beq.n	800d360 <USBD_SetConfig+0x88>
 800d314:	e071      	b.n	800d3fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d316:	4b42      	ldr	r3, [pc, #264]	; (800d420 <USBD_SetConfig+0x148>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d01c      	beq.n	800d358 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d31e:	4b40      	ldr	r3, [pc, #256]	; (800d420 <USBD_SetConfig+0x148>)
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	461a      	mov	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d328:	4b3d      	ldr	r3, [pc, #244]	; (800d420 <USBD_SetConfig+0x148>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7ff f992 	bl	800c658 <USBD_SetClassConfig>
 800d334:	4603      	mov	r3, r0
 800d336:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d004      	beq.n	800d348 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f949 	bl	800d5d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d346:	e065      	b.n	800d414 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 f9f3 	bl	800d734 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2203      	movs	r2, #3
 800d352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d356:	e05d      	b.n	800d414 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 f9eb 	bl	800d734 <USBD_CtlSendStatus>
      break;
 800d35e:	e059      	b.n	800d414 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d360:	4b2f      	ldr	r3, [pc, #188]	; (800d420 <USBD_SetConfig+0x148>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d112      	bne.n	800d38e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2202      	movs	r2, #2
 800d36c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d370:	4b2b      	ldr	r3, [pc, #172]	; (800d420 <USBD_SetConfig+0x148>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d37a:	4b29      	ldr	r3, [pc, #164]	; (800d420 <USBD_SetConfig+0x148>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff f985 	bl	800c690 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f9d4 	bl	800d734 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d38c:	e042      	b.n	800d414 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d38e:	4b24      	ldr	r3, [pc, #144]	; (800d420 <USBD_SetConfig+0x148>)
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	461a      	mov	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d02a      	beq.n	800d3f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff f973 	bl	800c690 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d3aa:	4b1d      	ldr	r3, [pc, #116]	; (800d420 <USBD_SetConfig+0x148>)
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3b4:	4b1a      	ldr	r3, [pc, #104]	; (800d420 <USBD_SetConfig+0x148>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7ff f94c 	bl	800c658 <USBD_SetClassConfig>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00f      	beq.n	800d3ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f903 	bl	800d5d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7ff f958 	bl	800c690 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2202      	movs	r2, #2
 800d3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3e8:	e014      	b.n	800d414 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f9a2 	bl	800d734 <USBD_CtlSendStatus>
      break;
 800d3f0:	e010      	b.n	800d414 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f99e 	bl	800d734 <USBD_CtlSendStatus>
      break;
 800d3f8:	e00c      	b.n	800d414 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f8eb 	bl	800d5d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d402:	4b07      	ldr	r3, [pc, #28]	; (800d420 <USBD_SetConfig+0x148>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	4619      	mov	r1, r3
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7ff f941 	bl	800c690 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d40e:	2303      	movs	r3, #3
 800d410:	73fb      	strb	r3, [r7, #15]
      break;
 800d412:	bf00      	nop
  }

  return ret;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	200047f4 	.word	0x200047f4

0800d424 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	88db      	ldrh	r3, [r3, #6]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d004      	beq.n	800d440 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f8cd 	bl	800d5d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d43e:	e023      	b.n	800d488 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b02      	cmp	r3, #2
 800d44a:	dc02      	bgt.n	800d452 <USBD_GetConfig+0x2e>
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	dc03      	bgt.n	800d458 <USBD_GetConfig+0x34>
 800d450:	e015      	b.n	800d47e <USBD_GetConfig+0x5a>
 800d452:	2b03      	cmp	r3, #3
 800d454:	d00b      	beq.n	800d46e <USBD_GetConfig+0x4a>
 800d456:	e012      	b.n	800d47e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	3308      	adds	r3, #8
 800d462:	2201      	movs	r2, #1
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 f927 	bl	800d6ba <USBD_CtlSendData>
        break;
 800d46c:	e00c      	b.n	800d488 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	3304      	adds	r3, #4
 800d472:	2201      	movs	r2, #1
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f91f 	bl	800d6ba <USBD_CtlSendData>
        break;
 800d47c:	e004      	b.n	800d488 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f8a9 	bl	800d5d8 <USBD_CtlError>
        break;
 800d486:	bf00      	nop
}
 800d488:	bf00      	nop
 800d48a:	3708      	adds	r7, #8
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d81e      	bhi.n	800d4e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	88db      	ldrh	r3, [r3, #6]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d004      	beq.n	800d4ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d4b0:	6839      	ldr	r1, [r7, #0]
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f890 	bl	800d5d8 <USBD_CtlError>
        break;
 800d4b8:	e01a      	b.n	800d4f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	f043 0202 	orr.w	r2, r3, #2
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	330c      	adds	r3, #12
 800d4da:	2202      	movs	r2, #2
 800d4dc:	4619      	mov	r1, r3
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f8eb 	bl	800d6ba <USBD_CtlSendData>
      break;
 800d4e4:	e004      	b.n	800d4f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d4e6:	6839      	ldr	r1, [r7, #0]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 f875 	bl	800d5d8 <USBD_CtlError>
      break;
 800d4ee:	bf00      	nop
  }
}
 800d4f0:	bf00      	nop
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	885b      	ldrh	r3, [r3, #2]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d106      	bne.n	800d518 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f90e 	bl	800d734 <USBD_CtlSendStatus>
  }
}
 800d518:	bf00      	nop
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d530:	b2db      	uxtb	r3, r3
 800d532:	3b01      	subs	r3, #1
 800d534:	2b02      	cmp	r3, #2
 800d536:	d80b      	bhi.n	800d550 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	885b      	ldrh	r3, [r3, #2]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d10c      	bne.n	800d55a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 f8f3 	bl	800d734 <USBD_CtlSendStatus>
      }
      break;
 800d54e:	e004      	b.n	800d55a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f840 	bl	800d5d8 <USBD_CtlError>
      break;
 800d558:	e000      	b.n	800d55c <USBD_ClrFeature+0x3c>
      break;
 800d55a:	bf00      	nop
  }
}
 800d55c:	bf00      	nop
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	781a      	ldrb	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	3301      	adds	r3, #1
 800d57e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	781a      	ldrb	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3301      	adds	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f7ff fa92 	bl	800cab8 <SWAPBYTE>
 800d594:	4603      	mov	r3, r0
 800d596:	461a      	mov	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7ff fa85 	bl	800cab8 <SWAPBYTE>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f7ff fa78 	bl	800cab8 <SWAPBYTE>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	80da      	strh	r2, [r3, #6]
}
 800d5d0:	bf00      	nop
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5e2:	2180      	movs	r1, #128	; 0x80
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fb8d 	bl	800dd04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fb89 	bl	800dd04 <USBD_LL_StallEP>
}
 800d5f2:	bf00      	nop
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b086      	sub	sp, #24
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	60f8      	str	r0, [r7, #12]
 800d602:	60b9      	str	r1, [r7, #8]
 800d604:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d036      	beq.n	800d67e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d614:	6938      	ldr	r0, [r7, #16]
 800d616:	f000 f836 	bl	800d686 <USBD_GetLen>
 800d61a:	4603      	mov	r3, r0
 800d61c:	3301      	adds	r3, #1
 800d61e:	b29b      	uxth	r3, r3
 800d620:	005b      	lsls	r3, r3, #1
 800d622:	b29a      	uxth	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d628:	7dfb      	ldrb	r3, [r7, #23]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	4413      	add	r3, r2
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	7812      	ldrb	r2, [r2, #0]
 800d632:	701a      	strb	r2, [r3, #0]
  idx++;
 800d634:	7dfb      	ldrb	r3, [r7, #23]
 800d636:	3301      	adds	r3, #1
 800d638:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d63a:	7dfb      	ldrb	r3, [r7, #23]
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	4413      	add	r3, r2
 800d640:	2203      	movs	r2, #3
 800d642:	701a      	strb	r2, [r3, #0]
  idx++;
 800d644:	7dfb      	ldrb	r3, [r7, #23]
 800d646:	3301      	adds	r3, #1
 800d648:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d64a:	e013      	b.n	800d674 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d64c:	7dfb      	ldrb	r3, [r7, #23]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	4413      	add	r3, r2
 800d652:	693a      	ldr	r2, [r7, #16]
 800d654:	7812      	ldrb	r2, [r2, #0]
 800d656:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	3301      	adds	r3, #1
 800d65c:	613b      	str	r3, [r7, #16]
    idx++;
 800d65e:	7dfb      	ldrb	r3, [r7, #23]
 800d660:	3301      	adds	r3, #1
 800d662:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d664:	7dfb      	ldrb	r3, [r7, #23]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	4413      	add	r3, r2
 800d66a:	2200      	movs	r2, #0
 800d66c:	701a      	strb	r2, [r3, #0]
    idx++;
 800d66e:	7dfb      	ldrb	r3, [r7, #23]
 800d670:	3301      	adds	r3, #1
 800d672:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1e7      	bne.n	800d64c <USBD_GetString+0x52>
 800d67c:	e000      	b.n	800d680 <USBD_GetString+0x86>
    return;
 800d67e:	bf00      	nop
  }
}
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d686:	b480      	push	{r7}
 800d688:	b085      	sub	sp, #20
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d68e:	2300      	movs	r3, #0
 800d690:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d696:	e005      	b.n	800d6a4 <USBD_GetLen+0x1e>
  {
    len++;
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	3301      	adds	r3, #1
 800d69c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1f5      	bne.n	800d698 <USBD_GetLen+0x12>
  }

  return len;
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b084      	sub	sp, #16
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	60f8      	str	r0, [r7, #12]
 800d6c2:	60b9      	str	r1, [r7, #8]
 800d6c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	2100      	movs	r1, #0
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 fb99 	bl	800de18 <USBD_LL_Transmit>

  return USBD_OK;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	2100      	movs	r1, #0
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f000 fb88 	bl	800de18 <USBD_LL_Transmit>

  return USBD_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	60b9      	str	r1, [r7, #8]
 800d71c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	2100      	movs	r1, #0
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f000 fb98 	bl	800de5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2204      	movs	r2, #4
 800d740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d744:	2300      	movs	r3, #0
 800d746:	2200      	movs	r2, #0
 800d748:	2100      	movs	r1, #0
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fb64 	bl	800de18 <USBD_LL_Transmit>

  return USBD_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b082      	sub	sp, #8
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2205      	movs	r2, #5
 800d766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d76a:	2300      	movs	r3, #0
 800d76c:	2200      	movs	r2, #0
 800d76e:	2100      	movs	r1, #0
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fb72 	bl	800de5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800d784:	2200      	movs	r2, #0
 800d786:	490e      	ldr	r1, [pc, #56]	; (800d7c0 <MX_USB_Device_Init+0x40>)
 800d788:	480e      	ldr	r0, [pc, #56]	; (800d7c4 <MX_USB_Device_Init+0x44>)
 800d78a:	f7fe fef7 	bl	800c57c <USBD_Init>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d794:	f7f5 fd06 	bl	80031a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800d798:	490b      	ldr	r1, [pc, #44]	; (800d7c8 <MX_USB_Device_Init+0x48>)
 800d79a:	480a      	ldr	r0, [pc, #40]	; (800d7c4 <MX_USB_Device_Init+0x44>)
 800d79c:	f7fe ff1e 	bl	800c5dc <USBD_RegisterClass>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d7a6:	f7f5 fcfd 	bl	80031a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d7aa:	4806      	ldr	r0, [pc, #24]	; (800d7c4 <MX_USB_Device_Init+0x44>)
 800d7ac:	f7fe ff3d 	bl	800c62a <USBD_Start>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800d7b6:	f7f5 fcf5 	bl	80031a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d7ba:	bf00      	nop
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	20000148 	.word	0x20000148
 800d7c4:	200047f8 	.word	0x200047f8
 800d7c8:	20000040 	.word	0x20000040

0800d7cc <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	6039      	str	r1, [r7, #0]
 800d7d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2212      	movs	r2, #18
 800d7dc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800d7de:	4b03      	ldr	r3, [pc, #12]	; (800d7ec <USBD_HID_DeviceDescriptor+0x20>)
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	20000168 	.word	0x20000168

0800d7f0 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	6039      	str	r1, [r7, #0]
 800d7fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	2204      	movs	r2, #4
 800d800:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d802:	4b03      	ldr	r3, [pc, #12]	; (800d810 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800d804:	4618      	mov	r0, r3
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr
 800d810:	2000017c 	.word	0x2000017c

0800d814 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	6039      	str	r1, [r7, #0]
 800d81e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d105      	bne.n	800d832 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	4907      	ldr	r1, [pc, #28]	; (800d848 <USBD_HID_ProductStrDescriptor+0x34>)
 800d82a:	4808      	ldr	r0, [pc, #32]	; (800d84c <USBD_HID_ProductStrDescriptor+0x38>)
 800d82c:	f7ff fee5 	bl	800d5fa <USBD_GetString>
 800d830:	e004      	b.n	800d83c <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	4904      	ldr	r1, [pc, #16]	; (800d848 <USBD_HID_ProductStrDescriptor+0x34>)
 800d836:	4805      	ldr	r0, [pc, #20]	; (800d84c <USBD_HID_ProductStrDescriptor+0x38>)
 800d838:	f7ff fedf 	bl	800d5fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800d83c:	4b02      	ldr	r3, [pc, #8]	; (800d848 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20004ac8 	.word	0x20004ac8
 800d84c:	0800e928 	.word	0x0800e928

0800d850 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	4603      	mov	r3, r0
 800d858:	6039      	str	r1, [r7, #0]
 800d85a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d85c:	683a      	ldr	r2, [r7, #0]
 800d85e:	4904      	ldr	r1, [pc, #16]	; (800d870 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800d860:	4804      	ldr	r0, [pc, #16]	; (800d874 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800d862:	f7ff feca 	bl	800d5fa <USBD_GetString>
  return USBD_StrDesc;
 800d866:	4b02      	ldr	r3, [pc, #8]	; (800d870 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20004ac8 	.word	0x20004ac8
 800d874:	0800e928 	.word	0x0800e928

0800d878 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	4603      	mov	r3, r0
 800d880:	6039      	str	r1, [r7, #0]
 800d882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	221a      	movs	r2, #26
 800d888:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d88a:	f000 f843 	bl	800d914 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d88e:	4b02      	ldr	r3, [pc, #8]	; (800d898 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800d890:	4618      	mov	r0, r3
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20000180 	.word	0x20000180

0800d89c <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	6039      	str	r1, [r7, #0]
 800d8a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d8a8:	79fb      	ldrb	r3, [r7, #7]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d105      	bne.n	800d8ba <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	4907      	ldr	r1, [pc, #28]	; (800d8d0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800d8b2:	4808      	ldr	r0, [pc, #32]	; (800d8d4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800d8b4:	f7ff fea1 	bl	800d5fa <USBD_GetString>
 800d8b8:	e004      	b.n	800d8c4 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	4904      	ldr	r1, [pc, #16]	; (800d8d0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800d8be:	4805      	ldr	r0, [pc, #20]	; (800d8d4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800d8c0:	f7ff fe9b 	bl	800d5fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8c4:	4b02      	ldr	r3, [pc, #8]	; (800d8d0 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	20004ac8 	.word	0x20004ac8
 800d8d4:	0800e938 	.word	0x0800e938

0800d8d8 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	6039      	str	r1, [r7, #0]
 800d8e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d105      	bne.n	800d8f6 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	4907      	ldr	r1, [pc, #28]	; (800d90c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800d8ee:	4808      	ldr	r0, [pc, #32]	; (800d910 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800d8f0:	f7ff fe83 	bl	800d5fa <USBD_GetString>
 800d8f4:	e004      	b.n	800d900 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	4904      	ldr	r1, [pc, #16]	; (800d90c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800d8fa:	4805      	ldr	r0, [pc, #20]	; (800d910 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800d8fc:	f7ff fe7d 	bl	800d5fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800d900:	4b02      	ldr	r3, [pc, #8]	; (800d90c <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	20004ac8 	.word	0x20004ac8
 800d910:	0800e944 	.word	0x0800e944

0800d914 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d91a:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <Get_SerialNum+0x44>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d920:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <Get_SerialNum+0x48>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d926:	4b0e      	ldr	r3, [pc, #56]	; (800d960 <Get_SerialNum+0x4c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4413      	add	r3, r2
 800d932:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d009      	beq.n	800d94e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d93a:	2208      	movs	r2, #8
 800d93c:	4909      	ldr	r1, [pc, #36]	; (800d964 <Get_SerialNum+0x50>)
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f000 f814 	bl	800d96c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d944:	2204      	movs	r2, #4
 800d946:	4908      	ldr	r1, [pc, #32]	; (800d968 <Get_SerialNum+0x54>)
 800d948:	68b8      	ldr	r0, [r7, #8]
 800d94a:	f000 f80f 	bl	800d96c <IntToUnicode>
  }
}
 800d94e:	bf00      	nop
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	1fff7590 	.word	0x1fff7590
 800d95c:	1fff7594 	.word	0x1fff7594
 800d960:	1fff7598 	.word	0x1fff7598
 800d964:	20000182 	.word	0x20000182
 800d968:	20000192 	.word	0x20000192

0800d96c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b087      	sub	sp, #28
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	4613      	mov	r3, r2
 800d978:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d97e:	2300      	movs	r3, #0
 800d980:	75fb      	strb	r3, [r7, #23]
 800d982:	e027      	b.n	800d9d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	0f1b      	lsrs	r3, r3, #28
 800d988:	2b09      	cmp	r3, #9
 800d98a:	d80b      	bhi.n	800d9a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	0f1b      	lsrs	r3, r3, #28
 800d990:	b2da      	uxtb	r2, r3
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	005b      	lsls	r3, r3, #1
 800d996:	4619      	mov	r1, r3
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	440b      	add	r3, r1
 800d99c:	3230      	adds	r2, #48	; 0x30
 800d99e:	b2d2      	uxtb	r2, r2
 800d9a0:	701a      	strb	r2, [r3, #0]
 800d9a2:	e00a      	b.n	800d9ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	0f1b      	lsrs	r3, r3, #28
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	005b      	lsls	r3, r3, #1
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	440b      	add	r3, r1
 800d9b4:	3237      	adds	r2, #55	; 0x37
 800d9b6:	b2d2      	uxtb	r2, r2
 800d9b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	011b      	lsls	r3, r3, #4
 800d9be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d9c0:	7dfb      	ldrb	r3, [r7, #23]
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	75fb      	strb	r3, [r7, #23]
 800d9d4:	7dfa      	ldrb	r2, [r7, #23]
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d3d3      	bcc.n	800d984 <IntToUnicode+0x18>
  }
}
 800d9dc:	bf00      	nop
 800d9de:	bf00      	nop
 800d9e0:	371c      	adds	r7, #28
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
	...

0800d9ec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b098      	sub	sp, #96	; 0x60
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d9f4:	f107 0310 	add.w	r3, r7, #16
 800d9f8:	2250      	movs	r2, #80	; 0x50
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f000 faf7 	bl	800dff0 <memset>
  if(pcdHandle->Instance==USB)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a11      	ldr	r2, [pc, #68]	; (800da4c <HAL_PCD_MspInit+0x60>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d11a      	bne.n	800da42 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800da0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800da12:	2300      	movs	r3, #0
 800da14:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800da16:	f107 0310 	add.w	r3, r7, #16
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7f9 f8b4 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800da26:	f7f5 fbbd 	bl	80031a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800da2a:	4b09      	ldr	r3, [pc, #36]	; (800da50 <HAL_PCD_MspInit+0x64>)
 800da2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da2e:	4a08      	ldr	r2, [pc, #32]	; (800da50 <HAL_PCD_MspInit+0x64>)
 800da30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da34:	6593      	str	r3, [r2, #88]	; 0x58
 800da36:	4b06      	ldr	r3, [pc, #24]	; (800da50 <HAL_PCD_MspInit+0x64>)
 800da38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800da42:	bf00      	nop
 800da44:	3760      	adds	r7, #96	; 0x60
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	40005c00 	.word	0x40005c00
 800da50:	40021000 	.word	0x40021000

0800da54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800da68:	4619      	mov	r1, r3
 800da6a:	4610      	mov	r0, r2
 800da6c:	f7fe fe28 	bl	800c6c0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800da70:	bf00      	nop
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	460b      	mov	r3, r1
 800da82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800da8a:	78fa      	ldrb	r2, [r7, #3]
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	4613      	mov	r3, r2
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4413      	add	r3, r2
 800da94:	00db      	lsls	r3, r3, #3
 800da96:	440b      	add	r3, r1
 800da98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	78fb      	ldrb	r3, [r7, #3]
 800daa0:	4619      	mov	r1, r3
 800daa2:	f7fe fe62 	bl	800c76a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800daa6:	bf00      	nop
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b082      	sub	sp, #8
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800dac0:	78fa      	ldrb	r2, [r7, #3]
 800dac2:	6879      	ldr	r1, [r7, #4]
 800dac4:	4613      	mov	r3, r2
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	333c      	adds	r3, #60	; 0x3c
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	78fb      	ldrb	r3, [r7, #3]
 800dad4:	4619      	mov	r1, r3
 800dad6:	f7fe feab 	bl	800c830 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dada:	bf00      	nop
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b082      	sub	sp, #8
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fe ffbf 	bl	800ca74 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800daf6:	bf00      	nop
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b084      	sub	sp, #16
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db06:	2301      	movs	r3, #1
 800db08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d001      	beq.n	800db16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db12:	f7f5 fb47 	bl	80031a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800db1c:	7bfa      	ldrb	r2, [r7, #15]
 800db1e:	4611      	mov	r1, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe ff69 	bl	800c9f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe ff15 	bl	800c95c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800db32:	bf00      	nop
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
	...

0800db3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe ff64 	bl	800ca18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d005      	beq.n	800db64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db58:	4b04      	ldr	r3, [pc, #16]	; (800db6c <HAL_PCD_SuspendCallback+0x30>)
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	4a03      	ldr	r2, [pc, #12]	; (800db6c <HAL_PCD_SuspendCallback+0x30>)
 800db5e:	f043 0306 	orr.w	r3, r3, #6
 800db62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800db64:	bf00      	nop
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	e000ed00 	.word	0xe000ed00

0800db70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	699b      	ldr	r3, [r3, #24]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d007      	beq.n	800db90 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db80:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <HAL_PCD_ResumeCallback+0x34>)
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	4a07      	ldr	r2, [pc, #28]	; (800dba4 <HAL_PCD_ResumeCallback+0x34>)
 800db86:	f023 0306 	bic.w	r3, r3, #6
 800db8a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800db8c:	f000 f9d4 	bl	800df38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800db96:	4618      	mov	r0, r3
 800db98:	f7fe ff54 	bl	800ca44 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	e000ed00 	.word	0xe000ed00

0800dba8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800dbb0:	4a22      	ldr	r2, [pc, #136]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a20      	ldr	r2, [pc, #128]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800dbc0:	4b1e      	ldr	r3, [pc, #120]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbc2:	4a1f      	ldr	r2, [pc, #124]	; (800dc40 <USBD_LL_Init+0x98>)
 800dbc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dbc6:	4b1d      	ldr	r3, [pc, #116]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbc8:	2208      	movs	r2, #8
 800dbca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dbcc:	4b1b      	ldr	r3, [pc, #108]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbce:	2202      	movs	r2, #2
 800dbd0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dbd2:	4b1a      	ldr	r3, [pc, #104]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbd4:	2202      	movs	r2, #2
 800dbd6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800dbd8:	4b18      	ldr	r3, [pc, #96]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dbde:	4b17      	ldr	r3, [pc, #92]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dbe4:	4b15      	ldr	r3, [pc, #84]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dbea:	4b14      	ldr	r3, [pc, #80]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dbf0:	4812      	ldr	r0, [pc, #72]	; (800dc3c <USBD_LL_Init+0x94>)
 800dbf2:	f7f6 fd0d 	bl	8004610 <HAL_PCD_Init>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800dbfc:	f7f5 fad2 	bl	80031a4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc06:	2318      	movs	r3, #24
 800dc08:	2200      	movs	r2, #0
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	f7f8 f9ae 	bl	8005f6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc16:	2358      	movs	r3, #88	; 0x58
 800dc18:	2200      	movs	r2, #0
 800dc1a:	2180      	movs	r1, #128	; 0x80
 800dc1c:	f7f8 f9a6 	bl	8005f6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2181      	movs	r1, #129	; 0x81
 800dc2e:	f7f8 f99d 	bl	8005f6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	20004cc8 	.word	0x20004cc8
 800dc40:	40005c00 	.word	0x40005c00

0800dc44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7f6 fdbd 	bl	80047da <HAL_PCD_Start>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f000 f96c 	bl	800df44 <USBD_Get_USB_Status>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc70:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	4608      	mov	r0, r1
 800dc84:	4611      	mov	r1, r2
 800dc86:	461a      	mov	r2, r3
 800dc88:	4603      	mov	r3, r0
 800dc8a:	70fb      	strb	r3, [r7, #3]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	70bb      	strb	r3, [r7, #2]
 800dc90:	4613      	mov	r3, r2
 800dc92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc94:	2300      	movs	r3, #0
 800dc96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dca2:	78bb      	ldrb	r3, [r7, #2]
 800dca4:	883a      	ldrh	r2, [r7, #0]
 800dca6:	78f9      	ldrb	r1, [r7, #3]
 800dca8:	f7f6 ff05 	bl	8004ab6 <HAL_PCD_EP_Open>
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 f946 	bl	800df44 <USBD_Get_USB_Status>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b084      	sub	sp, #16
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dce0:	78fa      	ldrb	r2, [r7, #3]
 800dce2:	4611      	mov	r1, r2
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7f6 ff4c 	bl	8004b82 <HAL_PCD_EP_Close>
 800dcea:	4603      	mov	r3, r0
 800dcec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcee:	7bfb      	ldrb	r3, [r7, #15]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 f927 	bl	800df44 <USBD_Get_USB_Status>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd10:	2300      	movs	r3, #0
 800dd12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd1e:	78fa      	ldrb	r2, [r7, #3]
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7f6 fff5 	bl	8004d12 <HAL_PCD_EP_SetStall>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd2c:	7bfb      	ldrb	r3, [r7, #15]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 f908 	bl	800df44 <USBD_Get_USB_Status>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd38:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b084      	sub	sp, #16
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd5c:	78fa      	ldrb	r2, [r7, #3]
 800dd5e:	4611      	mov	r1, r2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f7 f828 	bl	8004db6 <HAL_PCD_EP_ClrStall>
 800dd66:	4603      	mov	r3, r0
 800dd68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 f8e9 	bl	800df44 <USBD_Get_USB_Status>
 800dd72:	4603      	mov	r3, r0
 800dd74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd76:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	da0c      	bge.n	800ddb6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd9c:	78fb      	ldrb	r3, [r7, #3]
 800dd9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dda2:	68f9      	ldr	r1, [r7, #12]
 800dda4:	1c5a      	adds	r2, r3, #1
 800dda6:	4613      	mov	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4413      	add	r3, r2
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	440b      	add	r3, r1
 800ddb0:	3302      	adds	r3, #2
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	e00b      	b.n	800ddce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ddb6:	78fb      	ldrb	r3, [r7, #3]
 800ddb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddbc:	68f9      	ldr	r1, [r7, #12]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	00db      	lsls	r3, r3, #3
 800ddc6:	440b      	add	r3, r1
 800ddc8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ddcc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3714      	adds	r7, #20
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	460b      	mov	r3, r1
 800dde4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ddf4:	78fa      	ldrb	r2, [r7, #3]
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7f6 fe37 	bl	8004a6c <HAL_PCD_SetAddress>
 800ddfe:	4603      	mov	r3, r0
 800de00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de02:	7bfb      	ldrb	r3, [r7, #15]
 800de04:	4618      	mov	r0, r3
 800de06:	f000 f89d 	bl	800df44 <USBD_Get_USB_Status>
 800de0a:	4603      	mov	r3, r0
 800de0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	607a      	str	r2, [r7, #4]
 800de22:	603b      	str	r3, [r7, #0]
 800de24:	460b      	mov	r3, r1
 800de26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de28:	2300      	movs	r3, #0
 800de2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de36:	7af9      	ldrb	r1, [r7, #11]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	f7f6 ff26 	bl	8004c8c <HAL_PCD_EP_Transmit>
 800de40:	4603      	mov	r3, r0
 800de42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de44:	7dfb      	ldrb	r3, [r7, #23]
 800de46:	4618      	mov	r0, r3
 800de48:	f000 f87c 	bl	800df44 <USBD_Get_USB_Status>
 800de4c:	4603      	mov	r3, r0
 800de4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de50:	7dbb      	ldrb	r3, [r7, #22]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3718      	adds	r7, #24
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b086      	sub	sp, #24
 800de5e:	af00      	add	r7, sp, #0
 800de60:	60f8      	str	r0, [r7, #12]
 800de62:	607a      	str	r2, [r7, #4]
 800de64:	603b      	str	r3, [r7, #0]
 800de66:	460b      	mov	r3, r1
 800de68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de78:	7af9      	ldrb	r1, [r7, #11]
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	f7f6 fec8 	bl	8004c12 <HAL_PCD_EP_Receive>
 800de82:	4603      	mov	r3, r0
 800de84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de86:	7dfb      	ldrb	r3, [r7, #23]
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 f85b 	bl	800df44 <USBD_Get_USB_Status>
 800de8e:	4603      	mov	r3, r0
 800de90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de92:	7dbb      	ldrb	r3, [r7, #22]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dea8:	78fb      	ldrb	r3, [r7, #3]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <HAL_PCDEx_LPM_Callback+0x18>
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d013      	beq.n	800deda <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800deb2:	e023      	b.n	800defc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d007      	beq.n	800decc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800debc:	f000 f83c 	bl	800df38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dec0:	4b10      	ldr	r3, [pc, #64]	; (800df04 <HAL_PCDEx_LPM_Callback+0x68>)
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	4a0f      	ldr	r2, [pc, #60]	; (800df04 <HAL_PCDEx_LPM_Callback+0x68>)
 800dec6:	f023 0306 	bic.w	r3, r3, #6
 800deca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe fdb6 	bl	800ca44 <USBD_LL_Resume>
    break;
 800ded8:	e010      	b.n	800defc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fe fd99 	bl	800ca18 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	699b      	ldr	r3, [r3, #24]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d005      	beq.n	800defa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800deee:	4b05      	ldr	r3, [pc, #20]	; (800df04 <HAL_PCDEx_LPM_Callback+0x68>)
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	4a04      	ldr	r2, [pc, #16]	; (800df04 <HAL_PCDEx_LPM_Callback+0x68>)
 800def4:	f043 0306 	orr.w	r3, r3, #6
 800def8:	6113      	str	r3, [r2, #16]
    break;
 800defa:	bf00      	nop
}
 800defc:	bf00      	nop
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	e000ed00 	.word	0xe000ed00

0800df08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df10:	4b03      	ldr	r3, [pc, #12]	; (800df20 <USBD_static_malloc+0x18>)
}
 800df12:	4618      	mov	r0, r3
 800df14:	370c      	adds	r7, #12
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	20004fbc 	.word	0x20004fbc

0800df24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]

}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800df3c:	f7f5 f89b 	bl	8003076 <SystemClock_Config>
}
 800df40:	bf00      	nop
 800df42:	bd80      	pop	{r7, pc}

0800df44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	2b03      	cmp	r3, #3
 800df56:	d817      	bhi.n	800df88 <USBD_Get_USB_Status+0x44>
 800df58:	a201      	add	r2, pc, #4	; (adr r2, 800df60 <USBD_Get_USB_Status+0x1c>)
 800df5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5e:	bf00      	nop
 800df60:	0800df71 	.word	0x0800df71
 800df64:	0800df77 	.word	0x0800df77
 800df68:	0800df7d 	.word	0x0800df7d
 800df6c:	0800df83 	.word	0x0800df83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df70:	2300      	movs	r3, #0
 800df72:	73fb      	strb	r3, [r7, #15]
    break;
 800df74:	e00b      	b.n	800df8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df76:	2303      	movs	r3, #3
 800df78:	73fb      	strb	r3, [r7, #15]
    break;
 800df7a:	e008      	b.n	800df8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df7c:	2301      	movs	r3, #1
 800df7e:	73fb      	strb	r3, [r7, #15]
    break;
 800df80:	e005      	b.n	800df8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df82:	2303      	movs	r3, #3
 800df84:	73fb      	strb	r3, [r7, #15]
    break;
 800df86:	e002      	b.n	800df8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df88:	2303      	movs	r3, #3
 800df8a:	73fb      	strb	r3, [r7, #15]
    break;
 800df8c:	bf00      	nop
  }
  return usb_status;
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <__errno>:
 800df9c:	4b01      	ldr	r3, [pc, #4]	; (800dfa4 <__errno+0x8>)
 800df9e:	6818      	ldr	r0, [r3, #0]
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	2000019c 	.word	0x2000019c

0800dfa8 <__libc_init_array>:
 800dfa8:	b570      	push	{r4, r5, r6, lr}
 800dfaa:	4d0d      	ldr	r5, [pc, #52]	; (800dfe0 <__libc_init_array+0x38>)
 800dfac:	4c0d      	ldr	r4, [pc, #52]	; (800dfe4 <__libc_init_array+0x3c>)
 800dfae:	1b64      	subs	r4, r4, r5
 800dfb0:	10a4      	asrs	r4, r4, #2
 800dfb2:	2600      	movs	r6, #0
 800dfb4:	42a6      	cmp	r6, r4
 800dfb6:	d109      	bne.n	800dfcc <__libc_init_array+0x24>
 800dfb8:	4d0b      	ldr	r5, [pc, #44]	; (800dfe8 <__libc_init_array+0x40>)
 800dfba:	4c0c      	ldr	r4, [pc, #48]	; (800dfec <__libc_init_array+0x44>)
 800dfbc:	f000 fc8e 	bl	800e8dc <_init>
 800dfc0:	1b64      	subs	r4, r4, r5
 800dfc2:	10a4      	asrs	r4, r4, #2
 800dfc4:	2600      	movs	r6, #0
 800dfc6:	42a6      	cmp	r6, r4
 800dfc8:	d105      	bne.n	800dfd6 <__libc_init_array+0x2e>
 800dfca:	bd70      	pop	{r4, r5, r6, pc}
 800dfcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfd0:	4798      	blx	r3
 800dfd2:	3601      	adds	r6, #1
 800dfd4:	e7ee      	b.n	800dfb4 <__libc_init_array+0xc>
 800dfd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfda:	4798      	blx	r3
 800dfdc:	3601      	adds	r6, #1
 800dfde:	e7f2      	b.n	800dfc6 <__libc_init_array+0x1e>
 800dfe0:	0800ee08 	.word	0x0800ee08
 800dfe4:	0800ee08 	.word	0x0800ee08
 800dfe8:	0800ee08 	.word	0x0800ee08
 800dfec:	0800ee0c 	.word	0x0800ee0c

0800dff0 <memset>:
 800dff0:	4402      	add	r2, r0
 800dff2:	4603      	mov	r3, r0
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d100      	bne.n	800dffa <memset+0xa>
 800dff8:	4770      	bx	lr
 800dffa:	f803 1b01 	strb.w	r1, [r3], #1
 800dffe:	e7f9      	b.n	800dff4 <memset+0x4>

0800e000 <siprintf>:
 800e000:	b40e      	push	{r1, r2, r3}
 800e002:	b500      	push	{lr}
 800e004:	b09c      	sub	sp, #112	; 0x70
 800e006:	ab1d      	add	r3, sp, #116	; 0x74
 800e008:	9002      	str	r0, [sp, #8]
 800e00a:	9006      	str	r0, [sp, #24]
 800e00c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e010:	4809      	ldr	r0, [pc, #36]	; (800e038 <siprintf+0x38>)
 800e012:	9107      	str	r1, [sp, #28]
 800e014:	9104      	str	r1, [sp, #16]
 800e016:	4909      	ldr	r1, [pc, #36]	; (800e03c <siprintf+0x3c>)
 800e018:	f853 2b04 	ldr.w	r2, [r3], #4
 800e01c:	9105      	str	r1, [sp, #20]
 800e01e:	6800      	ldr	r0, [r0, #0]
 800e020:	9301      	str	r3, [sp, #4]
 800e022:	a902      	add	r1, sp, #8
 800e024:	f000 f868 	bl	800e0f8 <_svfiprintf_r>
 800e028:	9b02      	ldr	r3, [sp, #8]
 800e02a:	2200      	movs	r2, #0
 800e02c:	701a      	strb	r2, [r3, #0]
 800e02e:	b01c      	add	sp, #112	; 0x70
 800e030:	f85d eb04 	ldr.w	lr, [sp], #4
 800e034:	b003      	add	sp, #12
 800e036:	4770      	bx	lr
 800e038:	2000019c 	.word	0x2000019c
 800e03c:	ffff0208 	.word	0xffff0208

0800e040 <__ssputs_r>:
 800e040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e044:	688e      	ldr	r6, [r1, #8]
 800e046:	429e      	cmp	r6, r3
 800e048:	4682      	mov	sl, r0
 800e04a:	460c      	mov	r4, r1
 800e04c:	4690      	mov	r8, r2
 800e04e:	461f      	mov	r7, r3
 800e050:	d838      	bhi.n	800e0c4 <__ssputs_r+0x84>
 800e052:	898a      	ldrh	r2, [r1, #12]
 800e054:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e058:	d032      	beq.n	800e0c0 <__ssputs_r+0x80>
 800e05a:	6825      	ldr	r5, [r4, #0]
 800e05c:	6909      	ldr	r1, [r1, #16]
 800e05e:	eba5 0901 	sub.w	r9, r5, r1
 800e062:	6965      	ldr	r5, [r4, #20]
 800e064:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e06c:	3301      	adds	r3, #1
 800e06e:	444b      	add	r3, r9
 800e070:	106d      	asrs	r5, r5, #1
 800e072:	429d      	cmp	r5, r3
 800e074:	bf38      	it	cc
 800e076:	461d      	movcc	r5, r3
 800e078:	0553      	lsls	r3, r2, #21
 800e07a:	d531      	bpl.n	800e0e0 <__ssputs_r+0xa0>
 800e07c:	4629      	mov	r1, r5
 800e07e:	f000 fb63 	bl	800e748 <_malloc_r>
 800e082:	4606      	mov	r6, r0
 800e084:	b950      	cbnz	r0, 800e09c <__ssputs_r+0x5c>
 800e086:	230c      	movs	r3, #12
 800e088:	f8ca 3000 	str.w	r3, [sl]
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e09c:	6921      	ldr	r1, [r4, #16]
 800e09e:	464a      	mov	r2, r9
 800e0a0:	f000 fabe 	bl	800e620 <memcpy>
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ae:	81a3      	strh	r3, [r4, #12]
 800e0b0:	6126      	str	r6, [r4, #16]
 800e0b2:	6165      	str	r5, [r4, #20]
 800e0b4:	444e      	add	r6, r9
 800e0b6:	eba5 0509 	sub.w	r5, r5, r9
 800e0ba:	6026      	str	r6, [r4, #0]
 800e0bc:	60a5      	str	r5, [r4, #8]
 800e0be:	463e      	mov	r6, r7
 800e0c0:	42be      	cmp	r6, r7
 800e0c2:	d900      	bls.n	800e0c6 <__ssputs_r+0x86>
 800e0c4:	463e      	mov	r6, r7
 800e0c6:	6820      	ldr	r0, [r4, #0]
 800e0c8:	4632      	mov	r2, r6
 800e0ca:	4641      	mov	r1, r8
 800e0cc:	f000 fab6 	bl	800e63c <memmove>
 800e0d0:	68a3      	ldr	r3, [r4, #8]
 800e0d2:	1b9b      	subs	r3, r3, r6
 800e0d4:	60a3      	str	r3, [r4, #8]
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	4433      	add	r3, r6
 800e0da:	6023      	str	r3, [r4, #0]
 800e0dc:	2000      	movs	r0, #0
 800e0de:	e7db      	b.n	800e098 <__ssputs_r+0x58>
 800e0e0:	462a      	mov	r2, r5
 800e0e2:	f000 fba5 	bl	800e830 <_realloc_r>
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d1e1      	bne.n	800e0b0 <__ssputs_r+0x70>
 800e0ec:	6921      	ldr	r1, [r4, #16]
 800e0ee:	4650      	mov	r0, sl
 800e0f0:	f000 fabe 	bl	800e670 <_free_r>
 800e0f4:	e7c7      	b.n	800e086 <__ssputs_r+0x46>
	...

0800e0f8 <_svfiprintf_r>:
 800e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fc:	4698      	mov	r8, r3
 800e0fe:	898b      	ldrh	r3, [r1, #12]
 800e100:	061b      	lsls	r3, r3, #24
 800e102:	b09d      	sub	sp, #116	; 0x74
 800e104:	4607      	mov	r7, r0
 800e106:	460d      	mov	r5, r1
 800e108:	4614      	mov	r4, r2
 800e10a:	d50e      	bpl.n	800e12a <_svfiprintf_r+0x32>
 800e10c:	690b      	ldr	r3, [r1, #16]
 800e10e:	b963      	cbnz	r3, 800e12a <_svfiprintf_r+0x32>
 800e110:	2140      	movs	r1, #64	; 0x40
 800e112:	f000 fb19 	bl	800e748 <_malloc_r>
 800e116:	6028      	str	r0, [r5, #0]
 800e118:	6128      	str	r0, [r5, #16]
 800e11a:	b920      	cbnz	r0, 800e126 <_svfiprintf_r+0x2e>
 800e11c:	230c      	movs	r3, #12
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	f04f 30ff 	mov.w	r0, #4294967295
 800e124:	e0d1      	b.n	800e2ca <_svfiprintf_r+0x1d2>
 800e126:	2340      	movs	r3, #64	; 0x40
 800e128:	616b      	str	r3, [r5, #20]
 800e12a:	2300      	movs	r3, #0
 800e12c:	9309      	str	r3, [sp, #36]	; 0x24
 800e12e:	2320      	movs	r3, #32
 800e130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e134:	f8cd 800c 	str.w	r8, [sp, #12]
 800e138:	2330      	movs	r3, #48	; 0x30
 800e13a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2e4 <_svfiprintf_r+0x1ec>
 800e13e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e142:	f04f 0901 	mov.w	r9, #1
 800e146:	4623      	mov	r3, r4
 800e148:	469a      	mov	sl, r3
 800e14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e14e:	b10a      	cbz	r2, 800e154 <_svfiprintf_r+0x5c>
 800e150:	2a25      	cmp	r2, #37	; 0x25
 800e152:	d1f9      	bne.n	800e148 <_svfiprintf_r+0x50>
 800e154:	ebba 0b04 	subs.w	fp, sl, r4
 800e158:	d00b      	beq.n	800e172 <_svfiprintf_r+0x7a>
 800e15a:	465b      	mov	r3, fp
 800e15c:	4622      	mov	r2, r4
 800e15e:	4629      	mov	r1, r5
 800e160:	4638      	mov	r0, r7
 800e162:	f7ff ff6d 	bl	800e040 <__ssputs_r>
 800e166:	3001      	adds	r0, #1
 800e168:	f000 80aa 	beq.w	800e2c0 <_svfiprintf_r+0x1c8>
 800e16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e16e:	445a      	add	r2, fp
 800e170:	9209      	str	r2, [sp, #36]	; 0x24
 800e172:	f89a 3000 	ldrb.w	r3, [sl]
 800e176:	2b00      	cmp	r3, #0
 800e178:	f000 80a2 	beq.w	800e2c0 <_svfiprintf_r+0x1c8>
 800e17c:	2300      	movs	r3, #0
 800e17e:	f04f 32ff 	mov.w	r2, #4294967295
 800e182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e186:	f10a 0a01 	add.w	sl, sl, #1
 800e18a:	9304      	str	r3, [sp, #16]
 800e18c:	9307      	str	r3, [sp, #28]
 800e18e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e192:	931a      	str	r3, [sp, #104]	; 0x68
 800e194:	4654      	mov	r4, sl
 800e196:	2205      	movs	r2, #5
 800e198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e19c:	4851      	ldr	r0, [pc, #324]	; (800e2e4 <_svfiprintf_r+0x1ec>)
 800e19e:	f7f2 f83f 	bl	8000220 <memchr>
 800e1a2:	9a04      	ldr	r2, [sp, #16]
 800e1a4:	b9d8      	cbnz	r0, 800e1de <_svfiprintf_r+0xe6>
 800e1a6:	06d0      	lsls	r0, r2, #27
 800e1a8:	bf44      	itt	mi
 800e1aa:	2320      	movmi	r3, #32
 800e1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1b0:	0711      	lsls	r1, r2, #28
 800e1b2:	bf44      	itt	mi
 800e1b4:	232b      	movmi	r3, #43	; 0x2b
 800e1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e1be:	2b2a      	cmp	r3, #42	; 0x2a
 800e1c0:	d015      	beq.n	800e1ee <_svfiprintf_r+0xf6>
 800e1c2:	9a07      	ldr	r2, [sp, #28]
 800e1c4:	4654      	mov	r4, sl
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	f04f 0c0a 	mov.w	ip, #10
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1d2:	3b30      	subs	r3, #48	; 0x30
 800e1d4:	2b09      	cmp	r3, #9
 800e1d6:	d94e      	bls.n	800e276 <_svfiprintf_r+0x17e>
 800e1d8:	b1b0      	cbz	r0, 800e208 <_svfiprintf_r+0x110>
 800e1da:	9207      	str	r2, [sp, #28]
 800e1dc:	e014      	b.n	800e208 <_svfiprintf_r+0x110>
 800e1de:	eba0 0308 	sub.w	r3, r0, r8
 800e1e2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	9304      	str	r3, [sp, #16]
 800e1ea:	46a2      	mov	sl, r4
 800e1ec:	e7d2      	b.n	800e194 <_svfiprintf_r+0x9c>
 800e1ee:	9b03      	ldr	r3, [sp, #12]
 800e1f0:	1d19      	adds	r1, r3, #4
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	9103      	str	r1, [sp, #12]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	bfbb      	ittet	lt
 800e1fa:	425b      	neglt	r3, r3
 800e1fc:	f042 0202 	orrlt.w	r2, r2, #2
 800e200:	9307      	strge	r3, [sp, #28]
 800e202:	9307      	strlt	r3, [sp, #28]
 800e204:	bfb8      	it	lt
 800e206:	9204      	strlt	r2, [sp, #16]
 800e208:	7823      	ldrb	r3, [r4, #0]
 800e20a:	2b2e      	cmp	r3, #46	; 0x2e
 800e20c:	d10c      	bne.n	800e228 <_svfiprintf_r+0x130>
 800e20e:	7863      	ldrb	r3, [r4, #1]
 800e210:	2b2a      	cmp	r3, #42	; 0x2a
 800e212:	d135      	bne.n	800e280 <_svfiprintf_r+0x188>
 800e214:	9b03      	ldr	r3, [sp, #12]
 800e216:	1d1a      	adds	r2, r3, #4
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	9203      	str	r2, [sp, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	bfb8      	it	lt
 800e220:	f04f 33ff 	movlt.w	r3, #4294967295
 800e224:	3402      	adds	r4, #2
 800e226:	9305      	str	r3, [sp, #20]
 800e228:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2f4 <_svfiprintf_r+0x1fc>
 800e22c:	7821      	ldrb	r1, [r4, #0]
 800e22e:	2203      	movs	r2, #3
 800e230:	4650      	mov	r0, sl
 800e232:	f7f1 fff5 	bl	8000220 <memchr>
 800e236:	b140      	cbz	r0, 800e24a <_svfiprintf_r+0x152>
 800e238:	2340      	movs	r3, #64	; 0x40
 800e23a:	eba0 000a 	sub.w	r0, r0, sl
 800e23e:	fa03 f000 	lsl.w	r0, r3, r0
 800e242:	9b04      	ldr	r3, [sp, #16]
 800e244:	4303      	orrs	r3, r0
 800e246:	3401      	adds	r4, #1
 800e248:	9304      	str	r3, [sp, #16]
 800e24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e24e:	4826      	ldr	r0, [pc, #152]	; (800e2e8 <_svfiprintf_r+0x1f0>)
 800e250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e254:	2206      	movs	r2, #6
 800e256:	f7f1 ffe3 	bl	8000220 <memchr>
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d038      	beq.n	800e2d0 <_svfiprintf_r+0x1d8>
 800e25e:	4b23      	ldr	r3, [pc, #140]	; (800e2ec <_svfiprintf_r+0x1f4>)
 800e260:	bb1b      	cbnz	r3, 800e2aa <_svfiprintf_r+0x1b2>
 800e262:	9b03      	ldr	r3, [sp, #12]
 800e264:	3307      	adds	r3, #7
 800e266:	f023 0307 	bic.w	r3, r3, #7
 800e26a:	3308      	adds	r3, #8
 800e26c:	9303      	str	r3, [sp, #12]
 800e26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e270:	4433      	add	r3, r6
 800e272:	9309      	str	r3, [sp, #36]	; 0x24
 800e274:	e767      	b.n	800e146 <_svfiprintf_r+0x4e>
 800e276:	fb0c 3202 	mla	r2, ip, r2, r3
 800e27a:	460c      	mov	r4, r1
 800e27c:	2001      	movs	r0, #1
 800e27e:	e7a5      	b.n	800e1cc <_svfiprintf_r+0xd4>
 800e280:	2300      	movs	r3, #0
 800e282:	3401      	adds	r4, #1
 800e284:	9305      	str	r3, [sp, #20]
 800e286:	4619      	mov	r1, r3
 800e288:	f04f 0c0a 	mov.w	ip, #10
 800e28c:	4620      	mov	r0, r4
 800e28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e292:	3a30      	subs	r2, #48	; 0x30
 800e294:	2a09      	cmp	r2, #9
 800e296:	d903      	bls.n	800e2a0 <_svfiprintf_r+0x1a8>
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0c5      	beq.n	800e228 <_svfiprintf_r+0x130>
 800e29c:	9105      	str	r1, [sp, #20]
 800e29e:	e7c3      	b.n	800e228 <_svfiprintf_r+0x130>
 800e2a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e7f0      	b.n	800e28c <_svfiprintf_r+0x194>
 800e2aa:	ab03      	add	r3, sp, #12
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	462a      	mov	r2, r5
 800e2b0:	4b0f      	ldr	r3, [pc, #60]	; (800e2f0 <_svfiprintf_r+0x1f8>)
 800e2b2:	a904      	add	r1, sp, #16
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f3af 8000 	nop.w
 800e2ba:	1c42      	adds	r2, r0, #1
 800e2bc:	4606      	mov	r6, r0
 800e2be:	d1d6      	bne.n	800e26e <_svfiprintf_r+0x176>
 800e2c0:	89ab      	ldrh	r3, [r5, #12]
 800e2c2:	065b      	lsls	r3, r3, #25
 800e2c4:	f53f af2c 	bmi.w	800e120 <_svfiprintf_r+0x28>
 800e2c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ca:	b01d      	add	sp, #116	; 0x74
 800e2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d0:	ab03      	add	r3, sp, #12
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	462a      	mov	r2, r5
 800e2d6:	4b06      	ldr	r3, [pc, #24]	; (800e2f0 <_svfiprintf_r+0x1f8>)
 800e2d8:	a904      	add	r1, sp, #16
 800e2da:	4638      	mov	r0, r7
 800e2dc:	f000 f87a 	bl	800e3d4 <_printf_i>
 800e2e0:	e7eb      	b.n	800e2ba <_svfiprintf_r+0x1c2>
 800e2e2:	bf00      	nop
 800e2e4:	0800edd4 	.word	0x0800edd4
 800e2e8:	0800edde 	.word	0x0800edde
 800e2ec:	00000000 	.word	0x00000000
 800e2f0:	0800e041 	.word	0x0800e041
 800e2f4:	0800edda 	.word	0x0800edda

0800e2f8 <_printf_common>:
 800e2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fc:	4616      	mov	r6, r2
 800e2fe:	4699      	mov	r9, r3
 800e300:	688a      	ldr	r2, [r1, #8]
 800e302:	690b      	ldr	r3, [r1, #16]
 800e304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e308:	4293      	cmp	r3, r2
 800e30a:	bfb8      	it	lt
 800e30c:	4613      	movlt	r3, r2
 800e30e:	6033      	str	r3, [r6, #0]
 800e310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e314:	4607      	mov	r7, r0
 800e316:	460c      	mov	r4, r1
 800e318:	b10a      	cbz	r2, 800e31e <_printf_common+0x26>
 800e31a:	3301      	adds	r3, #1
 800e31c:	6033      	str	r3, [r6, #0]
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	0699      	lsls	r1, r3, #26
 800e322:	bf42      	ittt	mi
 800e324:	6833      	ldrmi	r3, [r6, #0]
 800e326:	3302      	addmi	r3, #2
 800e328:	6033      	strmi	r3, [r6, #0]
 800e32a:	6825      	ldr	r5, [r4, #0]
 800e32c:	f015 0506 	ands.w	r5, r5, #6
 800e330:	d106      	bne.n	800e340 <_printf_common+0x48>
 800e332:	f104 0a19 	add.w	sl, r4, #25
 800e336:	68e3      	ldr	r3, [r4, #12]
 800e338:	6832      	ldr	r2, [r6, #0]
 800e33a:	1a9b      	subs	r3, r3, r2
 800e33c:	42ab      	cmp	r3, r5
 800e33e:	dc26      	bgt.n	800e38e <_printf_common+0x96>
 800e340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e344:	1e13      	subs	r3, r2, #0
 800e346:	6822      	ldr	r2, [r4, #0]
 800e348:	bf18      	it	ne
 800e34a:	2301      	movne	r3, #1
 800e34c:	0692      	lsls	r2, r2, #26
 800e34e:	d42b      	bmi.n	800e3a8 <_printf_common+0xb0>
 800e350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e354:	4649      	mov	r1, r9
 800e356:	4638      	mov	r0, r7
 800e358:	47c0      	blx	r8
 800e35a:	3001      	adds	r0, #1
 800e35c:	d01e      	beq.n	800e39c <_printf_common+0xa4>
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	68e5      	ldr	r5, [r4, #12]
 800e362:	6832      	ldr	r2, [r6, #0]
 800e364:	f003 0306 	and.w	r3, r3, #6
 800e368:	2b04      	cmp	r3, #4
 800e36a:	bf08      	it	eq
 800e36c:	1aad      	subeq	r5, r5, r2
 800e36e:	68a3      	ldr	r3, [r4, #8]
 800e370:	6922      	ldr	r2, [r4, #16]
 800e372:	bf0c      	ite	eq
 800e374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e378:	2500      	movne	r5, #0
 800e37a:	4293      	cmp	r3, r2
 800e37c:	bfc4      	itt	gt
 800e37e:	1a9b      	subgt	r3, r3, r2
 800e380:	18ed      	addgt	r5, r5, r3
 800e382:	2600      	movs	r6, #0
 800e384:	341a      	adds	r4, #26
 800e386:	42b5      	cmp	r5, r6
 800e388:	d11a      	bne.n	800e3c0 <_printf_common+0xc8>
 800e38a:	2000      	movs	r0, #0
 800e38c:	e008      	b.n	800e3a0 <_printf_common+0xa8>
 800e38e:	2301      	movs	r3, #1
 800e390:	4652      	mov	r2, sl
 800e392:	4649      	mov	r1, r9
 800e394:	4638      	mov	r0, r7
 800e396:	47c0      	blx	r8
 800e398:	3001      	adds	r0, #1
 800e39a:	d103      	bne.n	800e3a4 <_printf_common+0xac>
 800e39c:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a4:	3501      	adds	r5, #1
 800e3a6:	e7c6      	b.n	800e336 <_printf_common+0x3e>
 800e3a8:	18e1      	adds	r1, r4, r3
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	2030      	movs	r0, #48	; 0x30
 800e3ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e3b2:	4422      	add	r2, r4
 800e3b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3bc:	3302      	adds	r3, #2
 800e3be:	e7c7      	b.n	800e350 <_printf_common+0x58>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	4622      	mov	r2, r4
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	47c0      	blx	r8
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	d0e6      	beq.n	800e39c <_printf_common+0xa4>
 800e3ce:	3601      	adds	r6, #1
 800e3d0:	e7d9      	b.n	800e386 <_printf_common+0x8e>
	...

0800e3d4 <_printf_i>:
 800e3d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d8:	7e0f      	ldrb	r7, [r1, #24]
 800e3da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3dc:	2f78      	cmp	r7, #120	; 0x78
 800e3de:	4691      	mov	r9, r2
 800e3e0:	4680      	mov	r8, r0
 800e3e2:	460c      	mov	r4, r1
 800e3e4:	469a      	mov	sl, r3
 800e3e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3ea:	d807      	bhi.n	800e3fc <_printf_i+0x28>
 800e3ec:	2f62      	cmp	r7, #98	; 0x62
 800e3ee:	d80a      	bhi.n	800e406 <_printf_i+0x32>
 800e3f0:	2f00      	cmp	r7, #0
 800e3f2:	f000 80d8 	beq.w	800e5a6 <_printf_i+0x1d2>
 800e3f6:	2f58      	cmp	r7, #88	; 0x58
 800e3f8:	f000 80a3 	beq.w	800e542 <_printf_i+0x16e>
 800e3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e404:	e03a      	b.n	800e47c <_printf_i+0xa8>
 800e406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e40a:	2b15      	cmp	r3, #21
 800e40c:	d8f6      	bhi.n	800e3fc <_printf_i+0x28>
 800e40e:	a101      	add	r1, pc, #4	; (adr r1, 800e414 <_printf_i+0x40>)
 800e410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e414:	0800e46d 	.word	0x0800e46d
 800e418:	0800e481 	.word	0x0800e481
 800e41c:	0800e3fd 	.word	0x0800e3fd
 800e420:	0800e3fd 	.word	0x0800e3fd
 800e424:	0800e3fd 	.word	0x0800e3fd
 800e428:	0800e3fd 	.word	0x0800e3fd
 800e42c:	0800e481 	.word	0x0800e481
 800e430:	0800e3fd 	.word	0x0800e3fd
 800e434:	0800e3fd 	.word	0x0800e3fd
 800e438:	0800e3fd 	.word	0x0800e3fd
 800e43c:	0800e3fd 	.word	0x0800e3fd
 800e440:	0800e58d 	.word	0x0800e58d
 800e444:	0800e4b1 	.word	0x0800e4b1
 800e448:	0800e56f 	.word	0x0800e56f
 800e44c:	0800e3fd 	.word	0x0800e3fd
 800e450:	0800e3fd 	.word	0x0800e3fd
 800e454:	0800e5af 	.word	0x0800e5af
 800e458:	0800e3fd 	.word	0x0800e3fd
 800e45c:	0800e4b1 	.word	0x0800e4b1
 800e460:	0800e3fd 	.word	0x0800e3fd
 800e464:	0800e3fd 	.word	0x0800e3fd
 800e468:	0800e577 	.word	0x0800e577
 800e46c:	682b      	ldr	r3, [r5, #0]
 800e46e:	1d1a      	adds	r2, r3, #4
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	602a      	str	r2, [r5, #0]
 800e474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e47c:	2301      	movs	r3, #1
 800e47e:	e0a3      	b.n	800e5c8 <_printf_i+0x1f4>
 800e480:	6820      	ldr	r0, [r4, #0]
 800e482:	6829      	ldr	r1, [r5, #0]
 800e484:	0606      	lsls	r6, r0, #24
 800e486:	f101 0304 	add.w	r3, r1, #4
 800e48a:	d50a      	bpl.n	800e4a2 <_printf_i+0xce>
 800e48c:	680e      	ldr	r6, [r1, #0]
 800e48e:	602b      	str	r3, [r5, #0]
 800e490:	2e00      	cmp	r6, #0
 800e492:	da03      	bge.n	800e49c <_printf_i+0xc8>
 800e494:	232d      	movs	r3, #45	; 0x2d
 800e496:	4276      	negs	r6, r6
 800e498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e49c:	485e      	ldr	r0, [pc, #376]	; (800e618 <_printf_i+0x244>)
 800e49e:	230a      	movs	r3, #10
 800e4a0:	e019      	b.n	800e4d6 <_printf_i+0x102>
 800e4a2:	680e      	ldr	r6, [r1, #0]
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e4aa:	bf18      	it	ne
 800e4ac:	b236      	sxthne	r6, r6
 800e4ae:	e7ef      	b.n	800e490 <_printf_i+0xbc>
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	6820      	ldr	r0, [r4, #0]
 800e4b4:	1d19      	adds	r1, r3, #4
 800e4b6:	6029      	str	r1, [r5, #0]
 800e4b8:	0601      	lsls	r1, r0, #24
 800e4ba:	d501      	bpl.n	800e4c0 <_printf_i+0xec>
 800e4bc:	681e      	ldr	r6, [r3, #0]
 800e4be:	e002      	b.n	800e4c6 <_printf_i+0xf2>
 800e4c0:	0646      	lsls	r6, r0, #25
 800e4c2:	d5fb      	bpl.n	800e4bc <_printf_i+0xe8>
 800e4c4:	881e      	ldrh	r6, [r3, #0]
 800e4c6:	4854      	ldr	r0, [pc, #336]	; (800e618 <_printf_i+0x244>)
 800e4c8:	2f6f      	cmp	r7, #111	; 0x6f
 800e4ca:	bf0c      	ite	eq
 800e4cc:	2308      	moveq	r3, #8
 800e4ce:	230a      	movne	r3, #10
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4d6:	6865      	ldr	r5, [r4, #4]
 800e4d8:	60a5      	str	r5, [r4, #8]
 800e4da:	2d00      	cmp	r5, #0
 800e4dc:	bfa2      	ittt	ge
 800e4de:	6821      	ldrge	r1, [r4, #0]
 800e4e0:	f021 0104 	bicge.w	r1, r1, #4
 800e4e4:	6021      	strge	r1, [r4, #0]
 800e4e6:	b90e      	cbnz	r6, 800e4ec <_printf_i+0x118>
 800e4e8:	2d00      	cmp	r5, #0
 800e4ea:	d04d      	beq.n	800e588 <_printf_i+0x1b4>
 800e4ec:	4615      	mov	r5, r2
 800e4ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4f2:	fb03 6711 	mls	r7, r3, r1, r6
 800e4f6:	5dc7      	ldrb	r7, [r0, r7]
 800e4f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4fc:	4637      	mov	r7, r6
 800e4fe:	42bb      	cmp	r3, r7
 800e500:	460e      	mov	r6, r1
 800e502:	d9f4      	bls.n	800e4ee <_printf_i+0x11a>
 800e504:	2b08      	cmp	r3, #8
 800e506:	d10b      	bne.n	800e520 <_printf_i+0x14c>
 800e508:	6823      	ldr	r3, [r4, #0]
 800e50a:	07de      	lsls	r6, r3, #31
 800e50c:	d508      	bpl.n	800e520 <_printf_i+0x14c>
 800e50e:	6923      	ldr	r3, [r4, #16]
 800e510:	6861      	ldr	r1, [r4, #4]
 800e512:	4299      	cmp	r1, r3
 800e514:	bfde      	ittt	le
 800e516:	2330      	movle	r3, #48	; 0x30
 800e518:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e51c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e520:	1b52      	subs	r2, r2, r5
 800e522:	6122      	str	r2, [r4, #16]
 800e524:	f8cd a000 	str.w	sl, [sp]
 800e528:	464b      	mov	r3, r9
 800e52a:	aa03      	add	r2, sp, #12
 800e52c:	4621      	mov	r1, r4
 800e52e:	4640      	mov	r0, r8
 800e530:	f7ff fee2 	bl	800e2f8 <_printf_common>
 800e534:	3001      	adds	r0, #1
 800e536:	d14c      	bne.n	800e5d2 <_printf_i+0x1fe>
 800e538:	f04f 30ff 	mov.w	r0, #4294967295
 800e53c:	b004      	add	sp, #16
 800e53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e542:	4835      	ldr	r0, [pc, #212]	; (800e618 <_printf_i+0x244>)
 800e544:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e548:	6829      	ldr	r1, [r5, #0]
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e550:	6029      	str	r1, [r5, #0]
 800e552:	061d      	lsls	r5, r3, #24
 800e554:	d514      	bpl.n	800e580 <_printf_i+0x1ac>
 800e556:	07df      	lsls	r7, r3, #31
 800e558:	bf44      	itt	mi
 800e55a:	f043 0320 	orrmi.w	r3, r3, #32
 800e55e:	6023      	strmi	r3, [r4, #0]
 800e560:	b91e      	cbnz	r6, 800e56a <_printf_i+0x196>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	f023 0320 	bic.w	r3, r3, #32
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	2310      	movs	r3, #16
 800e56c:	e7b0      	b.n	800e4d0 <_printf_i+0xfc>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	f043 0320 	orr.w	r3, r3, #32
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	2378      	movs	r3, #120	; 0x78
 800e578:	4828      	ldr	r0, [pc, #160]	; (800e61c <_printf_i+0x248>)
 800e57a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e57e:	e7e3      	b.n	800e548 <_printf_i+0x174>
 800e580:	0659      	lsls	r1, r3, #25
 800e582:	bf48      	it	mi
 800e584:	b2b6      	uxthmi	r6, r6
 800e586:	e7e6      	b.n	800e556 <_printf_i+0x182>
 800e588:	4615      	mov	r5, r2
 800e58a:	e7bb      	b.n	800e504 <_printf_i+0x130>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	6826      	ldr	r6, [r4, #0]
 800e590:	6961      	ldr	r1, [r4, #20]
 800e592:	1d18      	adds	r0, r3, #4
 800e594:	6028      	str	r0, [r5, #0]
 800e596:	0635      	lsls	r5, r6, #24
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	d501      	bpl.n	800e5a0 <_printf_i+0x1cc>
 800e59c:	6019      	str	r1, [r3, #0]
 800e59e:	e002      	b.n	800e5a6 <_printf_i+0x1d2>
 800e5a0:	0670      	lsls	r0, r6, #25
 800e5a2:	d5fb      	bpl.n	800e59c <_printf_i+0x1c8>
 800e5a4:	8019      	strh	r1, [r3, #0]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	6123      	str	r3, [r4, #16]
 800e5aa:	4615      	mov	r5, r2
 800e5ac:	e7ba      	b.n	800e524 <_printf_i+0x150>
 800e5ae:	682b      	ldr	r3, [r5, #0]
 800e5b0:	1d1a      	adds	r2, r3, #4
 800e5b2:	602a      	str	r2, [r5, #0]
 800e5b4:	681d      	ldr	r5, [r3, #0]
 800e5b6:	6862      	ldr	r2, [r4, #4]
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	f7f1 fe30 	bl	8000220 <memchr>
 800e5c0:	b108      	cbz	r0, 800e5c6 <_printf_i+0x1f2>
 800e5c2:	1b40      	subs	r0, r0, r5
 800e5c4:	6060      	str	r0, [r4, #4]
 800e5c6:	6863      	ldr	r3, [r4, #4]
 800e5c8:	6123      	str	r3, [r4, #16]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5d0:	e7a8      	b.n	800e524 <_printf_i+0x150>
 800e5d2:	6923      	ldr	r3, [r4, #16]
 800e5d4:	462a      	mov	r2, r5
 800e5d6:	4649      	mov	r1, r9
 800e5d8:	4640      	mov	r0, r8
 800e5da:	47d0      	blx	sl
 800e5dc:	3001      	adds	r0, #1
 800e5de:	d0ab      	beq.n	800e538 <_printf_i+0x164>
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	079b      	lsls	r3, r3, #30
 800e5e4:	d413      	bmi.n	800e60e <_printf_i+0x23a>
 800e5e6:	68e0      	ldr	r0, [r4, #12]
 800e5e8:	9b03      	ldr	r3, [sp, #12]
 800e5ea:	4298      	cmp	r0, r3
 800e5ec:	bfb8      	it	lt
 800e5ee:	4618      	movlt	r0, r3
 800e5f0:	e7a4      	b.n	800e53c <_printf_i+0x168>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	4632      	mov	r2, r6
 800e5f6:	4649      	mov	r1, r9
 800e5f8:	4640      	mov	r0, r8
 800e5fa:	47d0      	blx	sl
 800e5fc:	3001      	adds	r0, #1
 800e5fe:	d09b      	beq.n	800e538 <_printf_i+0x164>
 800e600:	3501      	adds	r5, #1
 800e602:	68e3      	ldr	r3, [r4, #12]
 800e604:	9903      	ldr	r1, [sp, #12]
 800e606:	1a5b      	subs	r3, r3, r1
 800e608:	42ab      	cmp	r3, r5
 800e60a:	dcf2      	bgt.n	800e5f2 <_printf_i+0x21e>
 800e60c:	e7eb      	b.n	800e5e6 <_printf_i+0x212>
 800e60e:	2500      	movs	r5, #0
 800e610:	f104 0619 	add.w	r6, r4, #25
 800e614:	e7f5      	b.n	800e602 <_printf_i+0x22e>
 800e616:	bf00      	nop
 800e618:	0800ede5 	.word	0x0800ede5
 800e61c:	0800edf6 	.word	0x0800edf6

0800e620 <memcpy>:
 800e620:	440a      	add	r2, r1
 800e622:	4291      	cmp	r1, r2
 800e624:	f100 33ff 	add.w	r3, r0, #4294967295
 800e628:	d100      	bne.n	800e62c <memcpy+0xc>
 800e62a:	4770      	bx	lr
 800e62c:	b510      	push	{r4, lr}
 800e62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e636:	4291      	cmp	r1, r2
 800e638:	d1f9      	bne.n	800e62e <memcpy+0xe>
 800e63a:	bd10      	pop	{r4, pc}

0800e63c <memmove>:
 800e63c:	4288      	cmp	r0, r1
 800e63e:	b510      	push	{r4, lr}
 800e640:	eb01 0402 	add.w	r4, r1, r2
 800e644:	d902      	bls.n	800e64c <memmove+0x10>
 800e646:	4284      	cmp	r4, r0
 800e648:	4623      	mov	r3, r4
 800e64a:	d807      	bhi.n	800e65c <memmove+0x20>
 800e64c:	1e43      	subs	r3, r0, #1
 800e64e:	42a1      	cmp	r1, r4
 800e650:	d008      	beq.n	800e664 <memmove+0x28>
 800e652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e65a:	e7f8      	b.n	800e64e <memmove+0x12>
 800e65c:	4402      	add	r2, r0
 800e65e:	4601      	mov	r1, r0
 800e660:	428a      	cmp	r2, r1
 800e662:	d100      	bne.n	800e666 <memmove+0x2a>
 800e664:	bd10      	pop	{r4, pc}
 800e666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e66a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e66e:	e7f7      	b.n	800e660 <memmove+0x24>

0800e670 <_free_r>:
 800e670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e672:	2900      	cmp	r1, #0
 800e674:	d044      	beq.n	800e700 <_free_r+0x90>
 800e676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e67a:	9001      	str	r0, [sp, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f1a1 0404 	sub.w	r4, r1, #4
 800e682:	bfb8      	it	lt
 800e684:	18e4      	addlt	r4, r4, r3
 800e686:	f000 f913 	bl	800e8b0 <__malloc_lock>
 800e68a:	4a1e      	ldr	r2, [pc, #120]	; (800e704 <_free_r+0x94>)
 800e68c:	9801      	ldr	r0, [sp, #4]
 800e68e:	6813      	ldr	r3, [r2, #0]
 800e690:	b933      	cbnz	r3, 800e6a0 <_free_r+0x30>
 800e692:	6063      	str	r3, [r4, #4]
 800e694:	6014      	str	r4, [r2, #0]
 800e696:	b003      	add	sp, #12
 800e698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e69c:	f000 b90e 	b.w	800e8bc <__malloc_unlock>
 800e6a0:	42a3      	cmp	r3, r4
 800e6a2:	d908      	bls.n	800e6b6 <_free_r+0x46>
 800e6a4:	6825      	ldr	r5, [r4, #0]
 800e6a6:	1961      	adds	r1, r4, r5
 800e6a8:	428b      	cmp	r3, r1
 800e6aa:	bf01      	itttt	eq
 800e6ac:	6819      	ldreq	r1, [r3, #0]
 800e6ae:	685b      	ldreq	r3, [r3, #4]
 800e6b0:	1949      	addeq	r1, r1, r5
 800e6b2:	6021      	streq	r1, [r4, #0]
 800e6b4:	e7ed      	b.n	800e692 <_free_r+0x22>
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	b10b      	cbz	r3, 800e6c0 <_free_r+0x50>
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	d9fa      	bls.n	800e6b6 <_free_r+0x46>
 800e6c0:	6811      	ldr	r1, [r2, #0]
 800e6c2:	1855      	adds	r5, r2, r1
 800e6c4:	42a5      	cmp	r5, r4
 800e6c6:	d10b      	bne.n	800e6e0 <_free_r+0x70>
 800e6c8:	6824      	ldr	r4, [r4, #0]
 800e6ca:	4421      	add	r1, r4
 800e6cc:	1854      	adds	r4, r2, r1
 800e6ce:	42a3      	cmp	r3, r4
 800e6d0:	6011      	str	r1, [r2, #0]
 800e6d2:	d1e0      	bne.n	800e696 <_free_r+0x26>
 800e6d4:	681c      	ldr	r4, [r3, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	6053      	str	r3, [r2, #4]
 800e6da:	4421      	add	r1, r4
 800e6dc:	6011      	str	r1, [r2, #0]
 800e6de:	e7da      	b.n	800e696 <_free_r+0x26>
 800e6e0:	d902      	bls.n	800e6e8 <_free_r+0x78>
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	6003      	str	r3, [r0, #0]
 800e6e6:	e7d6      	b.n	800e696 <_free_r+0x26>
 800e6e8:	6825      	ldr	r5, [r4, #0]
 800e6ea:	1961      	adds	r1, r4, r5
 800e6ec:	428b      	cmp	r3, r1
 800e6ee:	bf04      	itt	eq
 800e6f0:	6819      	ldreq	r1, [r3, #0]
 800e6f2:	685b      	ldreq	r3, [r3, #4]
 800e6f4:	6063      	str	r3, [r4, #4]
 800e6f6:	bf04      	itt	eq
 800e6f8:	1949      	addeq	r1, r1, r5
 800e6fa:	6021      	streq	r1, [r4, #0]
 800e6fc:	6054      	str	r4, [r2, #4]
 800e6fe:	e7ca      	b.n	800e696 <_free_r+0x26>
 800e700:	b003      	add	sp, #12
 800e702:	bd30      	pop	{r4, r5, pc}
 800e704:	20004fd0 	.word	0x20004fd0

0800e708 <sbrk_aligned>:
 800e708:	b570      	push	{r4, r5, r6, lr}
 800e70a:	4e0e      	ldr	r6, [pc, #56]	; (800e744 <sbrk_aligned+0x3c>)
 800e70c:	460c      	mov	r4, r1
 800e70e:	6831      	ldr	r1, [r6, #0]
 800e710:	4605      	mov	r5, r0
 800e712:	b911      	cbnz	r1, 800e71a <sbrk_aligned+0x12>
 800e714:	f000 f8bc 	bl	800e890 <_sbrk_r>
 800e718:	6030      	str	r0, [r6, #0]
 800e71a:	4621      	mov	r1, r4
 800e71c:	4628      	mov	r0, r5
 800e71e:	f000 f8b7 	bl	800e890 <_sbrk_r>
 800e722:	1c43      	adds	r3, r0, #1
 800e724:	d00a      	beq.n	800e73c <sbrk_aligned+0x34>
 800e726:	1cc4      	adds	r4, r0, #3
 800e728:	f024 0403 	bic.w	r4, r4, #3
 800e72c:	42a0      	cmp	r0, r4
 800e72e:	d007      	beq.n	800e740 <sbrk_aligned+0x38>
 800e730:	1a21      	subs	r1, r4, r0
 800e732:	4628      	mov	r0, r5
 800e734:	f000 f8ac 	bl	800e890 <_sbrk_r>
 800e738:	3001      	adds	r0, #1
 800e73a:	d101      	bne.n	800e740 <sbrk_aligned+0x38>
 800e73c:	f04f 34ff 	mov.w	r4, #4294967295
 800e740:	4620      	mov	r0, r4
 800e742:	bd70      	pop	{r4, r5, r6, pc}
 800e744:	20004fd4 	.word	0x20004fd4

0800e748 <_malloc_r>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	1ccd      	adds	r5, r1, #3
 800e74e:	f025 0503 	bic.w	r5, r5, #3
 800e752:	3508      	adds	r5, #8
 800e754:	2d0c      	cmp	r5, #12
 800e756:	bf38      	it	cc
 800e758:	250c      	movcc	r5, #12
 800e75a:	2d00      	cmp	r5, #0
 800e75c:	4607      	mov	r7, r0
 800e75e:	db01      	blt.n	800e764 <_malloc_r+0x1c>
 800e760:	42a9      	cmp	r1, r5
 800e762:	d905      	bls.n	800e770 <_malloc_r+0x28>
 800e764:	230c      	movs	r3, #12
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	2600      	movs	r6, #0
 800e76a:	4630      	mov	r0, r6
 800e76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e770:	4e2e      	ldr	r6, [pc, #184]	; (800e82c <_malloc_r+0xe4>)
 800e772:	f000 f89d 	bl	800e8b0 <__malloc_lock>
 800e776:	6833      	ldr	r3, [r6, #0]
 800e778:	461c      	mov	r4, r3
 800e77a:	bb34      	cbnz	r4, 800e7ca <_malloc_r+0x82>
 800e77c:	4629      	mov	r1, r5
 800e77e:	4638      	mov	r0, r7
 800e780:	f7ff ffc2 	bl	800e708 <sbrk_aligned>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	4604      	mov	r4, r0
 800e788:	d14d      	bne.n	800e826 <_malloc_r+0xde>
 800e78a:	6834      	ldr	r4, [r6, #0]
 800e78c:	4626      	mov	r6, r4
 800e78e:	2e00      	cmp	r6, #0
 800e790:	d140      	bne.n	800e814 <_malloc_r+0xcc>
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	4631      	mov	r1, r6
 800e796:	4638      	mov	r0, r7
 800e798:	eb04 0803 	add.w	r8, r4, r3
 800e79c:	f000 f878 	bl	800e890 <_sbrk_r>
 800e7a0:	4580      	cmp	r8, r0
 800e7a2:	d13a      	bne.n	800e81a <_malloc_r+0xd2>
 800e7a4:	6821      	ldr	r1, [r4, #0]
 800e7a6:	3503      	adds	r5, #3
 800e7a8:	1a6d      	subs	r5, r5, r1
 800e7aa:	f025 0503 	bic.w	r5, r5, #3
 800e7ae:	3508      	adds	r5, #8
 800e7b0:	2d0c      	cmp	r5, #12
 800e7b2:	bf38      	it	cc
 800e7b4:	250c      	movcc	r5, #12
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f7ff ffa5 	bl	800e708 <sbrk_aligned>
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d02b      	beq.n	800e81a <_malloc_r+0xd2>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	442b      	add	r3, r5
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	e00e      	b.n	800e7e8 <_malloc_r+0xa0>
 800e7ca:	6822      	ldr	r2, [r4, #0]
 800e7cc:	1b52      	subs	r2, r2, r5
 800e7ce:	d41e      	bmi.n	800e80e <_malloc_r+0xc6>
 800e7d0:	2a0b      	cmp	r2, #11
 800e7d2:	d916      	bls.n	800e802 <_malloc_r+0xba>
 800e7d4:	1961      	adds	r1, r4, r5
 800e7d6:	42a3      	cmp	r3, r4
 800e7d8:	6025      	str	r5, [r4, #0]
 800e7da:	bf18      	it	ne
 800e7dc:	6059      	strne	r1, [r3, #4]
 800e7de:	6863      	ldr	r3, [r4, #4]
 800e7e0:	bf08      	it	eq
 800e7e2:	6031      	streq	r1, [r6, #0]
 800e7e4:	5162      	str	r2, [r4, r5]
 800e7e6:	604b      	str	r3, [r1, #4]
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	f104 060b 	add.w	r6, r4, #11
 800e7ee:	f000 f865 	bl	800e8bc <__malloc_unlock>
 800e7f2:	f026 0607 	bic.w	r6, r6, #7
 800e7f6:	1d23      	adds	r3, r4, #4
 800e7f8:	1af2      	subs	r2, r6, r3
 800e7fa:	d0b6      	beq.n	800e76a <_malloc_r+0x22>
 800e7fc:	1b9b      	subs	r3, r3, r6
 800e7fe:	50a3      	str	r3, [r4, r2]
 800e800:	e7b3      	b.n	800e76a <_malloc_r+0x22>
 800e802:	6862      	ldr	r2, [r4, #4]
 800e804:	42a3      	cmp	r3, r4
 800e806:	bf0c      	ite	eq
 800e808:	6032      	streq	r2, [r6, #0]
 800e80a:	605a      	strne	r2, [r3, #4]
 800e80c:	e7ec      	b.n	800e7e8 <_malloc_r+0xa0>
 800e80e:	4623      	mov	r3, r4
 800e810:	6864      	ldr	r4, [r4, #4]
 800e812:	e7b2      	b.n	800e77a <_malloc_r+0x32>
 800e814:	4634      	mov	r4, r6
 800e816:	6876      	ldr	r6, [r6, #4]
 800e818:	e7b9      	b.n	800e78e <_malloc_r+0x46>
 800e81a:	230c      	movs	r3, #12
 800e81c:	603b      	str	r3, [r7, #0]
 800e81e:	4638      	mov	r0, r7
 800e820:	f000 f84c 	bl	800e8bc <__malloc_unlock>
 800e824:	e7a1      	b.n	800e76a <_malloc_r+0x22>
 800e826:	6025      	str	r5, [r4, #0]
 800e828:	e7de      	b.n	800e7e8 <_malloc_r+0xa0>
 800e82a:	bf00      	nop
 800e82c:	20004fd0 	.word	0x20004fd0

0800e830 <_realloc_r>:
 800e830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e834:	4680      	mov	r8, r0
 800e836:	4614      	mov	r4, r2
 800e838:	460e      	mov	r6, r1
 800e83a:	b921      	cbnz	r1, 800e846 <_realloc_r+0x16>
 800e83c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e840:	4611      	mov	r1, r2
 800e842:	f7ff bf81 	b.w	800e748 <_malloc_r>
 800e846:	b92a      	cbnz	r2, 800e854 <_realloc_r+0x24>
 800e848:	f7ff ff12 	bl	800e670 <_free_r>
 800e84c:	4625      	mov	r5, r4
 800e84e:	4628      	mov	r0, r5
 800e850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e854:	f000 f838 	bl	800e8c8 <_malloc_usable_size_r>
 800e858:	4284      	cmp	r4, r0
 800e85a:	4607      	mov	r7, r0
 800e85c:	d802      	bhi.n	800e864 <_realloc_r+0x34>
 800e85e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e862:	d812      	bhi.n	800e88a <_realloc_r+0x5a>
 800e864:	4621      	mov	r1, r4
 800e866:	4640      	mov	r0, r8
 800e868:	f7ff ff6e 	bl	800e748 <_malloc_r>
 800e86c:	4605      	mov	r5, r0
 800e86e:	2800      	cmp	r0, #0
 800e870:	d0ed      	beq.n	800e84e <_realloc_r+0x1e>
 800e872:	42bc      	cmp	r4, r7
 800e874:	4622      	mov	r2, r4
 800e876:	4631      	mov	r1, r6
 800e878:	bf28      	it	cs
 800e87a:	463a      	movcs	r2, r7
 800e87c:	f7ff fed0 	bl	800e620 <memcpy>
 800e880:	4631      	mov	r1, r6
 800e882:	4640      	mov	r0, r8
 800e884:	f7ff fef4 	bl	800e670 <_free_r>
 800e888:	e7e1      	b.n	800e84e <_realloc_r+0x1e>
 800e88a:	4635      	mov	r5, r6
 800e88c:	e7df      	b.n	800e84e <_realloc_r+0x1e>
	...

0800e890 <_sbrk_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4d06      	ldr	r5, [pc, #24]	; (800e8ac <_sbrk_r+0x1c>)
 800e894:	2300      	movs	r3, #0
 800e896:	4604      	mov	r4, r0
 800e898:	4608      	mov	r0, r1
 800e89a:	602b      	str	r3, [r5, #0]
 800e89c:	f7f4 fdfa 	bl	8003494 <_sbrk>
 800e8a0:	1c43      	adds	r3, r0, #1
 800e8a2:	d102      	bne.n	800e8aa <_sbrk_r+0x1a>
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	b103      	cbz	r3, 800e8aa <_sbrk_r+0x1a>
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	bd38      	pop	{r3, r4, r5, pc}
 800e8ac:	20004fd8 	.word	0x20004fd8

0800e8b0 <__malloc_lock>:
 800e8b0:	4801      	ldr	r0, [pc, #4]	; (800e8b8 <__malloc_lock+0x8>)
 800e8b2:	f000 b811 	b.w	800e8d8 <__retarget_lock_acquire_recursive>
 800e8b6:	bf00      	nop
 800e8b8:	20004fdc 	.word	0x20004fdc

0800e8bc <__malloc_unlock>:
 800e8bc:	4801      	ldr	r0, [pc, #4]	; (800e8c4 <__malloc_unlock+0x8>)
 800e8be:	f000 b80c 	b.w	800e8da <__retarget_lock_release_recursive>
 800e8c2:	bf00      	nop
 800e8c4:	20004fdc 	.word	0x20004fdc

0800e8c8 <_malloc_usable_size_r>:
 800e8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8cc:	1f18      	subs	r0, r3, #4
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	bfbc      	itt	lt
 800e8d2:	580b      	ldrlt	r3, [r1, r0]
 800e8d4:	18c0      	addlt	r0, r0, r3
 800e8d6:	4770      	bx	lr

0800e8d8 <__retarget_lock_acquire_recursive>:
 800e8d8:	4770      	bx	lr

0800e8da <__retarget_lock_release_recursive>:
 800e8da:	4770      	bx	lr

0800e8dc <_init>:
 800e8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8de:	bf00      	nop
 800e8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8e2:	bc08      	pop	{r3}
 800e8e4:	469e      	mov	lr, r3
 800e8e6:	4770      	bx	lr

0800e8e8 <_fini>:
 800e8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ea:	bf00      	nop
 800e8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ee:	bc08      	pop	{r3}
 800e8f0:	469e      	mov	lr, r3
 800e8f2:	4770      	bx	lr
