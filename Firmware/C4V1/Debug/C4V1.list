
C4V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080096cc  080096cc  000196cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009734  08009734  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009734  08009734  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009734  08009734  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800973c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  20000184  080098c0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d10  080098c0  00021d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb58  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004419  00000000  00000000  0003bd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00040128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  00041930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a4d  00000000  00000000  00042f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000203c6  00000000  00000000  0006696d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d19b9  00000000  00000000  00086d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001586ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006284  00000000  00000000  0015873c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080096b4 	.word	0x080096b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	080096b4 	.word	0x080096b4

08000218 <MX_AES_Init>:
__ALIGN_BEGIN static const uint32_t pKeyAES[4] __ALIGN_END = {
                            0x00000000,0x00000000,0x00000000,0x00000000};

/* AES init function */
void MX_AES_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <MX_AES_Init+0x48>)
 800021e:	4a11      	ldr	r2, [pc, #68]	; (8000264 <MX_AES_Init+0x4c>)
 8000220:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <MX_AES_Init+0x48>)
 8000224:	2200      	movs	r2, #0
 8000226:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_AES_Init+0x48>)
 800022a:	2200      	movs	r2, #0
 800022c:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 800022e:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <MX_AES_Init+0x48>)
 8000230:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <MX_AES_Init+0x50>)
 8000232:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_AES_Init+0x48>)
 8000236:	2200      	movs	r2, #0
 8000238:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <MX_AES_Init+0x48>)
 800023c:	2200      	movs	r2, #0
 800023e:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_AES_Init+0x48>)
 8000242:	2200      	movs	r2, #0
 8000244:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <MX_AES_Init+0x48>)
 8000248:	2200      	movs	r2, #0
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <MX_AES_Init+0x48>)
 800024e:	f000 fd00 	bl	8000c52 <HAL_CRYP_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_AES_Init+0x44>
  {
    Error_Handler();
 8000258:	f000 f922 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	200001a0 	.word	0x200001a0
 8000264:	50060000 	.word	0x50060000
 8000268:	08009714 	.word	0x08009714

0800026c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <HAL_CRYP_MspInit+0x38>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d10b      	bne.n	8000296 <HAL_CRYP_MspInit+0x2a>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <HAL_CRYP_MspInit+0x3c>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <HAL_CRYP_MspInit+0x3c>)
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_CRYP_MspInit+0x3c>)
 800028c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	50060000 	.word	0x50060000
 80002a8:	40021000 	.word	0x40021000

080002ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <MX_DMA_Init+0x50>)
 80002b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002b6:	4a11      	ldr	r2, [pc, #68]	; (80002fc <MX_DMA_Init+0x50>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6493      	str	r3, [r2, #72]	; 0x48
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <MX_DMA_Init+0x50>)
 80002c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002c2:	f003 0304 	and.w	r3, r3, #4
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_DMA_Init+0x50>)
 80002cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002ce:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <MX_DMA_Init+0x50>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6493      	str	r3, [r2, #72]	; 0x48
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_DMA_Init+0x50>)
 80002d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	200b      	movs	r0, #11
 80002e8:	f000 fc7f 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002ec:	200b      	movs	r0, #11
 80002ee:	f000 fc96 	bl	8000c1e <HAL_NVIC_EnableIRQ>

}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000316:	4b30      	ldr	r3, [pc, #192]	; (80003d8 <MX_GPIO_Init+0xd8>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a2f      	ldr	r2, [pc, #188]	; (80003d8 <MX_GPIO_Init+0xd8>)
 800031c:	f043 0320 	orr.w	r3, r3, #32
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000322:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <MX_GPIO_Init+0xd8>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	f003 0320 	and.w	r3, r3, #32
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <MX_GPIO_Init+0xd8>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <MX_GPIO_Init+0xd8>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <MX_GPIO_Init+0xd8>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <MX_GPIO_Init+0xd8>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <MX_GPIO_Init+0xd8>)
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <MX_GPIO_Init+0xd8>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1331_RST_Pin|SSD1331_CS_Pin|FLASH_CS_Pin|FRAM_CS_Pin, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f240 6109 	movw	r1, #1545	; 0x609
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f000 ffea 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_DC_GPIO_Port, SSD1331_DC_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2104      	movs	r1, #4
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f000 ffe4 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1331_RST_Pin|SSD1331_CS_Pin|FLASH_CS_Pin|FRAM_CS_Pin;
 8000378:	f240 6309 	movw	r3, #1545	; 0x609
 800037c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000386:	2303      	movs	r3, #3
 8000388:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f000 fe52 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_DC_Pin;
 8000398:	2304      	movs	r3, #4
 800039a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1331_DC_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 030c 	add.w	r3, r7, #12
 80003ac:	4619      	mov	r1, r3
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f000 fe43 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_LEFT_Pin|BUTTON_DOWN_Pin|BUTTON_OK_Pin
 80003b6:	23f8      	movs	r3, #248	; 0xf8
 80003b8:	60fb      	str	r3, [r7, #12]
                          |BUTTON_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4619      	mov	r1, r3
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0xdc>)
 80003ca:	f000 fe37 	bl	800103c <HAL_GPIO_Init>

}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000400 	.word	0x48000400

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fab5 	bl	8000952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f80f 	bl	800040a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f7ff ff88 	bl	8000300 <MX_GPIO_Init>
  MX_DMA_Init();
 80003f0:	f7ff ff5c 	bl	80002ac <MX_DMA_Init>
  MX_AES_Init();
 80003f4:	f7ff ff10 	bl	8000218 <MX_AES_Init>
  MX_RNG_Init();
 80003f8:	f000 f858 	bl	80004ac <MX_RNG_Init>
  MX_SPI1_Init();
 80003fc:	f000 f8a0 	bl	8000540 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000400:	f000 f99c 	bl	800073c <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000404:	f008 fc44 	bl	8008c90 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000408:	e7fe      	b.n	8000408 <main+0x28>

0800040a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b094      	sub	sp, #80	; 0x50
 800040e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000410:	f107 0318 	add.w	r3, r7, #24
 8000414:	2238      	movs	r2, #56	; 0x38
 8000416:	2100      	movs	r1, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f009 f943 	bl	80096a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800042c:	2000      	movs	r0, #0
 800042e:	f002 fcd3 	bl	8002dd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000432:	2321      	movs	r3, #33	; 0x21
 8000434:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800043c:	2301      	movs	r3, #1
 800043e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000440:	2302      	movs	r3, #2
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000444:	2303      	movs	r3, #3
 8000446:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000448:	2305      	movs	r3, #5
 800044a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 68;
 800044c:	2344      	movs	r3, #68	; 0x44
 800044e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000450:	2302      	movs	r3, #2
 8000452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000454:	2302      	movs	r3, #2
 8000456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0318 	add.w	r3, r7, #24
 8000460:	4618      	mov	r0, r3
 8000462:	f002 fd5d 	bl	8002f20 <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800046c:	f000 f818 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	230f      	movs	r3, #15
 8000472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000474:	2303      	movs	r3, #3
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2104      	movs	r1, #4
 8000488:	4618      	mov	r0, r3
 800048a:	f003 f861 	bl	8003550 <HAL_RCC_ClockConfig>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000494:	f000 f804 	bl	80004a0 <Error_Handler>
  }
}
 8000498:	bf00      	nop
 800049a:	3750      	adds	r7, #80	; 0x50
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_RNG_Init+0x24>)
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <MX_RNG_Init+0x28>)
 80004b4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_RNG_Init+0x24>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_RNG_Init+0x24>)
 80004be:	f003 fc67 	bl	8003d90 <HAL_RNG_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80004c8:	f7ff ffea 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000200 	.word	0x20000200
 80004d4:	50060800 	.word	0x50060800

080004d8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b098      	sub	sp, #96	; 0x60
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2250      	movs	r2, #80	; 0x50
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f009 f8db 	bl	80096a4 <memset>
  if(rngHandle->Instance==RNG)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <HAL_RNG_MspInit+0x60>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d11a      	bne.n	800052e <HAL_RNG_MspInit+0x56>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80004f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80004fe:	2300      	movs	r3, #0
 8000500:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fa06 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 8000512:	f7ff ffc5 	bl	80004a0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_RNG_MspInit+0x64>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_RNG_MspInit+0x64>)
 800051c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_RNG_MspInit+0x64>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800052e:	bf00      	nop
 8000530:	3760      	adds	r7, #96	; 0x60
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	50060800 	.word	0x50060800
 800053c:	40021000 	.word	0x40021000

08000540 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000546:	4a1c      	ldr	r2, [pc, #112]	; (80005b8 <MX_SPI1_Init+0x78>)
 8000548:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <MX_SPI1_Init+0x74>)
 800054c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000550:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <MX_SPI1_Init+0x74>)
 800055a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800055e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_SPI1_Init+0x74>)
 800056e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000572:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000576:	2220      	movs	r2, #32
 8000578:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_SPI1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_SPI1_Init+0x74>)
 800058e:	2207      	movs	r2, #7
 8000590:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_SPI1_Init+0x74>)
 800059a:	2208      	movs	r2, #8
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_SPI1_Init+0x74>)
 80005a0:	f003 fc2b 	bl	8003dfa <HAL_SPI_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005aa:	f7ff ff79 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000214 	.word	0x20000214
 80005b8:	40013000 	.word	0x40013000

080005bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a17      	ldr	r2, [pc, #92]	; (8000638 <HAL_SPI_MspInit+0x7c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d128      	bne.n	8000630 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_SPI_MspInit+0x80>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <HAL_SPI_MspInit+0x80>)
 80005e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_SPI_MspInit+0x80>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_SPI_MspInit+0x80>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <HAL_SPI_MspInit+0x80>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_SPI_MspInit+0x80>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800060e:	23e0      	movs	r3, #224	; 0xe0
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800061e:	2305      	movs	r3, #5
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f000 fd06 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40013000 	.word	0x40013000
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x44>)
 8000648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_MspInit+0x44>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6613      	str	r3, [r2, #96]	; 0x60
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x44>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x44>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_MspInit+0x44>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6593      	str	r3, [r2, #88]	; 0x58
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_MspInit+0x44>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f990 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <DMA1_Channel1_IRQHandler+0x10>)
 80006e2:	f000 fb99 	bl	8000e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200002c4 	.word	0x200002c4

080006f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <USB_LP_IRQHandler+0x10>)
 80006f6:	f000 ff42 	bl	800157e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200017fc 	.word	0x200017fc

08000704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <TIM2_IRQHandler+0x10>)
 800070a:	f003 fc78 	bl	8003ffe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000278 	.word	0x20000278

08000718 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SystemInit+0x20>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <SystemInit+0x20>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_TIM2_Init+0xb0>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_TIM2_Init+0xb0>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_TIM2_Init+0xb0>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_TIM2_Init+0xb0>)
 8000776:	f04f 32ff 	mov.w	r2, #4294967295
 800077a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_TIM2_Init+0xb0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_TIM2_Init+0xb0>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <MX_TIM2_Init+0xb0>)
 800078a:	f003 fbe1 	bl	8003f50 <HAL_TIM_PWM_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000794:	f7ff fe84 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4811      	ldr	r0, [pc, #68]	; (80007ec <MX_TIM2_Init+0xb0>)
 80007a8:	f004 fab6 	bl	8004d18 <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007b2:	f7ff fe75 	bl	80004a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	2360      	movs	r3, #96	; 0x60
 80007b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <MX_TIM2_Init+0xb0>)
 80007ce:	f003 fd95 	bl	80042fc <HAL_TIM_PWM_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007d8:	f7ff fe62 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <MX_TIM2_Init+0xb0>)
 80007de:	f000 f859 	bl	8000894 <HAL_TIM_MspPostInit>

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000278 	.word	0x20000278

080007f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000800:	d13e      	bne.n	8000880 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <HAL_TIM_PWM_MspInit+0x98>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <HAL_TIM_PWM_MspInit+0x98>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <HAL_TIM_PWM_MspInit+0x98>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <HAL_TIM_PWM_MspInit+0xa0>)
 800081e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 8000822:	2238      	movs	r2, #56	; 0x38
 8000824:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 800083a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 8000842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000846:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 8000856:	f000 fa37 	bl	8000cc8 <HAL_DMA_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000860:	f7ff fe1e 	bl	80004a0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_TIM_PWM_MspInit+0x9c>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	201c      	movs	r0, #28
 8000876:	f000 f9b8 	bl	8000bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800087a:	201c      	movs	r0, #28
 800087c:	f000 f9cf 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	200002c4 	.word	0x200002c4
 8000890:	40020008 	.word	0x40020008

08000894 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b4:	d11d      	bne.n	80008f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_TIM_MspPostInit+0x68>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_TIM_MspPostInit+0x68>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_TIM_MspPostInit+0x68>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fba5 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0b      	ldr	r4, [pc, #44]	; (800094c <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092a:	f7ff fef5 	bl	8000718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092e:	f008 fe95 	bl	800965c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000932:	f7ff fd55 	bl	80003e0 <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000944:	0800973c 	.word	0x0800973c
  ldr r2, =_sbss
 8000948:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800094c:	20001d10 	.word	0x20001d10

08000950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_2_IRQHandler>

08000952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f939 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f80e 	bl	8000984 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e001      	b.n	8000978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000974:	f7ff fe64 	bl	8000640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000978:	79fb      	ldrb	r3, [r7, #7]

}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_InitTick+0x68>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d022      	beq.n	80009de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_InitTick+0x6c>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <HAL_InitTick+0x68>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f944 	bl	8000c3a <HAL_SYSTICK_Config>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10f      	bne.n	80009d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d809      	bhi.n	80009d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	2200      	movs	r2, #0
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
 80009c6:	f000 f910 	bl	8000bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_InitTick+0x70>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e007      	b.n	80009e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e004      	b.n	80009e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e001      	b.n	80009e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_IncTick+0x1c>)
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20000324 	.word	0x20000324
 8000a18:	20000008 	.word	0x20000008

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000324 	.word	0x20000324

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff29 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff40 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff90 	bl	8000b28 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5f 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff33 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa4 	bl	8000b90 <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e02d      	b.n	8000cc0 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d106      	bne.n	8000c7e <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff faf7 	bl	800026c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8000c88:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	6851      	ldr	r1, [r2, #4]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	6892      	ldr	r2, [r2, #8]
 8000c94:	4311      	orrs	r1, r2
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6952      	ldr	r2, [r2, #20]
 8000c9a:	4311      	orrs	r1, r2
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e08d      	b.n	8000df6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <HAL_DMA_Init+0x138>)
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d80f      	bhi.n	8000d06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <HAL_DMA_Init+0x13c>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a45      	ldr	r2, [pc, #276]	; (8000e08 <HAL_DMA_Init+0x140>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	009a      	lsls	r2, r3, #2
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a42      	ldr	r2, [pc, #264]	; (8000e0c <HAL_DMA_Init+0x144>)
 8000d02:	641a      	str	r2, [r3, #64]	; 0x40
 8000d04:	e00e      	b.n	8000d24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <HAL_DMA_Init+0x148>)
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <HAL_DMA_Init+0x140>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	009a      	lsls	r2, r3, #2
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a3c      	ldr	r2, [pc, #240]	; (8000e14 <HAL_DMA_Init+0x14c>)
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2202      	movs	r2, #2
 8000d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 f8fe 	bl	8000f78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d84:	d102      	bne.n	8000d8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000da0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d010      	beq.n	8000dcc <HAL_DMA_Init+0x104>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d80c      	bhi.n	8000dcc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f91e 	bl	8000ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	e008      	b.n	8000dde <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020407 	.word	0x40020407
 8000e04:	bffdfff8 	.word	0xbffdfff8
 8000e08:	cccccccd 	.word	0xcccccccd
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	bffdfbf8 	.word	0xbffdfbf8
 8000e14:	40020400 	.word	0x40020400

08000e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	2204      	movs	r2, #4
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d026      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x7a>
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d021      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d107      	bne.n	8000e6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0204 	bic.w	r2, r2, #4
 8000e6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	2104      	movs	r1, #4
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d071      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e90:	e06c      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d02e      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d029      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020a 	bic.w	r2, r2, #10
 8000ecc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f003 021f 	and.w	r2, r3, #31
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d038      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f02:	e033      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d02a      	beq.n	8000f6e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d025      	beq.n	8000f6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 020e 	bic.w	r2, r2, #14
 8000f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f003 021f 	and.w	r2, r3, #31
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
}
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d802      	bhi.n	8000f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e001      	b.n	8000f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000f94:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3b08      	subs	r3, #8
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	009a      	lsls	r2, r3, #2
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000fc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	2201      	movs	r2, #1
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000fd2:	bf00      	nop
 8000fd4:	371c      	adds	r7, #28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40020407 	.word	0x40020407
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020820 	.word	0x40020820
 8000fec:	cccccccd 	.word	0xcccccccd
 8000ff0:	40020880 	.word	0x40020880

08000ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001016:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3b01      	subs	r3, #1
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2201      	movs	r2, #1
 8001022:	409a      	lsls	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	1000823f 	.word	0x1000823f
 8001038:	40020940 	.word	0x40020940

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800104a:	e15a      	b.n	8001302 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 814c 	beq.w	80012fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0201 	and.w	r2, r3, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80a6 	beq.w	80012fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <HAL_GPIO_Init+0x2e4>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b4:	4a5a      	ldr	r2, [pc, #360]	; (8001320 <HAL_GPIO_Init+0x2e4>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6613      	str	r3, [r2, #96]	; 0x60
 80011bc:	4b58      	ldr	r3, [pc, #352]	; (8001320 <HAL_GPIO_Init+0x2e4>)
 80011be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c8:	4a56      	ldr	r2, [pc, #344]	; (8001324 <HAL_GPIO_Init+0x2e8>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f2:	d01f      	beq.n	8001234 <HAL_GPIO_Init+0x1f8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x2ec>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d019      	beq.n	8001230 <HAL_GPIO_Init+0x1f4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4b      	ldr	r2, [pc, #300]	; (800132c <HAL_GPIO_Init+0x2f0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <HAL_GPIO_Init+0x1f0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <HAL_GPIO_Init+0x2f4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00d      	beq.n	8001228 <HAL_GPIO_Init+0x1ec>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a49      	ldr	r2, [pc, #292]	; (8001334 <HAL_GPIO_Init+0x2f8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x1e8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a48      	ldr	r2, [pc, #288]	; (8001338 <HAL_GPIO_Init+0x2fc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_GPIO_Init+0x1e4>
 800121c:	2305      	movs	r3, #5
 800121e:	e00a      	b.n	8001236 <HAL_GPIO_Init+0x1fa>
 8001220:	2306      	movs	r3, #6
 8001222:	e008      	b.n	8001236 <HAL_GPIO_Init+0x1fa>
 8001224:	2304      	movs	r3, #4
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1fa>
 8001228:	2303      	movs	r3, #3
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x1fa>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x1fa>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x1fa>
 8001234:	2300      	movs	r3, #0
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001246:	4937      	ldr	r1, [pc, #220]	; (8001324 <HAL_GPIO_Init+0x2e8>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001254:	4b39      	ldr	r3, [pc, #228]	; (800133c <HAL_GPIO_Init+0x300>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001278:	4a30      	ldr	r2, [pc, #192]	; (800133c <HAL_GPIO_Init+0x300>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800127e:	4b2f      	ldr	r3, [pc, #188]	; (800133c <HAL_GPIO_Init+0x300>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a2:	4a26      	ldr	r2, [pc, #152]	; (800133c <HAL_GPIO_Init+0x300>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_GPIO_Init+0x300>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_GPIO_Init+0x300>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_GPIO_Init+0x300>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_GPIO_Init+0x300>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f ae9d 	bne.w	800104c <HAL_GPIO_Init+0x10>
  }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	48001000 	.word	0x48001000
 8001338:	48001400 	.word	0x48001400
 800133c:	40010400 	.word	0x40010400

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800135c:	e002      	b.n	8001364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af06      	add	r7, sp, #24
 8001376:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0d7      	b.n	8001532 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f007 fe5a 	bl	8009050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fda0 	bl	8004eee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e04c      	b.n	800144e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3301      	adds	r3, #1
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b298      	uxth	r0, r3
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3336      	adds	r3, #54	; 0x36
 80013f2:	4602      	mov	r2, r0
 80013f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3303      	adds	r3, #3
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3338      	adds	r3, #56	; 0x38
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	333c      	adds	r3, #60	; 0x3c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3340      	adds	r3, #64	; 0x40
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3ad      	bcc.n	80013b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e044      	b.n	80014e8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3b5      	bcc.n	800145e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	687e      	ldr	r6, [r7, #4]
 80014fa:	466d      	mov	r5, sp
 80014fc:	f106 0410 	add.w	r4, r6, #16
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	602b      	str	r3, [r5, #0]
 8001508:	1d33      	adds	r3, r6, #4
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f003 fd09 	bl	8004f24 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f001 fc29 	bl	8002d82 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800153a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_PCD_Start+0x16>
 800154c:	2302      	movs	r3, #2
 800154e:	e012      	b.n	8001576 <HAL_PCD_Start+0x3c>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fcaf 	bl	8004ec0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f005 fec8 	bl	80072fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fecd 	bl	800732a <USB_ReadInterrupts>
 8001590:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fb26 	bl	8001bee <PCD_EP_ISR_Handler>

    return;
 80015a2:	e110      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d013      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f007 fdd3 	bl	8009172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015cc:	2100      	movs	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8fc 	bl	80017cc <HAL_PCD_SetAddress>

    return;
 80015d4:	e0f7      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015f2:	b292      	uxth	r2, r2
 80015f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015f8:	e0e5      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00c      	beq.n	800161e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160c:	b29a      	uxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001616:	b292      	uxth	r2, r2
 8001618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800161c:	e0d3      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d034      	beq.n	8001692 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0204 	bic.w	r2, r2, #4
 800163a:	b292      	uxth	r2, r2
 800163c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001648:	b29a      	uxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0208 	bic.w	r2, r2, #8
 8001652:	b292      	uxth	r2, r2
 8001654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d107      	bne.n	8001672 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800166a:	2100      	movs	r1, #0
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f007 ff75 	bl	800955c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f007 fdb6 	bl	80091e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001680:	b29a      	uxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800168a:	b292      	uxth	r2, r2
 800168c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001690:	e099      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001698:	2b00      	cmp	r3, #0
 800169a:	d027      	beq.n	80016ec <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0208 	orr.w	r2, r2, #8
 80016ae:	b292      	uxth	r2, r2
 80016b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016bc:	b29a      	uxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c6:	b292      	uxth	r2, r2
 80016c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0204 	orr.w	r2, r2, #4
 80016de:	b292      	uxth	r2, r2
 80016e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f007 fd63 	bl	80091b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016ea:	e06c      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d040      	beq.n	8001778 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fe:	b29a      	uxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001708:	b292      	uxth	r2, r2
 800170a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d12b      	bne.n	8001770 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001720:	b29a      	uxth	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0204 	orr.w	r2, r2, #4
 800172a:	b292      	uxth	r2, r2
 800172c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0208 	orr.w	r2, r2, #8
 8001742:	b292      	uxth	r2, r2
 8001744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001758:	b29b      	uxth	r3, r3
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001766:	2101      	movs	r1, #1
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f007 fef7 	bl	800955c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800176e:	e02a      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f007 fd1d 	bl	80091b0 <HAL_PCD_SuspendCallback>
    return;
 8001776:	e026      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00f      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001794:	b292      	uxth	r2, r2
 8001796:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f007 fcdb 	bl	8009156 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017a0:	e011      	b.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00c      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017be:	b292      	uxth	r2, r2
 80017c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017c4:	bf00      	nop
  }
}
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_PCD_SetAddress+0x1a>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e013      	b.n	800180e <HAL_PCD_SetAddress+0x42>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f005 fd68 	bl	80072d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	4608      	mov	r0, r1
 8001820:	4611      	mov	r1, r2
 8001822:	461a      	mov	r2, r3
 8001824:	4603      	mov	r3, r0
 8001826:	70fb      	strb	r3, [r7, #3]
 8001828:	460b      	mov	r3, r1
 800182a:	803b      	strh	r3, [r7, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001838:	2b00      	cmp	r3, #0
 800183a:	da0e      	bge.n	800185a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	705a      	strb	r2, [r3, #1]
 8001858:	e00e      	b.n	8001878 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	f003 0207 	and.w	r2, r3, #7
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	b2da      	uxtb	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001884:	883a      	ldrh	r2, [r7, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	78ba      	ldrb	r2, [r7, #2]
 800188e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018a2:	78bb      	ldrb	r3, [r7, #2]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d102      	bne.n	80018ae <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_PCD_EP_Open+0xa6>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e00e      	b.n	80018da <HAL_PCD_EP_Open+0xc4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fb4c 	bl	8004f68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018d8:	7afb      	ldrb	r3, [r7, #11]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da0e      	bge.n	8001914 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	705a      	strb	r2, [r3, #1]
 8001912:	e00e      	b.n	8001932 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 0207 	and.w	r2, r3, #7
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_PCD_EP_Close+0x6a>
 8001948:	2302      	movs	r3, #2
 800194a:	e00e      	b.n	800196a <HAL_PCD_EP_Close+0x88>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fe98 	bl	8005690 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	460b      	mov	r3, r1
 8001980:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	f003 0207 	and.w	r2, r3, #7
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2200      	movs	r2, #0
 80019aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019be:	7afb      	ldrb	r3, [r7, #11]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d106      	bne.n	80019d6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6979      	ldr	r1, [r7, #20]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 f84b 	bl	8005a6a <USB_EPStartXfer>
 80019d4:	e005      	b.n	80019e2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 f844 	bl	8005a6a <USB_EPStartXfer>
  }

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f003 0207 	and.w	r2, r3, #7
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2201      	movs	r2, #1
 8001a66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6979      	ldr	r1, [r7, #20]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fff0 	bl	8005a6a <USB_EPStartXfer>
 8001a8a:	e005      	b.n	8001a98 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 ffe9 	bl	8005a6a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	f003 0207 	and.w	r2, r3, #7
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d901      	bls.n	8001ac0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e03e      	b.n	8001b3e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da0e      	bge.n	8001ae6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	705a      	strb	r2, [r3, #1]
 8001ae4:	e00c      	b.n	8001b00 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_EP_SetStall+0x7e>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e00e      	b.n	8001b3e <HAL_PCD_EP_SetStall+0x9c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f005 fad1 	bl	80070d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f003 020f 	and.w	r2, r3, #15
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d901      	bls.n	8001b64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e040      	b.n	8001be6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da0e      	bge.n	8001b8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	705a      	strb	r2, [r3, #1]
 8001b88:	e00e      	b.n	8001ba8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	f003 0207 	and.w	r2, r3, #7
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_EP_ClrStall+0x82>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e00e      	b.n	8001be6 <HAL_PCD_EP_ClrStall+0xa0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 face 	bl	8007178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b096      	sub	sp, #88	; 0x58
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bf6:	e39c      	b.n	8002332 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001c12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 815e 	bne.w	8001ed8 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d150      	bne.n	8001cca <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c38:	81fb      	strh	r3, [r7, #14]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3328      	adds	r3, #40	; 0x28
 8001c50:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	441a      	add	r2, r3
 8001c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c86:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f007 fa49 	bl	8009122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 834a 	beq.w	8002332 <PCD_EP_ISR_Handler+0x744>
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 8345 	bne.w	8002332 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cc8:	e333      	b.n	8002332 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001cdc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d032      	beq.n	8001d4e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d20:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f005 fb53 	bl	80073ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d34:	4013      	ands	r3, r2
 8001d36:	823b      	strh	r3, [r7, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	8a3a      	ldrh	r2, [r7, #16]
 8001d3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d42:	b292      	uxth	r2, r2
 8001d44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f007 f9be 	bl	80090c8 <HAL_PCD_SetupStageCallback>
 8001d4c:	e2f1      	b.n	8002332 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d4e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f280 82ed 	bge.w	8002332 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d64:	4013      	ands	r3, r2
 8001d66:	83fb      	strh	r3, [r7, #30]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	8bfa      	ldrh	r2, [r7, #30]
 8001d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d72:	b292      	uxth	r2, r2
 8001d74:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d9c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d019      	beq.n	8001dda <PCD_EP_ISR_Handler+0x1ec>
 8001da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d015      	beq.n	8001dda <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db4:	6959      	ldr	r1, [r3, #20]
 8001db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f005 fb05 	bl	80073ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	441a      	add	r2, r3
 8001dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f007 f989 	bl	80090ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 82a3 	bne.w	8002332 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4413      	add	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b3e      	cmp	r3, #62	; 0x3e
 8001e12:	d918      	bls.n	8001e46 <PCD_EP_ISR_Handler+0x258>
 8001e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <PCD_EP_ISR_Handler+0x240>
 8001e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	029b      	lsls	r3, r3, #10
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	e029      	b.n	8001e9a <PCD_EP_ISR_Handler+0x2ac>
 8001e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d112      	bne.n	8001e74 <PCD_EP_ISR_Handler+0x286>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	e012      	b.n	8001e9a <PCD_EP_ISR_Handler+0x2ac>
 8001e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <PCD_EP_ISR_Handler+0x2a0>
 8001e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eaa:	827b      	strh	r3, [r7, #18]
 8001eac:	8a7b      	ldrh	r3, [r7, #18]
 8001eae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001eb2:	827b      	strh	r3, [r7, #18]
 8001eb4:	8a7b      	ldrh	r3, [r7, #18]
 8001eb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eba:	827b      	strh	r3, [r7, #18]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	8a7b      	ldrh	r3, [r7, #18]
 8001ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8013      	strh	r3, [r2, #0]
 8001ed6:	e22c      	b.n	8002332 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eec:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f280 80f6 	bge.w	80020e2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f2c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f44:	7b1b      	ldrb	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d123      	bne.n	8001f92 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001f72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 808e 	beq.w	8002098 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f82:	6959      	ldr	r1, [r3, #20]
 8001f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f86:	88da      	ldrh	r2, [r3, #6]
 8001f88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f8c:	f005 fa1f 	bl	80073ce <USB_ReadPMA>
 8001f90:	e082      	b.n	8002098 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f94:	78db      	ldrb	r3, [r3, #3]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d10a      	bne.n	8001fb0 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f9a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f9d3 	bl	800234e <HAL_PCD_EP_DB_Receive>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001fae:	e073      	b.n	8002098 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	441a      	add	r2, r3
 8001fdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d022      	beq.n	8002054 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4413      	add	r3, r2
 8002028:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002032:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002036:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d02c      	beq.n	8002098 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002044:	6959      	ldr	r1, [r3, #20]
 8002046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002048:	891a      	ldrh	r2, [r3, #8]
 800204a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800204e:	f005 f9be 	bl	80073ce <USB_ReadPMA>
 8002052:	e021      	b.n	8002098 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002078:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800207c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208a:	6959      	ldr	r1, [r3, #20]
 800208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208e:	895a      	ldrh	r2, [r3, #10]
 8002090:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002094:	f005 f99b 	bl	80073ce <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	69da      	ldr	r2, [r3, #28]
 800209c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020a0:	441a      	add	r2, r3
 80020a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020ae:	441a      	add	r2, r3
 80020b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <PCD_EP_ISR_Handler+0x4da>
 80020bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80020c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d206      	bcs.n	80020d6 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f007 f80c 	bl	80090ec <HAL_PCD_DataOutStageCallback>
 80020d4:	e005      	b.n	80020e2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fcc4 	bl	8005a6a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8121 	beq.w	8002332 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80020f0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800211a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	441a      	add	r2, r3
 8002130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213c:	b29b      	uxth	r3, r3
 800213e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002142:	78db      	ldrb	r3, [r3, #3]
 8002144:	2b02      	cmp	r3, #2
 8002146:	f000 80a2 	beq.w	800228e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800214a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002152:	7b1b      	ldrb	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8093 	beq.w	8002280 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800215a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d046      	beq.n	80021f4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d126      	bne.n	80021bc <PCD_EP_ISR_Handler+0x5ce>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	4413      	add	r3, r2
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	00da      	lsls	r2, r3, #3
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	4413      	add	r3, r2
 8002190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002194:	623b      	str	r3, [r7, #32]
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	e061      	b.n	8002280 <PCD_EP_ISR_Handler+0x692>
 80021bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d15d      	bne.n	8002280 <PCD_EP_ISR_Handler+0x692>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	4413      	add	r3, r2
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	00da      	lsls	r2, r3, #3
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	4413      	add	r3, r2
 80021e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	e045      	b.n	8002280 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d126      	bne.n	8002250 <PCD_EP_ISR_Handler+0x662>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002210:	b29b      	uxth	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	4413      	add	r3, r2
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
 800221a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	00da      	lsls	r2, r3, #3
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	4413      	add	r3, r2
 8002224:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002234:	b29a      	uxth	r2, r3
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002248:	b29a      	uxth	r2, r3
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	801a      	strh	r2, [r3, #0]
 800224e:	e017      	b.n	8002280 <PCD_EP_ISR_Handler+0x692>
 8002250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d113      	bne.n	8002280 <PCD_EP_ISR_Handler+0x692>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002266:	4413      	add	r3, r2
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800226a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00da      	lsls	r2, r3, #3
 8002270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002272:	4413      	add	r3, r2
 8002274:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002278:	63bb      	str	r3, [r7, #56]	; 0x38
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	2200      	movs	r2, #0
 800227e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f006 ff4b 	bl	8009122 <HAL_PCD_DataInStageCallback>
 800228c:	e051      	b.n	8002332 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800228e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d144      	bne.n	8002324 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80022c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d907      	bls.n	80022de <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80022ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022d6:	1ad2      	subs	r2, r2, r3
 80022d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022da:	619a      	str	r2, [r3, #24]
 80022dc:	e002      	b.n	80022e4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80022de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80022e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f006 ff15 	bl	8009122 <HAL_PCD_DataInStageCallback>
 80022f8:	e01b      	b.n	8002332 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80022fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002302:	441a      	add	r2, r3
 8002304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002306:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002310:	441a      	add	r2, r3
 8002312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002314:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fba4 	bl	8005a6a <USB_EPStartXfer>
 8002322:	e006      	b.n	8002332 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002324:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002328:	461a      	mov	r2, r3
 800232a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f917 	bl	8002560 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800233a:	b29b      	uxth	r3, r3
 800233c:	b21b      	sxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	f6ff ac5a 	blt.w	8001bf8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3758      	adds	r7, #88	; 0x58
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b088      	sub	sp, #32
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	4613      	mov	r3, r2
 800235a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d07c      	beq.n	8002460 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	4413      	add	r3, r2
 8002380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	8b7b      	ldrh	r3, [r7, #26]
 8002392:	429a      	cmp	r2, r3
 8002394:	d306      	bcc.n	80023a4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	8b7b      	ldrh	r3, [r7, #26]
 800239c:	1ad2      	subs	r2, r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	619a      	str	r2, [r3, #24]
 80023a2:	e002      	b.n	80023aa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d123      	bne.n	80023fa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023cc:	833b      	strh	r3, [r7, #24]
 80023ce:	8b3b      	ldrh	r3, [r7, #24]
 80023d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023d4:	833b      	strh	r3, [r7, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	441a      	add	r2, r3
 80023e4:	8b3b      	ldrh	r3, [r7, #24]
 80023e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01f      	beq.n	8002444 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	82fb      	strh	r3, [r7, #22]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	441a      	add	r2, r3
 800242e:	8afb      	ldrh	r3, [r7, #22]
 8002430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002440:	b29b      	uxth	r3, r3
 8002442:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002444:	8b7b      	ldrh	r3, [r7, #26]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8085 	beq.w	8002556 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6959      	ldr	r1, [r3, #20]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	891a      	ldrh	r2, [r3, #8]
 8002458:	8b7b      	ldrh	r3, [r7, #26]
 800245a:	f004 ffb8 	bl	80073ce <USB_ReadPMA>
 800245e:	e07a      	b.n	8002556 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	4413      	add	r3, r2
 800247a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002484:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	8b7b      	ldrh	r3, [r7, #26]
 800248c:	429a      	cmp	r2, r3
 800248e:	d306      	bcc.n	800249e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	8b7b      	ldrh	r3, [r7, #26]
 8002496:	1ad2      	subs	r2, r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	619a      	str	r2, [r3, #24]
 800249c:	e002      	b.n	80024a4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d123      	bne.n	80024f4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	83fb      	strh	r3, [r7, #30]
 80024c8:	8bfb      	ldrh	r3, [r7, #30]
 80024ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024ce:	83fb      	strh	r3, [r7, #30]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	441a      	add	r2, r3
 80024de:	8bfb      	ldrh	r3, [r7, #30]
 80024e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11f      	bne.n	800253e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002518:	83bb      	strh	r3, [r7, #28]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	441a      	add	r2, r3
 8002528:	8bbb      	ldrh	r3, [r7, #28]
 800252a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800252e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800253a:	b29b      	uxth	r3, r3
 800253c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800253e:	8b7b      	ldrh	r3, [r7, #26]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6959      	ldr	r1, [r3, #20]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	895a      	ldrh	r2, [r3, #10]
 8002550:	8b7b      	ldrh	r3, [r7, #26]
 8002552:	f004 ff3c 	bl	80073ce <USB_ReadPMA>
    }
  }

  return count;
 8002556:	8b7b      	ldrh	r3, [r7, #26]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0a2      	sub	sp, #136	; 0x88
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 81c5 	beq.w	8002904 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4413      	add	r3, r2
 8002594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d907      	bls.n	80025be <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	619a      	str	r2, [r3, #24]
 80025bc:	e002      	b.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f040 80b9 	bne.w	8002740 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	785b      	ldrb	r3, [r3, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d126      	bne.n	8002624 <HAL_PCD_EP_DB_Transmit+0xc4>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	4413      	add	r3, r2
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	00da      	lsls	r2, r3, #3
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	4413      	add	r3, r2
 80025f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002608:	b29a      	uxth	r2, r3
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800261c:	b29a      	uxth	r2, r3
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	e01a      	b.n	800265a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	785b      	ldrb	r3, [r3, #1]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d116      	bne.n	800265a <HAL_PCD_EP_DB_Transmit+0xfa>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	4413      	add	r3, r2
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	00da      	lsls	r2, r3, #3
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	4413      	add	r3, r2
 800264e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	2200      	movs	r2, #0
 8002658:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d126      	bne.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x156>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	00da      	lsls	r2, r3, #3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4413      	add	r3, r2
 800268a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800269a:	b29a      	uxth	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	801a      	strh	r2, [r3, #0]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e017      	b.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d113      	bne.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	4413      	add	r3, r2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00da      	lsls	r2, r3, #3
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	4413      	add	r3, r2
 80026da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2200      	movs	r2, #0
 80026e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f006 fd18 	bl	8009122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 82d2 	beq.w	8002ca2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002718:	827b      	strh	r3, [r7, #18]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	8a7b      	ldrh	r3, [r7, #18]
 800272a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273a:	b29b      	uxth	r3, r3
 800273c:	8013      	strh	r3, [r2, #0]
 800273e:	e2b0      	b.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d021      	beq.n	800278e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800277a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002794:	2b01      	cmp	r3, #1
 8002796:	f040 8284 	bne.w	8002ca2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a2:	441a      	add	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027b0:	441a      	add	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6a1a      	ldr	r2, [r3, #32]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d309      	bcc.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6a1a      	ldr	r2, [r3, #32]
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	621a      	str	r2, [r3, #32]
 80027d4:	e015      	b.n	8002802 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80027de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027ec:	e009      	b.n	8002802 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2200      	movs	r2, #0
 8002800:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d155      	bne.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x356>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	4413      	add	r3, r2
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	00da      	lsls	r2, r3, #3
 8002828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282a:	4413      	add	r3, r2
 800282c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
 8002832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002834:	2b3e      	cmp	r3, #62	; 0x3e
 8002836:	d916      	bls.n	8002866 <HAL_PCD_EP_DB_Transmit+0x306>
 8002838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	64bb      	str	r3, [r7, #72]	; 0x48
 800283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284a:	3b01      	subs	r3, #1
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
 800284e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002850:	b29b      	uxth	r3, r3
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	b29b      	uxth	r3, r3
 8002856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285e:	b29a      	uxth	r2, r3
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	e043      	b.n	80028ee <HAL_PCD_EP_DB_Transmit+0x38e>
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	2b00      	cmp	r3, #0
 800286a:	d112      	bne.n	8002892 <HAL_PCD_EP_DB_Transmit+0x332>
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002876:	b29a      	uxth	r2, r3
 8002878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800288a:	b29a      	uxth	r2, r3
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e02d      	b.n	80028ee <HAL_PCD_EP_DB_Transmit+0x38e>
 8002892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
 8002898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x348>
 80028a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a4:	3301      	adds	r3, #1
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e01b      	b.n	80028ee <HAL_PCD_EP_DB_Transmit+0x38e>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d117      	bne.n	80028ee <HAL_PCD_EP_DB_Transmit+0x38e>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d2:	4413      	add	r3, r2
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	00da      	lsls	r2, r3, #3
 80028dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028de:	4413      	add	r3, r2
 80028e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6959      	ldr	r1, [r3, #20]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	891a      	ldrh	r2, [r3, #8]
 80028fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f004 fd24 	bl	800734a <USB_WritePMA>
 8002902:	e1ce      	b.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4413      	add	r3, r2
 800291e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002928:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002934:	429a      	cmp	r2, r3
 8002936:	d307      	bcc.n	8002948 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002940:	1ad2      	subs	r2, r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	619a      	str	r2, [r3, #24]
 8002946:	e002      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80c4 	bne.w	8002ae0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d126      	bne.n	80029ae <HAL_PCD_EP_DB_Transmit+0x44e>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	66bb      	str	r3, [r7, #104]	; 0x68
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002974:	4413      	add	r3, r2
 8002976:	66bb      	str	r3, [r7, #104]	; 0x68
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00da      	lsls	r2, r3, #3
 800297e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002980:	4413      	add	r3, r2
 8002982:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002986:	667b      	str	r3, [r7, #100]	; 0x64
 8002988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002992:	b29a      	uxth	r2, r3
 8002994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029aa:	801a      	strh	r2, [r3, #0]
 80029ac:	e01a      	b.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x484>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d116      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x484>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	673b      	str	r3, [r7, #112]	; 0x70
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ca:	4413      	add	r3, r2
 80029cc:	673b      	str	r3, [r7, #112]	; 0x70
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	00da      	lsls	r2, r3, #3
 80029d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d6:	4413      	add	r3, r2
 80029d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e0:	2200      	movs	r2, #0
 80029e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d12f      	bne.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	00da      	lsls	r2, r3, #3
 8002a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	e017      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x522>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d113      	bne.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x522>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a68:	4413      	add	r3, r2
 8002a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	00da      	lsls	r2, r3, #3
 8002a72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a74:	4413      	add	r3, r2
 8002a76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7e:	2200      	movs	r2, #0
 8002a80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f006 fb4a 	bl	8009122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 8104 	bne.w	8002ca2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8013      	strh	r3, [r2, #0]
 8002ade:	e0e0      	b.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d121      	bne.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 80b4 	bne.w	8002ca2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b42:	441a      	add	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b50:	441a      	add	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d309      	bcc.n	8002b76 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6e:	1ad2      	subs	r2, r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	621a      	str	r2, [r3, #32]
 8002b74:	e015      	b.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b8c:	e009      	b.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d155      	bne.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc4:	4413      	add	r3, r2
 8002bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	00da      	lsls	r2, r3, #3
 8002bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bda:	2b3e      	cmp	r3, #62	; 0x3e
 8002bdc:	d916      	bls.n	8002c0c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	677b      	str	r3, [r7, #116]	; 0x74
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x694>
 8002bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	677b      	str	r3, [r7, #116]	; 0x74
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	e040      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d112      	bne.n	8002c38 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c20:	801a      	strh	r2, [r3, #0]
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	e02a      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	677b      	str	r3, [r7, #116]	; 0x74
 8002c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	029b      	lsls	r3, r3, #10
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	e018      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d114      	bne.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c72:	4413      	add	r3, r2
 8002c74:	663b      	str	r3, [r7, #96]	; 0x60
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00da      	lsls	r2, r3, #3
 8002c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c7e:	4413      	add	r3, r2
 8002c80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6959      	ldr	r1, [r3, #20]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	895a      	ldrh	r2, [r3, #10]
 8002c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f004 fb54 	bl	800734a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cbc:	823b      	strh	r3, [r7, #16]
 8002cbe:	8a3b      	ldrh	r3, [r7, #16]
 8002cc0:	f083 0310 	eor.w	r3, r3, #16
 8002cc4:	823b      	strh	r3, [r7, #16]
 8002cc6:	8a3b      	ldrh	r3, [r7, #16]
 8002cc8:	f083 0320 	eor.w	r3, r3, #32
 8002ccc:	823b      	strh	r3, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	441a      	add	r2, r3
 8002cdc:	8a3b      	ldrh	r3, [r7, #16]
 8002cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3788      	adds	r7, #136	; 0x88
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e009      	b.n	8002d46 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d32:	897a      	ldrh	r2, [r7, #10]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	80da      	strh	r2, [r3, #6]
 8002d5a:	e00b      	b.n	8002d74 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d141      	bne.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d131      	bne.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfa:	4a46      	ldr	r2, [pc, #280]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e04:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0c:	4a41      	ldr	r2, [pc, #260]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e14:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2232      	movs	r2, #50	; 0x32
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2a:	e002      	b.n	8002e32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d102      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f2      	bne.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e46:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d158      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e057      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5e:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e68:	e04d      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d141      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d131      	bne.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2232      	movs	r2, #50	; 0x32
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	0c9b      	lsrs	r3, r3, #18
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb6:	e002      	b.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d102      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f2      	bne.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	d112      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e011      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ef4:	e007      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40007000 	.word	0x40007000
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e306      	b.n	8003540 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d075      	beq.n	800302a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4b97      	ldr	r3, [pc, #604]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4b94      	ldr	r3, [pc, #592]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3e>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_OscConfig+0x44>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d10b      	bne.n	8002f7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	4b8d      	ldr	r3, [pc, #564]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d05b      	beq.n	8003028 <HAL_RCC_OscConfig+0x108>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d157      	bne.n	8003028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e2e1      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x74>
 8002f86:	4b85      	ldr	r3, [pc, #532]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a84      	ldr	r2, [pc, #528]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xb0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x98>
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b7c      	ldr	r3, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7b      	ldr	r2, [pc, #492]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xb0>
 8002fb8:	4b78      	ldr	r3, [pc, #480]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a77      	ldr	r2, [pc, #476]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a74      	ldr	r2, [pc, #464]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fd fd20 	bl	8000a1c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fd fd1c 	bl	8000a1c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e2a6      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff2:	4b6a      	ldr	r3, [pc, #424]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xc0>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fd0c 	bl	8000a1c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fd fd08 	bl	8000a1c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e292      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301a:	4b60      	ldr	r3, [pc, #384]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0xe8>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003036:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003040:	4b56      	ldr	r3, [pc, #344]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d102      	bne.n	8003056 <HAL_RCC_OscConfig+0x136>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d002      	beq.n	800305c <HAL_RCC_OscConfig+0x13c>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d11f      	bne.n	800309c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305c:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_OscConfig+0x154>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e265      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b49      	ldr	r3, [pc, #292]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	4946      	ldr	r1, [pc, #280]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003088:	4b45      	ldr	r3, [pc, #276]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fc79 	bl	8000984 <HAL_InitTick>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d043      	beq.n	8003120 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e251      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3c      	ldr	r2, [pc, #240]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd fcb4 	bl	8000a1c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fd fcb0 	bl	8000a1c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e23a      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	492d      	ldr	r1, [pc, #180]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
 80030ea:	e01a      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ec:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 80030f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fd fc90 	bl	8000a1c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fd fc8c 	bl	8000a1c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e216      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1e0>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d041      	beq.n	80031b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01c      	beq.n	8003170 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003146:	f7fd fc69 	bl	8000a1c <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314e:	f7fd fc65 	bl	8000a1c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1ef      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003160:	4b0e      	ldr	r3, [pc, #56]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ef      	beq.n	800314e <HAL_RCC_OscConfig+0x22e>
 800316e:	e020      	b.n	80031b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_RCC_OscConfig+0x27c>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fd fc4c 	bl	8000a1c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003186:	e00d      	b.n	80031a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003188:	f7fd fc48 	bl	8000a1c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d906      	bls.n	80031a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1d2      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a4:	4b8c      	ldr	r3, [pc, #560]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ea      	bne.n	8003188 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a6 	beq.w	800330c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031c4:	4b84      	ldr	r3, [pc, #528]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2b4>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x2b6>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	4a7e      	ldr	r2, [pc, #504]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6593      	str	r3, [r2, #88]	; 0x58
 80031e6:	4b7c      	ldr	r3, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031f2:	2301      	movs	r3, #1
 80031f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	4b79      	ldr	r3, [pc, #484]	; (80033dc <HAL_RCC_OscConfig+0x4bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d118      	bne.n	8003234 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x4bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a75      	ldr	r2, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x4bc>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fd fc05 	bl	8000a1c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fd fc01 	bl	8000a1c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e18b      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003228:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x4bc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_RCC_OscConfig+0x32e>
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324c:	e024      	b.n	8003298 <HAL_RCC_OscConfig+0x378>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d110      	bne.n	8003278 <HAL_RCC_OscConfig+0x358>
 8003256:	4b60      	ldr	r3, [pc, #384]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	4a5e      	ldr	r2, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003266:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	4a5a      	ldr	r2, [pc, #360]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	e00f      	b.n	8003298 <HAL_RCC_OscConfig+0x378>
 8003278:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	4a56      	ldr	r2, [pc, #344]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d016      	beq.n	80032ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fd fbbc 	bl	8000a1c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fd fbb8 	bl	8000a1c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e140      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ed      	beq.n	80032a8 <HAL_RCC_OscConfig+0x388>
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fd fba5 	bl	8000a1c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd fba1 	bl	8000a1c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e129      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ec:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ed      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03c      	beq.n	8003392 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003326:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fd fb74 	bl	8000a1c <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003338:	f7fd fb70 	bl	8000a1c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0fa      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800334c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ef      	beq.n	8003338 <HAL_RCC_OscConfig+0x418>
 8003358:	e01b      	b.n	8003392 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800335c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fd fb57 	bl	8000a1c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003372:	f7fd fb53 	bl	8000a1c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0dd      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ef      	bne.n	8003372 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80d1 	beq.w	800353e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b0c      	cmp	r3, #12
 80033a6:	f000 808b 	beq.w	80034c0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d15e      	bne.n	8003470 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd fb2d 	bl	8000a1c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c4:	e00c      	b.n	80033e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd fb29 	bl	8000a1c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d905      	bls.n	80033e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0b3      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e0:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ec      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	4b56      	ldr	r3, [pc, #344]	; (800354c <HAL_RCC_OscConfig+0x62c>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6a11      	ldr	r1, [r2, #32]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033fc:	3a01      	subs	r2, #1
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	4311      	orrs	r1, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003406:	0212      	lsls	r2, r2, #8
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800340e:	0852      	lsrs	r2, r2, #1
 8003410:	3a01      	subs	r2, #1
 8003412:	0552      	lsls	r2, r2, #21
 8003414:	4311      	orrs	r1, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800341a:	0852      	lsrs	r2, r2, #1
 800341c:	3a01      	subs	r2, #1
 800341e:	0652      	lsls	r2, r2, #25
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003426:	06d2      	lsls	r2, r2, #27
 8003428:	430a      	orrs	r2, r1
 800342a:	4947      	ldr	r1, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 800342c:	4313      	orrs	r3, r2
 800342e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003430:	4b45      	ldr	r3, [pc, #276]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a44      	ldr	r2, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a41      	ldr	r2, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003446:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd fae8 	bl	8000a1c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd fae4 	bl	8000a1c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e06e      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x530>
 800346e:	e066      	b.n	800353e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a34      	ldr	r2, [pc, #208]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800347c:	4b32      	ldr	r3, [pc, #200]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a31      	ldr	r2, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003488:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 800348e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fac0 	bl	8000a1c <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd fabc 	bl	8000a1c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e046      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x580>
 80034be:	e03e      	b.n	800353e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e039      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d12c      	bne.n	800353a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	3b01      	subs	r3, #1
 80034ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d123      	bne.n	800353a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d11b      	bne.n	800353a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d113      	bne.n	800353a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	3b01      	subs	r3, #1
 8003520:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d109      	bne.n	800353a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	019f800c 	.word	0x019f800c

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e11e      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b91      	ldr	r3, [pc, #580]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d910      	bls.n	8003598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b8e      	ldr	r3, [pc, #568]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 020f 	bic.w	r2, r3, #15
 800357e:	498c      	ldr	r1, [pc, #560]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b8a      	ldr	r3, [pc, #552]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e106      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d073      	beq.n	800368c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d129      	bne.n	8003600 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0f4      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035bc:	f000 f966 	bl	800388c <RCC_GetSysClockFreqFromPLLSource>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4a7c      	ldr	r2, [pc, #496]	; (80037b8 <HAL_RCC_ClockConfig+0x268>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d93f      	bls.n	800364a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ca:	4b7a      	ldr	r3, [pc, #488]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d033      	beq.n	800364a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d12f      	bne.n	800364a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035ea:	4b72      	ldr	r3, [pc, #456]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f2:	4a70      	ldr	r2, [pc, #448]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	e024      	b.n	800364a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d107      	bne.n	8003618 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003608:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0c6      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003618:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0be      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003628:	f000 f8ce 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800362c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4a61      	ldr	r2, [pc, #388]	; (80037b8 <HAL_RCC_ClockConfig+0x268>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d909      	bls.n	800364a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363e:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800364a:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4957      	ldr	r1, [pc, #348]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fd f9de 	bl	8000a1c <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	e00a      	b.n	800367a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003664:	f7fd f9da 	bl	8000a1c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e095      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 020c 	and.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1eb      	bne.n	8003664 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036bc:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036c4:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4936      	ldr	r1, [pc, #216]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
 80036de:	e008      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b80      	cmp	r3, #128	; 0x80
 80036e4:	d105      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036e6:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f2:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d21d      	bcs.n	800373c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 020f 	bic.w	r2, r3, #15
 8003708:	4929      	ldr	r1, [pc, #164]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003710:	f7fd f984 	bl	8000a1c <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd f980 	bl	8000a1c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e03b      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d1ed      	bne.n	8003718 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4917      	ldr	r1, [pc, #92]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490f      	ldr	r1, [pc, #60]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800377a:	f000 f825 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490c      	ldr	r1, [pc, #48]	; (80037bc <HAL_RCC_ClockConfig+0x26c>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <HAL_RCC_ClockConfig+0x270>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd f8f0 	bl	8000984 <HAL_InitTick>
 80037a4:	4603      	mov	r3, r0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
 80037b8:	04c4b400 	.word	0x04c4b400
 80037bc:	08009724 	.word	0x08009724
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037ce:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037da:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e047      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037ec:	4b26      	ldr	r3, [pc, #152]	; (8003888 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	e03e      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037f2:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d136      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381c:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <HAL_RCC_GetSysClockFreq+0xc0>)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003826:	68d2      	ldr	r2, [r2, #12]
 8003828:	0a12      	lsrs	r2, r2, #8
 800382a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	617b      	str	r3, [r7, #20]
      break;
 8003834:	e00c      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4a10      	ldr	r2, [pc, #64]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	0a12      	lsrs	r2, r2, #8
 8003844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
      break;
 800384e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0e5b      	lsrs	r3, r3, #25
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	e001      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003870:	693b      	ldr	r3, [r7, #16]
}
 8003872:	4618      	mov	r0, r3
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	00f42400 	.word	0x00f42400
 8003888:	017d7840 	.word	0x017d7840

0800388c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d10c      	bne.n	80038ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038ba:	68d2      	ldr	r2, [r2, #12]
 80038bc:	0a12      	lsrs	r2, r2, #8
 80038be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]
    break;
 80038c8:	e00c      	b.n	80038e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	0a12      	lsrs	r2, r2, #8
 80038d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
    break;
 80038e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0e5b      	lsrs	r3, r3, #25
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	3301      	adds	r3, #1
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80038fe:	687b      	ldr	r3, [r7, #4]
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40021000 	.word	0x40021000
 8003910:	017d7840 	.word	0x017d7840
 8003914:	00f42400 	.word	0x00f42400

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003920:	2300      	movs	r3, #0
 8003922:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003924:	2300      	movs	r3, #0
 8003926:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8098 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393a:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	6593      	str	r3, [r2, #88]	; 0x58
 8003952:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395e:	2301      	movs	r3, #1
 8003960:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003962:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800396e:	f7fd f855 	bl	8000a1c <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003974:	e009      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003976:	f7fd f851 	bl	8000a1c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d902      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	74fb      	strb	r3, [r7, #19]
        break;
 8003988:	e005      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ef      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d159      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800399c:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d019      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd f811 	bl	8000a1c <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fc:	e00b      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd f80d 	bl	8000a1c <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d902      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	74fb      	strb	r3, [r7, #19]
            break;
 8003a14:	e006      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ec      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	4903      	ldr	r1, [pc, #12]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	74bb      	strb	r3, [r7, #18]
 8003a46:	e005      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a54:	7c7b      	ldrb	r3, [r7, #17]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5a:	4ba7      	ldr	r3, [pc, #668]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	4aa6      	ldr	r2, [pc, #664]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a72:	4ba1      	ldr	r3, [pc, #644]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 0203 	bic.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	499d      	ldr	r1, [pc, #628]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a94:	4b98      	ldr	r3, [pc, #608]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f023 020c 	bic.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4995      	ldr	r1, [pc, #596]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ab6:	4b90      	ldr	r3, [pc, #576]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	498c      	ldr	r1, [pc, #560]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ad8:	4b87      	ldr	r3, [pc, #540]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	4984      	ldr	r1, [pc, #528]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003afa:	4b7f      	ldr	r3, [pc, #508]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	497b      	ldr	r1, [pc, #492]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b1c:	4b76      	ldr	r3, [pc, #472]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	4973      	ldr	r1, [pc, #460]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b3e:	4b6e      	ldr	r3, [pc, #440]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	496a      	ldr	r1, [pc, #424]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b60:	4b65      	ldr	r3, [pc, #404]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4962      	ldr	r1, [pc, #392]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b82:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	4959      	ldr	r1, [pc, #356]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ba4:	4b54      	ldr	r3, [pc, #336]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	4951      	ldr	r1, [pc, #324]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d015      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc6:	4b4c      	ldr	r3, [pc, #304]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	4948      	ldr	r1, [pc, #288]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be6:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d015      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	493a      	ldr	r1, [pc, #232]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1c:	d105      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c1e:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c28:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d015      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	492c      	ldr	r1, [pc, #176]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c54:	d105      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c56:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c60:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d015      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6e:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	491e      	ldr	r1, [pc, #120]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8e:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c98:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	4910      	ldr	r1, [pc, #64]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc4:	d105      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cd0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d018      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4902      	ldr	r1, [pc, #8]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	e001      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d02:	d105      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	4918      	ldr	r1, [pc, #96]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d54:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d62:	490a      	ldr	r1, [pc, #40]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d80:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000

08003d90 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e027      	b.n	8003df2 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7a5b      	ldrb	r3, [r3, #9]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fc fb90 	bl	80004d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 0108 	bic.w	r1, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0204 	orr.w	r2, r2, #4
 8003de2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e09d      	b.n	8003f48 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1c:	d009      	beq.n	8003e32 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	61da      	str	r2, [r3, #28]
 8003e24:	e005      	b.n	8003e32 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fc fbb5 	bl	80005bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e72:	d902      	bls.n	8003e7a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e002      	b.n	8003e80 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e88:	d007      	beq.n	8003e9a <HAL_SPI_Init+0xa0>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	ea42 0103 	orr.w	r1, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0204 	and.w	r2, r3, #4
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f16:	ea42 0103 	orr.w	r1, r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e049      	b.n	8003ff6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fc3a 	bl	80007f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 fafa 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d122      	bne.n	800405a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d11b      	bne.n	800405a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0202 	mvn.w	r2, #2
 800402a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa83 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 8004046:	e005      	b.n	8004054 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fa75 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa86 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d122      	bne.n	80040ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d11b      	bne.n	80040ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0204 	mvn.w	r2, #4
 800407e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa59 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 800409a:	e005      	b.n	80040a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fa4b 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa5c 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d122      	bne.n	8004102 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d11b      	bne.n	8004102 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0208 	mvn.w	r2, #8
 80040d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2204      	movs	r2, #4
 80040d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fa2f 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 80040ee:	e005      	b.n	80040fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa21 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fa32 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d122      	bne.n	8004156 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b10      	cmp	r3, #16
 800411c:	d11b      	bne.n	8004156 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f06f 0210 	mvn.w	r2, #16
 8004126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2208      	movs	r2, #8
 800412c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fa05 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 8004142:	e005      	b.n	8004150 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f9f7 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa08 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0201 	mvn.w	r2, #1
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f9d1 	bl	8004524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d10e      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d107      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fe4d 	bl	8004e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fe40 	bl	8004e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f9b6 	bl	8004574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d10e      	bne.n	8004234 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b20      	cmp	r3, #32
 8004222:	d107      	bne.n	8004234 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0220 	mvn.w	r2, #32
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fe00 	bl	8004e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004242:	d10f      	bne.n	8004264 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004252:	d107      	bne.n	8004264 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fe06 	bl	8004e70 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004272:	d10f      	bne.n	8004294 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fdf8 	bl	8004e84 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a2:	d10f      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b2:	d107      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80042bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fdea 	bl	8004e98 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d2:	d10f      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fddc 	bl	8004eac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004316:	2302      	movs	r3, #2
 8004318:	e0ff      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b14      	cmp	r3, #20
 8004326:	f200 80f0 	bhi.w	800450a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800432a:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004330:	08004385 	.word	0x08004385
 8004334:	0800450b 	.word	0x0800450b
 8004338:	0800450b 	.word	0x0800450b
 800433c:	0800450b 	.word	0x0800450b
 8004340:	080043c5 	.word	0x080043c5
 8004344:	0800450b 	.word	0x0800450b
 8004348:	0800450b 	.word	0x0800450b
 800434c:	0800450b 	.word	0x0800450b
 8004350:	08004407 	.word	0x08004407
 8004354:	0800450b 	.word	0x0800450b
 8004358:	0800450b 	.word	0x0800450b
 800435c:	0800450b 	.word	0x0800450b
 8004360:	08004447 	.word	0x08004447
 8004364:	0800450b 	.word	0x0800450b
 8004368:	0800450b 	.word	0x0800450b
 800436c:	0800450b 	.word	0x0800450b
 8004370:	08004489 	.word	0x08004489
 8004374:	0800450b 	.word	0x0800450b
 8004378:	0800450b 	.word	0x0800450b
 800437c:	0800450b 	.word	0x0800450b
 8004380:	080044c9 	.word	0x080044c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f99a 	bl	80046c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	619a      	str	r2, [r3, #24]
      break;
 80043c2:	e0a5      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa14 	bl	80047f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	619a      	str	r2, [r3, #24]
      break;
 8004404:	e084      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fa87 	bl	8004920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0208 	orr.w	r2, r2, #8
 8004420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0204 	bic.w	r2, r2, #4
 8004430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69d9      	ldr	r1, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	61da      	str	r2, [r3, #28]
      break;
 8004444:	e064      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 faf9 	bl	8004a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	021a      	lsls	r2, r3, #8
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	61da      	str	r2, [r3, #28]
      break;
 8004486:	e043      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fb6c 	bl	8004b6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0208 	orr.w	r2, r2, #8
 80044a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0204 	bic.w	r2, r2, #4
 80044b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80044c6:	e023      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fbb6 	bl	8004c40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004508:	e002      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
      break;
 800450e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop

08004524 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a42      	ldr	r2, [pc, #264]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3e      	ldr	r2, [pc, #248]	; (80046ac <TIM_Base_SetConfig+0x124>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3d      	ldr	r2, [pc, #244]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3c      	ldr	r2, [pc, #240]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a31      	ldr	r2, [pc, #196]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d01b      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2e      	ldr	r2, [pc, #184]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d017      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2d      	ldr	r2, [pc, #180]	; (80046ac <TIM_Base_SetConfig+0x124>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00f      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2c      	ldr	r2, [pc, #176]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00b      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <TIM_Base_SetConfig+0x134>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <TIM_Base_SetConfig+0x138>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <TIM_Base_SetConfig+0x100>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00f      	beq.n	8004688 <TIM_Base_SetConfig+0x100>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_Base_SetConfig+0x100>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <TIM_Base_SetConfig+0x134>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_Base_SetConfig+0x100>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <TIM_Base_SetConfig+0x138>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0x100>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d103      	bne.n	8004690 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	615a      	str	r2, [r3, #20]
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40013400 	.word	0x40013400
 80046b4:	40015000 	.word	0x40015000
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40014400 	.word	0x40014400
 80046c0:	40014800 	.word	0x40014800

080046c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 0302 	bic.w	r3, r3, #2
 8004710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <TIM_OC1_SetConfig+0x11c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d013      	beq.n	800474c <TIM_OC1_SetConfig+0x88>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2f      	ldr	r2, [pc, #188]	; (80047e4 <TIM_OC1_SetConfig+0x120>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00f      	beq.n	800474c <TIM_OC1_SetConfig+0x88>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2e      	ldr	r2, [pc, #184]	; (80047e8 <TIM_OC1_SetConfig+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00b      	beq.n	800474c <TIM_OC1_SetConfig+0x88>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a2d      	ldr	r2, [pc, #180]	; (80047ec <TIM_OC1_SetConfig+0x128>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <TIM_OC1_SetConfig+0x88>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <TIM_OC1_SetConfig+0x12c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_OC1_SetConfig+0x88>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <TIM_OC1_SetConfig+0x130>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d10c      	bne.n	8004766 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0308 	bic.w	r3, r3, #8
 8004752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 0304 	bic.w	r3, r3, #4
 8004764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <TIM_OC1_SetConfig+0x11c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <TIM_OC1_SetConfig+0xd2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <TIM_OC1_SetConfig+0x120>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_OC1_SetConfig+0xd2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <TIM_OC1_SetConfig+0x124>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_OC1_SetConfig+0xd2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <TIM_OC1_SetConfig+0x128>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_OC1_SetConfig+0xd2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <TIM_OC1_SetConfig+0x12c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_OC1_SetConfig+0xd2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <TIM_OC1_SetConfig+0x130>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d111      	bne.n	80047ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800479c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	621a      	str	r2, [r3, #32]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40013400 	.word	0x40013400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800
 80047f4:	40015000 	.word	0x40015000

080047f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0210 	bic.w	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0320 	bic.w	r3, r3, #32
 8004846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <TIM_OC2_SetConfig+0x110>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_OC2_SetConfig+0x74>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a2b      	ldr	r2, [pc, #172]	; (800490c <TIM_OC2_SetConfig+0x114>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_OC2_SetConfig+0x74>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <TIM_OC2_SetConfig+0x118>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10d      	bne.n	8004888 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <TIM_OC2_SetConfig+0x110>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <TIM_OC2_SetConfig+0xc0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <TIM_OC2_SetConfig+0x114>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00f      	beq.n	80048b8 <TIM_OC2_SetConfig+0xc0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1e      	ldr	r2, [pc, #120]	; (8004914 <TIM_OC2_SetConfig+0x11c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <TIM_OC2_SetConfig+0xc0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <TIM_OC2_SetConfig+0x120>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_OC2_SetConfig+0xc0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1c      	ldr	r2, [pc, #112]	; (800491c <TIM_OC2_SetConfig+0x124>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC2_SetConfig+0xc0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <TIM_OC2_SetConfig+0x118>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d113      	bne.n	80048e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40015000 	.word	0x40015000
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800

08004920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800496c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2b      	ldr	r2, [pc, #172]	; (8004a2c <TIM_OC3_SetConfig+0x10c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_OC3_SetConfig+0x72>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <TIM_OC3_SetConfig+0x110>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC3_SetConfig+0x72>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a29      	ldr	r2, [pc, #164]	; (8004a34 <TIM_OC3_SetConfig+0x114>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10d      	bne.n	80049ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <TIM_OC3_SetConfig+0x10c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_OC3_SetConfig+0xbe>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <TIM_OC3_SetConfig+0x110>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00f      	beq.n	80049de <TIM_OC3_SetConfig+0xbe>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <TIM_OC3_SetConfig+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_OC3_SetConfig+0xbe>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <TIM_OC3_SetConfig+0x11c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_OC3_SetConfig+0xbe>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <TIM_OC3_SetConfig+0x120>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_OC3_SetConfig+0xbe>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <TIM_OC3_SetConfig+0x114>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d113      	bne.n	8004a06 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	621a      	str	r2, [r3, #32]
}
 8004a20:	bf00      	nop
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40013400 	.word	0x40013400
 8004a34:	40015000 	.word	0x40015000
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800

08004a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a2c      	ldr	r2, [pc, #176]	; (8004b54 <TIM_OC4_SetConfig+0x110>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <TIM_OC4_SetConfig+0x74>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a2b      	ldr	r2, [pc, #172]	; (8004b58 <TIM_OC4_SetConfig+0x114>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_OC4_SetConfig+0x74>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <TIM_OC4_SetConfig+0x118>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10d      	bne.n	8004ad4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <TIM_OC4_SetConfig+0x110>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <TIM_OC4_SetConfig+0xc0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <TIM_OC4_SetConfig+0x114>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00f      	beq.n	8004b04 <TIM_OC4_SetConfig+0xc0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <TIM_OC4_SetConfig+0x11c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00b      	beq.n	8004b04 <TIM_OC4_SetConfig+0xc0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <TIM_OC4_SetConfig+0x120>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_OC4_SetConfig+0xc0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <TIM_OC4_SetConfig+0x124>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC4_SetConfig+0xc0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <TIM_OC4_SetConfig+0x118>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d113      	bne.n	8004b2c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40013400 	.word	0x40013400
 8004b5c:	40015000 	.word	0x40015000
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <TIM_OC5_SetConfig+0xbc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <TIM_OC5_SetConfig+0x82>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <TIM_OC5_SetConfig+0xc0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00f      	beq.n	8004bee <TIM_OC5_SetConfig+0x82>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <TIM_OC5_SetConfig+0xc4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <TIM_OC5_SetConfig+0x82>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <TIM_OC5_SetConfig+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <TIM_OC5_SetConfig+0x82>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <TIM_OC5_SetConfig+0xcc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_OC5_SetConfig+0x82>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <TIM_OC5_SetConfig+0xd0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d109      	bne.n	8004c02 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800
 8004c3c:	40015000 	.word	0x40015000

08004c40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <TIM_OC6_SetConfig+0xc0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x84>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <TIM_OC6_SetConfig+0xc4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00f      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x84>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <TIM_OC6_SetConfig+0xc8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x84>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <TIM_OC6_SetConfig+0xcc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x84>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <TIM_OC6_SetConfig+0xd0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x84>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <TIM_OC6_SetConfig+0xd4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d109      	bne.n	8004cd8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800
 8004d14:	40015000 	.word	0x40015000

08004d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e06f      	b.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a31      	ldr	r2, [pc, #196]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2e      	ldr	r2, [pc, #184]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d01d      	beq.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d018      	beq.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1c      	ldr	r2, [pc, #112]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10c      	bne.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40013400 	.word	0x40013400
 8004e24:	40015000 	.word	0x40015000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40014000 	.word	0x40014000

08004e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ed0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ed4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ef6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004efa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f24:	b084      	sub	sp, #16
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	f107 0014 	add.w	r0, r7, #20
 8004f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	b004      	add	sp, #16
 8004f64:	4770      	bx	lr
	...

08004f68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b09d      	sub	sp, #116	; 0x74
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	78db      	ldrb	r3, [r3, #3]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d81f      	bhi.n	8004fda <USB_ActivateEndpoint+0x72>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <USB_ActivateEndpoint+0x38>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fe3 	.word	0x08004fe3
 8004fac:	08004fbf 	.word	0x08004fbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004fb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fbc:	e012      	b.n	8004fe4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fc2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004fc6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fca:	e00b      	b.n	8004fe4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fd8:	e004      	b.n	8004fe4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004fe0:	e000      	b.n	8004fe4 <USB_ActivateEndpoint+0x7c>
      break;
 8004fe2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	b21b      	sxth	r3, r3
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	b21a      	sxth	r2, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b21b      	sxth	r3, r3
 8005026:	4313      	orrs	r3, r2
 8005028:	b21b      	sxth	r3, r3
 800502a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800503c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	7b1b      	ldrb	r3, [r3, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 8149 	bne.w	80052ec <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8084 	beq.w	800516c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	00da      	lsls	r2, r3, #3
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	88db      	ldrh	r3, [r3, #6]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	b29b      	uxth	r3, r3
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	827b      	strh	r3, [r7, #18]
 80050a6:	8a7b      	ldrh	r3, [r7, #18]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <USB_ActivateEndpoint+0x180>
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	823b      	strh	r3, [r7, #16]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	8a3b      	ldrh	r3, [r7, #16]
 80050d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	78db      	ldrb	r3, [r3, #3]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d020      	beq.n	8005132 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005106:	81bb      	strh	r3, [r7, #12]
 8005108:	89bb      	ldrh	r3, [r7, #12]
 800510a:	f083 0320 	eor.w	r3, r3, #32
 800510e:	81bb      	strh	r3, [r7, #12]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	441a      	add	r2, r3
 800511a:	89bb      	ldrh	r3, [r7, #12]
 800511c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512c:	b29b      	uxth	r3, r3
 800512e:	8013      	strh	r3, [r2, #0]
 8005130:	e2a6      	b.n	8005680 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005148:	81fb      	strh	r3, [r7, #14]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	89fb      	ldrh	r3, [r7, #14]
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]
 800516a:	e289      	b.n	8005680 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	633b      	str	r3, [r7, #48]	; 0x30
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005176:	b29b      	uxth	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	4413      	add	r3, r2
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	00da      	lsls	r2, r3, #3
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	4413      	add	r3, r2
 800518a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	88db      	ldrh	r3, [r3, #6]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	4413      	add	r3, r2
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	00da      	lsls	r2, r3, #3
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	4413      	add	r3, r2
 80051be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ca:	d918      	bls.n	80051fe <USB_ActivateEndpoint+0x296>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <USB_ActivateEndpoint+0x27e>
 80051e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e2:	3b01      	subs	r3, #1
 80051e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	029b      	lsls	r3, r3, #10
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	e029      	b.n	8005252 <USB_ActivateEndpoint+0x2ea>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d112      	bne.n	800522c <USB_ActivateEndpoint+0x2c4>
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005210:	b29a      	uxth	r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005224:	b29a      	uxth	r2, r3
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e012      	b.n	8005252 <USB_ActivateEndpoint+0x2ea>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	66bb      	str	r3, [r7, #104]	; 0x68
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <USB_ActivateEndpoint+0x2de>
 8005240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005242:	3301      	adds	r3, #1
 8005244:	66bb      	str	r3, [r7, #104]	; 0x68
 8005246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005248:	b29b      	uxth	r3, r3
 800524a:	029b      	lsls	r3, r3, #10
 800524c:	b29a      	uxth	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01b      	beq.n	80052a2 <USB_ActivateEndpoint+0x33a>
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	843b      	strh	r3, [r7, #32]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	8c3b      	ldrh	r3, [r7, #32]
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800529a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	83fb      	strh	r3, [r7, #30]
 80052ba:	8bfb      	ldrh	r3, [r7, #30]
 80052bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052c0:	83fb      	strh	r3, [r7, #30]
 80052c2:	8bfb      	ldrh	r3, [r7, #30]
 80052c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052c8:	83fb      	strh	r3, [r7, #30]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	441a      	add	r2, r3
 80052d4:	8bfb      	ldrh	r3, [r7, #30]
 80052d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8013      	strh	r3, [r2, #0]
 80052ea:	e1c9      	b.n	8005680 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	78db      	ldrb	r3, [r3, #3]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d11e      	bne.n	8005332 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800531c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005324:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]
 8005330:	e01d      	b.n	800536e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800535a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536a:	b29b      	uxth	r3, r3
 800536c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005378:	b29b      	uxth	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800537e:	4413      	add	r3, r2
 8005380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	00da      	lsls	r2, r3, #3
 8005388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800538a:	4413      	add	r3, r2
 800538c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005390:	65bb      	str	r3, [r7, #88]	; 0x58
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	891b      	ldrh	r3, [r3, #8]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	b29b      	uxth	r3, r3
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	657b      	str	r3, [r7, #84]	; 0x54
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b2:	4413      	add	r3, r2
 80053b4:	657b      	str	r3, [r7, #84]	; 0x54
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	00da      	lsls	r2, r3, #3
 80053bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053be:	4413      	add	r3, r2
 80053c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053c4:	653b      	str	r3, [r7, #80]	; 0x50
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	895b      	ldrh	r3, [r3, #10]
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8093 	bne.w	8005506 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01b      	beq.n	8005434 <USB_ActivateEndpoint+0x4cc>
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005442:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <USB_ActivateEndpoint+0x51c>
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	873b      	strh	r3, [r7, #56]	; 0x38
 800549c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800549e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80054a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]
 8005504:	e0bc      	b.n	8005680 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005516:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800551a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01d      	beq.n	800555e <USB_ActivateEndpoint+0x5f6>
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800554a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555a:	b29b      	uxth	r3, r3
 800555c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800556e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01d      	beq.n	80055b6 <USB_ActivateEndpoint+0x64e>
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	78db      	ldrb	r3, [r3, #3]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d024      	beq.n	8005608 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80055d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80055dc:	f083 0320 	eor.w	r3, r3, #32
 80055e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80055f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	b29b      	uxth	r3, r3
 8005604:	8013      	strh	r3, [r2, #0]
 8005606:	e01d      	b.n	8005644 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005640:	b29b      	uxth	r3, r3
 8005642:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800566c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005680:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005684:	4618      	mov	r0, r3
 8005686:	3774      	adds	r7, #116	; 0x74
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005690:	b480      	push	{r7}
 8005692:	b08d      	sub	sp, #52	; 0x34
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	7b1b      	ldrb	r3, [r3, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 808e 	bne.w	80057c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d044      	beq.n	8005736 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	81bb      	strh	r3, [r7, #12]
 80056ba:	89bb      	ldrh	r3, [r7, #12]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01b      	beq.n	80056fc <USB_DeactivateEndpoint+0x6c>
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	817b      	strh	r3, [r7, #10]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	897b      	ldrh	r3, [r7, #10]
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005712:	813b      	strh	r3, [r7, #8]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	893b      	ldrh	r3, [r7, #8]
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]
 8005734:	e192      	b.n	8005a5c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	827b      	strh	r3, [r7, #18]
 8005744:	8a7b      	ldrh	r3, [r7, #18]
 8005746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01b      	beq.n	8005786 <USB_DeactivateEndpoint+0xf6>
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	823b      	strh	r3, [r7, #16]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	8a3b      	ldrh	r3, [r7, #16]
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579c:	81fb      	strh	r3, [r7, #14]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]
 80057be:	e14d      	b.n	8005a5c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 80a5 	bne.w	8005914 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	843b      	strh	r3, [r7, #32]
 80057d8:	8c3b      	ldrh	r3, [r7, #32]
 80057da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01b      	beq.n	800581a <USB_DeactivateEndpoint+0x18a>
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f8:	83fb      	strh	r3, [r7, #30]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	8bfb      	ldrh	r3, [r7, #30]
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	83bb      	strh	r3, [r7, #28]
 8005828:	8bbb      	ldrh	r3, [r7, #28]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01b      	beq.n	800586a <USB_DeactivateEndpoint+0x1da>
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	837b      	strh	r3, [r7, #26]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	8b7b      	ldrh	r3, [r7, #26]
 8005856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005862:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	833b      	strh	r3, [r7, #24]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	8b3b      	ldrh	r3, [r7, #24]
 800588e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	82fb      	strh	r3, [r7, #22]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	8afb      	ldrh	r3, [r7, #22]
 80058c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f0:	82bb      	strh	r3, [r7, #20]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	8abb      	ldrh	r3, [r7, #20]
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
 8005912:	e0a3      	b.n	8005a5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <USB_DeactivateEndpoint+0x2d4>
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800595c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <USB_DeactivateEndpoint+0x324>
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	853b      	strh	r3, [r7, #40]	; 0x28
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3734      	adds	r7, #52	; 0x34
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b0c2      	sub	sp, #264	; 0x108
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a82:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 867b 	bne.w	800678c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d908      	bls.n	8005ac4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ac2:	e007      	b.n	8005ad4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	7b1b      	ldrb	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d13a      	bne.n	8005b5a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6959      	ldr	r1, [r3, #20]
 8005af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	88da      	ldrh	r2, [r3, #6]
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	f001 fc1d 	bl	800734a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4413      	add	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	00da      	lsls	r2, r3, #3
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	4413      	add	r3, r2
 8005b46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	f000 bde3 	b.w	8006720 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	f040 843a 	bne.w	80063e0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	f240 83b7 	bls.w	80062f8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a1a      	ldr	r2, [r3, #32]
 8005bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 81b3 	beq.w	8005f92 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
 8005c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d16d      	bne.n	8005d24 <USB_EPStartXfer+0x2ba>
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	4413      	add	r3, r2
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	00da      	lsls	r2, r3, #3
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8a:	d91c      	bls.n	8005cc6 <USB_EPStartXfer+0x25c>
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <USB_EPStartXfer+0x242>
 8005ca2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	e053      	b.n	8005d6e <USB_EPStartXfer+0x304>
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d112      	bne.n	8005cf4 <USB_EPStartXfer+0x28a>
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e03c      	b.n	8005d6e <USB_EPStartXfer+0x304>
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <USB_EPStartXfer+0x2aa>
 8005d0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	029b      	lsls	r3, r3, #10
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	e024      	b.n	8005d6e <USB_EPStartXfer+0x304>
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d11c      	bne.n	8005d6e <USB_EPStartXfer+0x304>
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	4413      	add	r3, r2
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	00da      	lsls	r2, r3, #3
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	895b      	ldrh	r3, [r3, #10]
 8005d7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6959      	ldr	r1, [r3, #20]
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d9c:	6800      	ldr	r0, [r0, #0]
 8005d9e:	f001 fad4 	bl	800734a <USB_WritePMA>
            ep->xfer_buff += len;
 8005da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db2:	441a      	add	r2, r3
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d90f      	bls.n	8005dfc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dec:	1ad2      	subs	r2, r2, r3
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	621a      	str	r2, [r3, #32]
 8005dfa:	e00e      	b.n	8005e1a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d16d      	bne.n	8005f06 <USB_EPStartXfer+0x49c>
 8005e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	00da      	lsls	r2, r3, #3
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e6c:	d91c      	bls.n	8005ea8 <USB_EPStartXfer+0x43e>
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <USB_EPStartXfer+0x424>
 8005e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	029b      	lsls	r3, r3, #10
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e059      	b.n	8005f5c <USB_EPStartXfer+0x4f2>
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d112      	bne.n	8005ed6 <USB_EPStartXfer+0x46c>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e042      	b.n	8005f5c <USB_EPStartXfer+0x4f2>
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <USB_EPStartXfer+0x48c>
 8005eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	e02a      	b.n	8005f5c <USB_EPStartXfer+0x4f2>
 8005f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d122      	bne.n	8005f5c <USB_EPStartXfer+0x4f2>
 8005f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	4413      	add	r3, r2
 8005f38:	623b      	str	r3, [r7, #32]
 8005f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	00da      	lsls	r2, r3, #3
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	891b      	ldrh	r3, [r3, #8]
 8005f68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6959      	ldr	r1, [r3, #20]
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	f001 f9dd 	bl	800734a <USB_WritePMA>
 8005f90:	e3c6      	b.n	8006720 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d16d      	bne.n	800607e <USB_EPStartXfer+0x614>
 8005fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc2:	4413      	add	r3, r2
 8005fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	00da      	lsls	r2, r3, #3
 8005fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe4:	d91c      	bls.n	8006020 <USB_EPStartXfer+0x5b6>
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <USB_EPStartXfer+0x59c>
 8005ffc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006000:	3b01      	subs	r3, #1
 8006002:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800600a:	b29b      	uxth	r3, r3
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	b29b      	uxth	r3, r3
 8006010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006018:	b29a      	uxth	r2, r3
 800601a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	e059      	b.n	80060d4 <USB_EPStartXfer+0x66a>
 8006020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006024:	2b00      	cmp	r3, #0
 8006026:	d112      	bne.n	800604e <USB_EPStartXfer+0x5e4>
 8006028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006032:	b29a      	uxth	r2, r3
 8006034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e042      	b.n	80060d4 <USB_EPStartXfer+0x66a>
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <USB_EPStartXfer+0x604>
 8006064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006068:	3301      	adds	r3, #1
 800606a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800606e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006072:	b29b      	uxth	r3, r3
 8006074:	029b      	lsls	r3, r3, #10
 8006076:	b29a      	uxth	r2, r3
 8006078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	e02a      	b.n	80060d4 <USB_EPStartXfer+0x66a>
 800607e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d122      	bne.n	80060d4 <USB_EPStartXfer+0x66a>
 800608e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	653b      	str	r3, [r7, #80]	; 0x50
 800609a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ae:	4413      	add	r3, r2
 80060b0:	653b      	str	r3, [r7, #80]	; 0x50
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	00da      	lsls	r2, r3, #3
 80060c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	891b      	ldrh	r3, [r3, #8]
 80060e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6959      	ldr	r1, [r3, #20]
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	f001 f921 	bl	800734a <USB_WritePMA>
            ep->xfer_buff += len;
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695a      	ldr	r2, [r3, #20]
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006118:	441a      	add	r2, r3
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a1a      	ldr	r2, [r3, #32]
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	429a      	cmp	r2, r3
 8006140:	d90f      	bls.n	8006162 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	621a      	str	r2, [r3, #32]
 8006160:	e00e      	b.n	8006180 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d16d      	bne.n	8006278 <USB_EPStartXfer+0x80e>
 800619c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	4413      	add	r3, r2
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00da      	lsls	r2, r3, #3
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061dc:	2b3e      	cmp	r3, #62	; 0x3e
 80061de:	d91c      	bls.n	800621a <USB_EPStartXfer+0x7b0>
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <USB_EPStartXfer+0x796>
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fa:	3b01      	subs	r3, #1
 80061fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	b29b      	uxth	r3, r3
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b29b      	uxth	r3, r3
 800620a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006212:	b29a      	uxth	r2, r3
 8006214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e053      	b.n	80062c2 <USB_EPStartXfer+0x858>
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621e:	2b00      	cmp	r3, #0
 8006220:	d112      	bne.n	8006248 <USB_EPStartXfer+0x7de>
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800622c:	b29a      	uxth	r2, r3
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006240:	b29a      	uxth	r2, r3
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e03c      	b.n	80062c2 <USB_EPStartXfer+0x858>
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <USB_EPStartXfer+0x7fe>
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	3301      	adds	r3, #1
 8006264:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	b29b      	uxth	r3, r3
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	b29a      	uxth	r2, r3
 8006272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e024      	b.n	80062c2 <USB_EPStartXfer+0x858>
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d11c      	bne.n	80062c2 <USB_EPStartXfer+0x858>
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629c:	4413      	add	r3, r2
 800629e:	643b      	str	r3, [r7, #64]	; 0x40
 80062a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	00da      	lsls	r2, r3, #3
 80062ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	895b      	ldrh	r3, [r3, #10]
 80062ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6959      	ldr	r1, [r3, #20]
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062f0:	6800      	ldr	r0, [r0, #0]
 80062f2:	f001 f82a 	bl	800734a <USB_WritePMA>
 80062f6:	e213      	b.n	8006720 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006360:	b29b      	uxth	r3, r3
 8006362:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637e:	b29b      	uxth	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006384:	4413      	add	r3, r2
 8006386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	00da      	lsls	r2, r3, #3
 8006396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006398:	4413      	add	r3, r2
 800639a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800639e:	65bb      	str	r3, [r7, #88]	; 0x58
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	891b      	ldrh	r3, [r3, #8]
 80063b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6959      	ldr	r1, [r3, #20]
 80063c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063d8:	6800      	ldr	r0, [r0, #0]
 80063da:	f000 ffb6 	bl	800734a <USB_WritePMA>
 80063de:	e19f      	b.n	8006720 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6a1a      	ldr	r2, [r3, #32]
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f0:	1ad2      	subs	r2, r2, r3
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80bc 	beq.w	800659e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	673b      	str	r3, [r7, #112]	; 0x70
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d16d      	bne.n	800651e <USB_EPStartXfer+0xab4>
 8006442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	66bb      	str	r3, [r7, #104]	; 0x68
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645c:	b29b      	uxth	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006462:	4413      	add	r3, r2
 8006464:	66bb      	str	r3, [r7, #104]	; 0x68
 8006466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	00da      	lsls	r2, r3, #3
 8006474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006476:	4413      	add	r3, r2
 8006478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800647c:	667b      	str	r3, [r7, #100]	; 0x64
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	2b3e      	cmp	r3, #62	; 0x3e
 8006484:	d91c      	bls.n	80064c0 <USB_EPStartXfer+0xa56>
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <USB_EPStartXfer+0xa3c>
 800649c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064a0:	3b01      	subs	r3, #1
 80064a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	029b      	lsls	r3, r3, #10
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e053      	b.n	8006568 <USB_EPStartXfer+0xafe>
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d112      	bne.n	80064ee <USB_EPStartXfer+0xa84>
 80064c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	e03c      	b.n	8006568 <USB_EPStartXfer+0xafe>
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <USB_EPStartXfer+0xaa4>
 8006504:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006508:	3301      	adds	r3, #1
 800650a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800650e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006512:	b29b      	uxth	r3, r3
 8006514:	029b      	lsls	r3, r3, #10
 8006516:	b29a      	uxth	r2, r3
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e024      	b.n	8006568 <USB_EPStartXfer+0xafe>
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d11c      	bne.n	8006568 <USB_EPStartXfer+0xafe>
 800652e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006542:	4413      	add	r3, r2
 8006544:	673b      	str	r3, [r7, #112]	; 0x70
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	00da      	lsls	r2, r3, #3
 8006554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006556:	4413      	add	r3, r2
 8006558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800655c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006562:	b29a      	uxth	r2, r3
 8006564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006566:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	895b      	ldrh	r3, [r3, #10]
 8006574:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6959      	ldr	r1, [r3, #20]
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006588:	b29b      	uxth	r3, r3
 800658a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800658e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006592:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006596:	6800      	ldr	r0, [r0, #0]
 8006598:	f000 fed7 	bl	800734a <USB_WritePMA>
 800659c:	e0c0      	b.n	8006720 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d16d      	bne.n	800668a <USB_EPStartXfer+0xc20>
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065ce:	4413      	add	r3, r2
 80065d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	00da      	lsls	r2, r3, #3
 80065e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ee:	2b3e      	cmp	r3, #62	; 0x3e
 80065f0:	d91c      	bls.n	800662c <USB_EPStartXfer+0xbc2>
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <USB_EPStartXfer+0xba8>
 8006608:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800660c:	3b01      	subs	r3, #1
 800660e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006616:	b29b      	uxth	r3, r3
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	b29b      	uxth	r3, r3
 800661c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006624:	b29a      	uxth	r2, r3
 8006626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e05f      	b.n	80066ec <USB_EPStartXfer+0xc82>
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006630:	2b00      	cmp	r3, #0
 8006632:	d112      	bne.n	800665a <USB_EPStartXfer+0xbf0>
 8006634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663e:	b29a      	uxth	r2, r3
 8006640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006652:	b29a      	uxth	r2, r3
 8006654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e048      	b.n	80066ec <USB_EPStartXfer+0xc82>
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <USB_EPStartXfer+0xc10>
 8006670:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006674:	3301      	adds	r3, #1
 8006676:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800667a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800667e:	b29b      	uxth	r3, r3
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	b29a      	uxth	r2, r3
 8006684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e030      	b.n	80066ec <USB_EPStartXfer+0xc82>
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d128      	bne.n	80066ec <USB_EPStartXfer+0xc82>
 800669a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066be:	4413      	add	r3, r2
 80066c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	00da      	lsls	r2, r3, #3
 80066d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066d6:	4413      	add	r3, r2
 80066d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	891b      	ldrh	r3, [r3, #8]
 80066f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6959      	ldr	r1, [r3, #20]
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	b29b      	uxth	r3, r3
 800670e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006712:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006716:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800671a:	6800      	ldr	r0, [r0, #0]
 800671c:	f000 fe15 	bl	800734a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006746:	817b      	strh	r3, [r7, #10]
 8006748:	897b      	ldrh	r3, [r7, #10]
 800674a:	f083 0310 	eor.w	r3, r3, #16
 800674e:	817b      	strh	r3, [r7, #10]
 8006750:	897b      	ldrh	r3, [r7, #10]
 8006752:	f083 0320 	eor.w	r3, r3, #32
 8006756:	817b      	strh	r3, [r7, #10]
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	897b      	ldrh	r3, [r7, #10]
 8006774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006784:	b29b      	uxth	r3, r3
 8006786:	8013      	strh	r3, [r2, #0]
 8006788:	f000 bc9f 	b.w	80070ca <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	7b1b      	ldrb	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 80ae 	bne.w	80068fa <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800679e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d917      	bls.n	80067ea <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80067ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80067ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	619a      	str	r2, [r3, #24]
 80067e8:	e00e      	b.n	8006808 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80067ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80067fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2200      	movs	r2, #0
 8006806:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006824:	b29b      	uxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800682c:	4413      	add	r3, r2
 800682e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	00da      	lsls	r2, r3, #3
 8006840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006844:	4413      	add	r3, r2
 8006846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800684a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006852:	2b3e      	cmp	r3, #62	; 0x3e
 8006854:	d91d      	bls.n	8006892 <USB_EPStartXfer+0xe28>
 8006856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <USB_EPStartXfer+0xe0c>
 800686c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006870:	3b01      	subs	r3, #1
 8006872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800687a:	b29b      	uxth	r3, r3
 800687c:	029b      	lsls	r3, r3, #10
 800687e:	b29b      	uxth	r3, r3
 8006880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006888:	b29a      	uxth	r2, r3
 800688a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	e3e1      	b.n	8007056 <USB_EPStartXfer+0x15ec>
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	2b00      	cmp	r3, #0
 8006898:	d116      	bne.n	80068c8 <USB_EPStartXfer+0xe5e>
 800689a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	e3c6      	b.n	8007056 <USB_EPStartXfer+0x15ec>
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068cc:	085b      	lsrs	r3, r3, #1
 80068ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <USB_EPStartXfer+0xe7e>
 80068de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068e2:	3301      	adds	r3, #1
 80068e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	029b      	lsls	r3, r3, #10
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e3ad      	b.n	8007056 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	78db      	ldrb	r3, [r3, #3]
 8006906:	2b02      	cmp	r3, #2
 8006908:	f040 8200 	bne.w	8006d0c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800690c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f040 8091 	bne.w	8006a40 <USB_EPStartXfer+0xfd6>
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693a:	b29b      	uxth	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006942:	4413      	add	r3, r2
 8006944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	00da      	lsls	r2, r3, #3
 8006956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800695a:	4413      	add	r3, r2
 800695c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b3e      	cmp	r3, #62	; 0x3e
 8006972:	d925      	bls.n	80069c0 <USB_EPStartXfer+0xf56>
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <USB_EPStartXfer+0xf3a>
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	3b01      	subs	r3, #1
 80069a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	029b      	lsls	r3, r3, #10
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	e074      	b.n	8006aaa <USB_EPStartXfer+0x1040>
 80069c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d116      	bne.n	80069fe <USB_EPStartXfer+0xf94>
 80069d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	e055      	b.n	8006aaa <USB_EPStartXfer+0x1040>
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <USB_EPStartXfer+0xfc4>
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a28:	3301      	adds	r3, #1
 8006a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	029b      	lsls	r3, r3, #10
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e034      	b.n	8006aaa <USB_EPStartXfer+0x1040>
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d12c      	bne.n	8006aaa <USB_EPStartXfer+0x1040>
 8006a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a74:	4413      	add	r3, r2
 8006a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	00da      	lsls	r2, r3, #3
 8006a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f040 8091 	bne.w	8006bec <USB_EPStartXfer+0x1182>
 8006aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aee:	4413      	add	r3, r2
 8006af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	00da      	lsls	r2, r3, #3
 8006b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b06:	4413      	add	r3, r2
 8006b08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b1e:	d925      	bls.n	8006b6c <USB_EPStartXfer+0x1102>
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <USB_EPStartXfer+0x10e6>
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	029b      	lsls	r3, r3, #10
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e06d      	b.n	8006c48 <USB_EPStartXfer+0x11de>
 8006b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d116      	bne.n	8006baa <USB_EPStartXfer+0x1140>
 8006b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e04e      	b.n	8006c48 <USB_EPStartXfer+0x11de>
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <USB_EPStartXfer+0x1170>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e02d      	b.n	8006c48 <USB_EPStartXfer+0x11de>
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d125      	bne.n	8006c48 <USB_EPStartXfer+0x11de>
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c12:	4413      	add	r3, r2
 8006c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	00da      	lsls	r2, r3, #3
 8006c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 81fe 	beq.w	8007056 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <USB_EPStartXfer+0x1228>
 8006c86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10d      	bne.n	8006cae <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 81db 	bne.w	8007056 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ca0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 81d4 	bne.w	8007056 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]
 8006d0a:	e1a4      	b.n	8007056 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	78db      	ldrb	r3, [r3, #3]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	f040 819a 	bne.w	8007052 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d917      	bls.n	8006d6a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	619a      	str	r2, [r3, #24]
 8006d68:	e00e      	b.n	8006d88 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2200      	movs	r2, #0
 8006d86:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d178      	bne.n	8006e8a <USB_EPStartXfer+0x1420>
 8006d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	00da      	lsls	r2, r3, #3
 8006dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	2b3e      	cmp	r3, #62	; 0x3e
 8006de4:	d91d      	bls.n	8006e22 <USB_EPStartXfer+0x13b8>
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <USB_EPStartXfer+0x139c>
 8006dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e00:	3b01      	subs	r3, #1
 8006e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	029b      	lsls	r3, r3, #10
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	e064      	b.n	8006eec <USB_EPStartXfer+0x1482>
 8006e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d116      	bne.n	8006e58 <USB_EPStartXfer+0x13ee>
 8006e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	e049      	b.n	8006eec <USB_EPStartXfer+0x1482>
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <USB_EPStartXfer+0x140e>
 8006e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e72:	3301      	adds	r3, #1
 8006e74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	e030      	b.n	8006eec <USB_EPStartXfer+0x1482>
 8006e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d128      	bne.n	8006eec <USB_EPStartXfer+0x1482>
 8006e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	00da      	lsls	r2, r3, #3
 8006ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d178      	bne.n	8006ffc <USB_EPStartXfer+0x1592>
 8006f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f2e:	4413      	add	r3, r2
 8006f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	00da      	lsls	r2, r3, #3
 8006f42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f46:	4413      	add	r3, r2
 8006f48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f54:	2b3e      	cmp	r3, #62	; 0x3e
 8006f56:	d91d      	bls.n	8006f94 <USB_EPStartXfer+0x152a>
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5c:	095b      	lsrs	r3, r3, #5
 8006f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <USB_EPStartXfer+0x150e>
 8006f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f72:	3b01      	subs	r3, #1
 8006f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	029b      	lsls	r3, r3, #10
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e060      	b.n	8007056 <USB_EPStartXfer+0x15ec>
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d116      	bne.n	8006fca <USB_EPStartXfer+0x1560>
 8006f9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	e045      	b.n	8007056 <USB_EPStartXfer+0x15ec>
 8006fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <USB_EPStartXfer+0x1580>
 8006fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e02c      	b.n	8007056 <USB_EPStartXfer+0x15ec>
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d124      	bne.n	8007056 <USB_EPStartXfer+0x15ec>
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701a:	b29b      	uxth	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007022:	4413      	add	r3, r2
 8007024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	00da      	lsls	r2, r3, #3
 8007036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800703a:	4413      	add	r3, r2
 800703c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	b29a      	uxth	r2, r3
 800704a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e001      	b.n	8007056 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e03a      	b.n	80070cc <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007080:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007084:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007088:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800708c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007090:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007094:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d020      	beq.n	800712a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	81bb      	strh	r3, [r7, #12]
 8007100:	89bb      	ldrh	r3, [r7, #12]
 8007102:	f083 0310 	eor.w	r3, r3, #16
 8007106:	81bb      	strh	r3, [r7, #12]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	441a      	add	r2, r3
 8007112:	89bb      	ldrh	r3, [r7, #12]
 8007114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007124:	b29b      	uxth	r3, r3
 8007126:	8013      	strh	r3, [r2, #0]
 8007128:	e01f      	b.n	800716a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	81fb      	strh	r3, [r7, #14]
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007148:	81fb      	strh	r3, [r7, #14]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	89fb      	ldrh	r3, [r7, #14]
 8007156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007166:	b29b      	uxth	r3, r3
 8007168:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	7b1b      	ldrb	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 809d 	bne.w	80072c6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d04c      	beq.n	800722e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	823b      	strh	r3, [r7, #16]
 80071a2:	8a3b      	ldrh	r3, [r7, #16]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01b      	beq.n	80071e4 <USB_EPClearStall+0x6c>
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c2:	81fb      	strh	r3, [r7, #14]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	89fb      	ldrh	r3, [r7, #14]
 80071d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	78db      	ldrb	r3, [r3, #3]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d06c      	beq.n	80072c6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007202:	81bb      	strh	r3, [r7, #12]
 8007204:	89bb      	ldrh	r3, [r7, #12]
 8007206:	f083 0320 	eor.w	r3, r3, #32
 800720a:	81bb      	strh	r3, [r7, #12]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	441a      	add	r2, r3
 8007216:	89bb      	ldrh	r3, [r7, #12]
 8007218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007228:	b29b      	uxth	r3, r3
 800722a:	8013      	strh	r3, [r2, #0]
 800722c:	e04b      	b.n	80072c6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	82fb      	strh	r3, [r7, #22]
 800723c:	8afb      	ldrh	r3, [r7, #22]
 800723e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d01b      	beq.n	800727e <USB_EPClearStall+0x106>
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	82bb      	strh	r3, [r7, #20]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	8abb      	ldrh	r3, [r7, #20]
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007294:	827b      	strh	r3, [r7, #18]
 8007296:	8a7b      	ldrh	r3, [r7, #18]
 8007298:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800729c:	827b      	strh	r3, [r7, #18]
 800729e:	8a7b      	ldrh	r3, [r7, #18]
 80072a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072a4:	827b      	strh	r3, [r7, #18]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	8a7b      	ldrh	r3, [r7, #18]
 80072b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2280      	movs	r2, #128	; 0x80
 80072ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800730a:	b29b      	uxth	r3, r3
 800730c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007314:	b29a      	uxth	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007338:	b29b      	uxth	r3, r3
 800733a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800734a:	b480      	push	{r7}
 800734c:	b08d      	sub	sp, #52	; 0x34
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	4611      	mov	r1, r2
 8007356:	461a      	mov	r2, r3
 8007358:	460b      	mov	r3, r1
 800735a:	80fb      	strh	r3, [r7, #6]
 800735c:	4613      	mov	r3, r2
 800735e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007360:	88bb      	ldrh	r3, [r7, #4]
 8007362:	3301      	adds	r3, #1
 8007364:	085b      	lsrs	r3, r3, #1
 8007366:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007370:	88fa      	ldrh	r2, [r7, #6]
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007380:	e01b      	b.n	80073ba <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	3301      	adds	r3, #1
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	b29b      	uxth	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	3302      	adds	r3, #2
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	3301      	adds	r3, #1
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	3b01      	subs	r3, #1
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e0      	bne.n	8007382 <USB_WritePMA+0x38>
  }
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	3734      	adds	r7, #52	; 0x34
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b08b      	sub	sp, #44	; 0x2c
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	4611      	mov	r1, r2
 80073da:	461a      	mov	r2, r3
 80073dc:	460b      	mov	r3, r1
 80073de:	80fb      	strh	r3, [r7, #6]
 80073e0:	4613      	mov	r3, r2
 80073e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073e4:	88bb      	ldrh	r3, [r7, #4]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073fe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
 8007404:	e018      	b.n	8007438 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	3302      	adds	r3, #2
 8007412:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	3301      	adds	r3, #1
 8007420:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	0a1b      	lsrs	r3, r3, #8
 8007426:	b2da      	uxtb	r2, r3
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	3301      	adds	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	3b01      	subs	r3, #1
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e3      	bne.n	8007406 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800743e:	88bb      	ldrh	r3, [r7, #4]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	b2da      	uxtb	r2, r3
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	701a      	strb	r2, [r3, #0]
  }
}
 800745a:	bf00      	nop
 800745c:	372c      	adds	r7, #44	; 0x2c
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007472:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007476:	f002 f8a7 	bl	80095c8 <USBD_static_malloc>
 800747a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800748a:	2302      	movs	r3, #2
 800748c:	e066      	b.n	800755c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7c1b      	ldrb	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d119      	bne.n	80074d2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800749e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074a2:	2202      	movs	r2, #2
 80074a4:	2181      	movs	r1, #129	; 0x81
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 ff33 	bl	8009312 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	2202      	movs	r2, #2
 80074b8:	2101      	movs	r1, #1
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 ff29 	bl	8009312 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2210      	movs	r2, #16
 80074cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80074d0:	e016      	b.n	8007500 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	2202      	movs	r2, #2
 80074d6:	2181      	movs	r1, #129	; 0x81
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 ff1a 	bl	8009312 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	2202      	movs	r2, #2
 80074e8:	2101      	movs	r1, #1
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 ff11 	bl	8009312 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2210      	movs	r2, #16
 80074fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007500:	2308      	movs	r3, #8
 8007502:	2203      	movs	r2, #3
 8007504:	2182      	movs	r1, #130	; 0x82
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 ff03 	bl	8009312 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7c1b      	ldrb	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800753c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007540:	2101      	movs	r1, #1
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 ffd5 	bl	80094f2 <USBD_LL_PrepareReceive>
 8007548:	e007      	b.n	800755a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007550:	2340      	movs	r3, #64	; 0x40
 8007552:	2101      	movs	r1, #1
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 ffcc 	bl	80094f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007570:	2181      	movs	r1, #129	; 0x81
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fef3 	bl	800935e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800757e:	2101      	movs	r1, #1
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 feec 	bl	800935e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800758e:	2182      	movs	r1, #130	; 0x82
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fee4 	bl	800935e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00e      	beq.n	80075ce <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075c0:	4618      	mov	r0, r3
 80075c2:	f002 f80f 	bl	80095e4 <USBD_static_free>
    pdev->pClassData = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e0af      	b.n	8007760 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007608:	2b00      	cmp	r3, #0
 800760a:	d03f      	beq.n	800768c <USBD_CDC_Setup+0xb4>
 800760c:	2b20      	cmp	r3, #32
 800760e:	f040 809f 	bne.w	8007750 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	88db      	ldrh	r3, [r3, #6]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d02e      	beq.n	8007678 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b25b      	sxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	da16      	bge.n	8007652 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007630:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	88d2      	ldrh	r2, [r2, #6]
 8007636:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	2b07      	cmp	r3, #7
 800763e:	bf28      	it	cs
 8007640:	2307      	movcs	r3, #7
 8007642:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	89fa      	ldrh	r2, [r7, #14]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 fa9f 	bl	8008b8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007650:	e085      	b.n	800775e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	785a      	ldrb	r2, [r3, #1]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	b2da      	uxtb	r2, r3
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007668:	6939      	ldr	r1, [r7, #16]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	88db      	ldrh	r3, [r3, #6]
 800766e:	461a      	mov	r2, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fab8 	bl	8008be6 <USBD_CtlPrepareRx>
      break;
 8007676:	e072      	b.n	800775e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	7850      	ldrb	r0, [r2, #1]
 8007684:	2200      	movs	r2, #0
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	4798      	blx	r3
      break;
 800768a:	e068      	b.n	800775e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	2b0b      	cmp	r3, #11
 8007692:	d852      	bhi.n	800773a <USBD_CDC_Setup+0x162>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <USBD_CDC_Setup+0xc4>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076cd 	.word	0x080076cd
 80076a0:	08007749 	.word	0x08007749
 80076a4:	0800773b 	.word	0x0800773b
 80076a8:	0800773b 	.word	0x0800773b
 80076ac:	0800773b 	.word	0x0800773b
 80076b0:	0800773b 	.word	0x0800773b
 80076b4:	0800773b 	.word	0x0800773b
 80076b8:	0800773b 	.word	0x0800773b
 80076bc:	0800773b 	.word	0x0800773b
 80076c0:	0800773b 	.word	0x0800773b
 80076c4:	080076f7 	.word	0x080076f7
 80076c8:	08007721 	.word	0x08007721
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d107      	bne.n	80076e8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076d8:	f107 030a 	add.w	r3, r7, #10
 80076dc:	2202      	movs	r2, #2
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fa54 	bl	8008b8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076e6:	e032      	b.n	800774e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f9de 	bl	8008aac <USBD_CtlError>
            ret = USBD_FAIL;
 80076f0:	2303      	movs	r3, #3
 80076f2:	75fb      	strb	r3, [r7, #23]
          break;
 80076f4:	e02b      	b.n	800774e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d107      	bne.n	8007712 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007702:	f107 030d 	add.w	r3, r7, #13
 8007706:	2201      	movs	r2, #1
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 fa3f 	bl	8008b8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007710:	e01d      	b.n	800774e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f9c9 	bl	8008aac <USBD_CtlError>
            ret = USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	75fb      	strb	r3, [r7, #23]
          break;
 800771e:	e016      	b.n	800774e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b03      	cmp	r3, #3
 800772a:	d00f      	beq.n	800774c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 f9bc 	bl	8008aac <USBD_CtlError>
            ret = USBD_FAIL;
 8007734:	2303      	movs	r3, #3
 8007736:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007738:	e008      	b.n	800774c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 f9b5 	bl	8008aac <USBD_CtlError>
          ret = USBD_FAIL;
 8007742:	2303      	movs	r3, #3
 8007744:	75fb      	strb	r3, [r7, #23]
          break;
 8007746:	e002      	b.n	800774e <USBD_CDC_Setup+0x176>
          break;
 8007748:	bf00      	nop
 800774a:	e008      	b.n	800775e <USBD_CDC_Setup+0x186>
          break;
 800774c:	bf00      	nop
      }
      break;
 800774e:	e006      	b.n	800775e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 f9aa 	bl	8008aac <USBD_CtlError>
      ret = USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	75fb      	strb	r3, [r7, #23]
      break;
 800775c:	bf00      	nop
  }

  return (uint8_t)ret;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800777a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007786:	2303      	movs	r3, #3
 8007788:	e04f      	b.n	800782a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007790:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	3318      	adds	r3, #24
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d029      	beq.n	80077fc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	440b      	add	r3, r1
 80077b6:	3318      	adds	r3, #24
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	78f9      	ldrb	r1, [r7, #3]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	460b      	mov	r3, r1
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	4403      	add	r3, r0
 80077c8:	3338      	adds	r3, #56	; 0x38
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d110      	bne.n	80077fc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	3318      	adds	r3, #24
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077ee:	78f9      	ldrb	r1, [r7, #3]
 80077f0:	2300      	movs	r3, #0
 80077f2:	2200      	movs	r2, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fe5b 	bl	80094b0 <USBD_LL_Transmit>
 80077fa:	e015      	b.n	8007828 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007844:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e015      	b.n	8007880 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fe6b 	bl	8009534 <USBD_LL_GetRxDataSize>
 800785e:	4602      	mov	r2, r0
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800787a:	4611      	mov	r1, r2
 800787c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007896:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800789e:	2303      	movs	r3, #3
 80078a0:	e01b      	b.n	80078da <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d015      	beq.n	80078d8 <USBD_CDC_EP0_RxReady+0x50>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078b2:	2bff      	cmp	r3, #255	; 0xff
 80078b4:	d010      	beq.n	80078d8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80078c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078cc:	b292      	uxth	r2, r2
 80078ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	22ff      	movs	r2, #255	; 0xff
 80078d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2243      	movs	r2, #67	; 0x43
 80078f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80078f2:	4b03      	ldr	r3, [pc, #12]	; (8007900 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20000094 	.word	0x20000094

08007904 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2243      	movs	r2, #67	; 0x43
 8007910:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007912:	4b03      	ldr	r3, [pc, #12]	; (8007920 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	20000050 	.word	0x20000050

08007924 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2243      	movs	r2, #67	; 0x43
 8007930:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007932:	4b03      	ldr	r3, [pc, #12]	; (8007940 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	200000d8 	.word	0x200000d8

08007944 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	220a      	movs	r2, #10
 8007950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007952:	4b03      	ldr	r3, [pc, #12]	; (8007960 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	2000000c 	.word	0x2000000c

08007964 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	e004      	b.n	8007982 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800798e:	b480      	push	{r7}
 8007990:	b087      	sub	sp, #28
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e008      	b.n	80079be <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e004      	b.n	80079f0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e016      	b.n	8007a48 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 fd5f 	bl	80094f2 <USBD_LL_PrepareReceive>
 8007a34:	e007      	b.n	8007a46 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fd56 	bl	80094f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e01f      	b.n	8007aa8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	79fa      	ldrb	r2, [r7, #7]
 8007a9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f001 fbbd 	bl	800921c <USBD_LL_Init>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e016      	b.n	8007af6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	f107 020e 	add.w	r2, r7, #14
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	4602      	mov	r2, r0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fbe8 	bl	80092dc <USBD_LL_Start>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	4611      	mov	r1, r2
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	4798      	blx	r3
  }

  return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 ff46 	bl	8008a38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d01a      	beq.n	8007c06 <USBD_LL_SetupStage+0x72>
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d822      	bhi.n	8007c1a <USBD_LL_SetupStage+0x86>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <USBD_LL_SetupStage+0x4a>
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d00a      	beq.n	8007bf2 <USBD_LL_SetupStage+0x5e>
 8007bdc:	e01d      	b.n	8007c1a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9ee 	bl	8007fc8 <USBD_StdDevReq>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf0:	e020      	b.n	8007c34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa52 	bl	80080a4 <USBD_StdItfReq>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
      break;
 8007c04:	e016      	b.n	8007c34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa91 	bl	8008136 <USBD_StdEPReq>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
      break;
 8007c18:	e00c      	b.n	8007c34 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 fbb7 	bl	800939c <USBD_LL_StallEP>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]
      break;
 8007c32:	bf00      	nop
  }

  return ret;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b086      	sub	sp, #24
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	460b      	mov	r3, r1
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d138      	bne.n	8007cc4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d14a      	bne.n	8007cfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d913      	bls.n	8007c98 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	1ad2      	subs	r2, r2, r3
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	4293      	cmp	r3, r2
 8007c88:	bf28      	it	cs
 8007c8a:	4613      	movcs	r3, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 ffc5 	bl	8008c20 <USBD_CtlContinueRx>
 8007c96:	e030      	b.n	8007cfa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d10b      	bne.n	8007cbc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 ffc0 	bl	8008c42 <USBD_CtlSendStatus>
 8007cc2:	e01a      	b.n	8007cfa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d114      	bne.n	8007cfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00e      	beq.n	8007cfa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	7afa      	ldrb	r2, [r7, #11]
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	4798      	blx	r3
 8007cec:	4603      	mov	r3, r0
 8007cee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	e000      	b.n	8007cfc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d12:	7afb      	ldrb	r3, [r7, #11]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d16b      	bne.n	8007df0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d156      	bne.n	8007dd6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d914      	bls.n	8007d5e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	461a      	mov	r2, r3
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 ff3a 	bl	8008bc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d50:	2300      	movs	r3, #0
 8007d52:	2200      	movs	r2, #0
 8007d54:	2100      	movs	r1, #0
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f001 fbcb 	bl	80094f2 <USBD_LL_PrepareReceive>
 8007d5c:	e03b      	b.n	8007dd6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d11c      	bne.n	8007da4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d316      	bcc.n	8007da4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d20f      	bcs.n	8007da4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d84:	2200      	movs	r2, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 ff1b 	bl	8008bc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d96:	2300      	movs	r3, #0
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f001 fba8 	bl	80094f2 <USBD_LL_PrepareReceive>
 8007da2:	e018      	b.n	8007dd6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d10b      	bne.n	8007dc8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f001 fae6 	bl	800939c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 ff49 	bl	8008c68 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d122      	bne.n	8007e26 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fe98 	bl	8007b16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dee:	e01a      	b.n	8007e26 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d114      	bne.n	8007e26 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00e      	beq.n	8007e26 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	7afa      	ldrb	r2, [r7, #11]
 8007e12:	4611      	mov	r1, r2
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	e000      	b.n	8007e28 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e02f      	b.n	8007ec4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00f      	beq.n	8007e8e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6852      	ldr	r2, [r2, #4]
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	4611      	mov	r1, r2
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	2200      	movs	r2, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fa3c 	bl	8009312 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2240      	movs	r2, #64	; 0x40
 8007ea6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eaa:	2340      	movs	r3, #64	; 0x40
 8007eac:	2200      	movs	r2, #0
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fa2e 	bl	8009312 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2240      	movs	r2, #64	; 0x40
 8007ec0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2204      	movs	r2, #4
 8007f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d106      	bne.n	8007f3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e012      	b.n	8007f84 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d10b      	bne.n	8007f82 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007faa:	8a3b      	ldrh	r3, [r7, #16]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	b21a      	sxth	r2, r3
 8007fb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	b21b      	sxth	r3, r3
 8007fb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fba:	89fb      	ldrh	r3, [r7, #14]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fde:	2b40      	cmp	r3, #64	; 0x40
 8007fe0:	d005      	beq.n	8007fee <USBD_StdDevReq+0x26>
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d853      	bhi.n	800808e <USBD_StdDevReq+0xc6>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <USBD_StdDevReq+0x3a>
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d14f      	bne.n	800808e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8008000:	e04a      	b.n	8008098 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b09      	cmp	r3, #9
 8008008:	d83b      	bhi.n	8008082 <USBD_StdDevReq+0xba>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <USBD_StdDevReq+0x48>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008065 	.word	0x08008065
 8008014:	08008079 	.word	0x08008079
 8008018:	08008083 	.word	0x08008083
 800801c:	0800806f 	.word	0x0800806f
 8008020:	08008083 	.word	0x08008083
 8008024:	08008043 	.word	0x08008043
 8008028:	08008039 	.word	0x08008039
 800802c:	08008083 	.word	0x08008083
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9de 	bl	80083fc <USBD_GetDescriptor>
          break;
 8008040:	e024      	b.n	800808c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fb6d 	bl	8008724 <USBD_SetAddress>
          break;
 800804a:	e01f      	b.n	800808c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fbac 	bl	80087ac <USBD_SetConfig>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
          break;
 8008058:	e018      	b.n	800808c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc4b 	bl	80088f8 <USBD_GetConfig>
          break;
 8008062:	e013      	b.n	800808c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fc7c 	bl	8008964 <USBD_GetStatus>
          break;
 800806c:	e00e      	b.n	800808c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fcab 	bl	80089cc <USBD_SetFeature>
          break;
 8008076:	e009      	b.n	800808c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fcba 	bl	80089f4 <USBD_ClrFeature>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fd11 	bl	8008aac <USBD_CtlError>
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e004      	b.n	8008098 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fd0b 	bl	8008aac <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop

080080a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d005      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d82f      	bhi.n	8008122 <USBD_StdItfReq+0x7e>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d12b      	bne.n	8008122 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d81d      	bhi.n	8008114 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	889b      	ldrh	r3, [r3, #4]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d813      	bhi.n	800810a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d110      	bne.n	800811e <USBD_StdItfReq+0x7a>
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10d      	bne.n	800811e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fd9d 	bl	8008c42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008108:	e009      	b.n	800811e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fccd 	bl	8008aac <USBD_CtlError>
          break;
 8008112:	e004      	b.n	800811e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fcc8 	bl	8008aac <USBD_CtlError>
          break;
 800811c:	e000      	b.n	8008120 <USBD_StdItfReq+0x7c>
          break;
 800811e:	bf00      	nop
      }
      break;
 8008120:	e004      	b.n	800812c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fcc1 	bl	8008aac <USBD_CtlError>
      break;
 800812a:	bf00      	nop
  }

  return ret;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	889b      	ldrh	r3, [r3, #4]
 8008148:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008152:	2b40      	cmp	r3, #64	; 0x40
 8008154:	d007      	beq.n	8008166 <USBD_StdEPReq+0x30>
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	f200 8145 	bhi.w	80083e6 <USBD_StdEPReq+0x2b0>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <USBD_StdEPReq+0x44>
 8008160:	2b20      	cmp	r3, #32
 8008162:	f040 8140 	bne.w	80083e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]
      break;
 8008178:	e13a      	b.n	80083f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d007      	beq.n	8008192 <USBD_StdEPReq+0x5c>
 8008182:	2b03      	cmp	r3, #3
 8008184:	f300 8129 	bgt.w	80083da <USBD_StdEPReq+0x2a4>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d07f      	beq.n	800828c <USBD_StdEPReq+0x156>
 800818c:	2b01      	cmp	r3, #1
 800818e:	d03c      	beq.n	800820a <USBD_StdEPReq+0xd4>
 8008190:	e123      	b.n	80083da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d002      	beq.n	80081a4 <USBD_StdEPReq+0x6e>
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d016      	beq.n	80081d0 <USBD_StdEPReq+0x9a>
 80081a2:	e02c      	b.n	80081fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00d      	beq.n	80081c6 <USBD_StdEPReq+0x90>
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b80      	cmp	r3, #128	; 0x80
 80081ae:	d00a      	beq.n	80081c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f8f1 	bl	800939c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081ba:	2180      	movs	r1, #128	; 0x80
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f8ed 	bl	800939c <USBD_LL_StallEP>
 80081c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081c4:	e020      	b.n	8008208 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fc6f 	bl	8008aac <USBD_CtlError>
              break;
 80081ce:	e01b      	b.n	8008208 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	885b      	ldrh	r3, [r3, #2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10e      	bne.n	80081f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <USBD_StdEPReq+0xc0>
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d008      	beq.n	80081f6 <USBD_StdEPReq+0xc0>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	88db      	ldrh	r3, [r3, #6]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f8d3 	bl	800939c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fd23 	bl	8008c42 <USBD_CtlSendStatus>

              break;
 80081fc:	e004      	b.n	8008208 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc53 	bl	8008aac <USBD_CtlError>
              break;
 8008206:	bf00      	nop
          }
          break;
 8008208:	e0ec      	b.n	80083e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d002      	beq.n	800821c <USBD_StdEPReq+0xe6>
 8008216:	2b03      	cmp	r3, #3
 8008218:	d016      	beq.n	8008248 <USBD_StdEPReq+0x112>
 800821a:	e030      	b.n	800827e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00d      	beq.n	800823e <USBD_StdEPReq+0x108>
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b80      	cmp	r3, #128	; 0x80
 8008226:	d00a      	beq.n	800823e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f8b5 	bl	800939c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008232:	2180      	movs	r1, #128	; 0x80
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 f8b1 	bl	800939c <USBD_LL_StallEP>
 800823a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800823c:	e025      	b.n	800828a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc33 	bl	8008aac <USBD_CtlError>
              break;
 8008246:	e020      	b.n	800828a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	885b      	ldrh	r3, [r3, #2]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d11b      	bne.n	8008288 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f8bb 	bl	80093da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fcec 	bl	8008c42 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	4798      	blx	r3
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800827c:	e004      	b.n	8008288 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc13 	bl	8008aac <USBD_CtlError>
              break;
 8008286:	e000      	b.n	800828a <USBD_StdEPReq+0x154>
              break;
 8008288:	bf00      	nop
          }
          break;
 800828a:	e0ab      	b.n	80083e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d002      	beq.n	800829e <USBD_StdEPReq+0x168>
 8008298:	2b03      	cmp	r3, #3
 800829a:	d032      	beq.n	8008302 <USBD_StdEPReq+0x1cc>
 800829c:	e097      	b.n	80083ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <USBD_StdEPReq+0x17e>
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b80      	cmp	r3, #128	; 0x80
 80082a8:	d004      	beq.n	80082b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fbfd 	bl	8008aac <USBD_CtlError>
                break;
 80082b2:	e091      	b.n	80083d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	da0b      	bge.n	80082d4 <USBD_StdEPReq+0x19e>
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	3310      	adds	r3, #16
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	4413      	add	r3, r2
 80082d0:	3304      	adds	r3, #4
 80082d2:	e00b      	b.n	80082ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	3304      	adds	r3, #4
 80082ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2202      	movs	r2, #2
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fc47 	bl	8008b8e <USBD_CtlSendData>
              break;
 8008300:	e06a      	b.n	80083d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da11      	bge.n	800832e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	f003 020f 	and.w	r2, r3, #15
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3324      	adds	r3, #36	; 0x24
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d117      	bne.n	8008354 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fbc0 	bl	8008aac <USBD_CtlError>
                  break;
 800832c:	e054      	b.n	80083d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d104      	bne.n	8008354 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fbad 	bl	8008aac <USBD_CtlError>
                  break;
 8008352:	e041      	b.n	80083d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008358:	2b00      	cmp	r3, #0
 800835a:	da0b      	bge.n	8008374 <USBD_StdEPReq+0x23e>
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	3310      	adds	r3, #16
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	3304      	adds	r3, #4
 8008372:	e00b      	b.n	800838c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	3304      	adds	r3, #4
 800838c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <USBD_StdEPReq+0x264>
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b80      	cmp	r3, #128	; 0x80
 8008398:	d103      	bne.n	80083a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	e00e      	b.n	80083c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f836 	bl	8009418 <USBD_LL_IsStallEP>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2201      	movs	r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e002      	b.n	80083c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2202      	movs	r2, #2
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fbe1 	bl	8008b8e <USBD_CtlSendData>
              break;
 80083cc:	e004      	b.n	80083d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fb6b 	bl	8008aac <USBD_CtlError>
              break;
 80083d6:	bf00      	nop
          }
          break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fb65 	bl	8008aac <USBD_CtlError>
          break;
 80083e2:	bf00      	nop
      }
      break;
 80083e4:	e004      	b.n	80083f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb5f 	bl	8008aac <USBD_CtlError>
      break;
 80083ee:	bf00      	nop
  }

  return ret;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	885b      	ldrh	r3, [r3, #2]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	2b0e      	cmp	r3, #14
 800841e:	f200 8152 	bhi.w	80086c6 <USBD_GetDescriptor+0x2ca>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <USBD_GetDescriptor+0x2c>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008499 	.word	0x08008499
 800842c:	080084b1 	.word	0x080084b1
 8008430:	080084f1 	.word	0x080084f1
 8008434:	080086c7 	.word	0x080086c7
 8008438:	080086c7 	.word	0x080086c7
 800843c:	08008667 	.word	0x08008667
 8008440:	08008693 	.word	0x08008693
 8008444:	080086c7 	.word	0x080086c7
 8008448:	080086c7 	.word	0x080086c7
 800844c:	080086c7 	.word	0x080086c7
 8008450:	080086c7 	.word	0x080086c7
 8008454:	080086c7 	.word	0x080086c7
 8008458:	080086c7 	.word	0x080086c7
 800845c:	080086c7 	.word	0x080086c7
 8008460:	08008465 	.word	0x08008465
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	7c12      	ldrb	r2, [r2, #16]
 800847c:	f107 0108 	add.w	r1, r7, #8
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008486:	e126      	b.n	80086d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb0e 	bl	8008aac <USBD_CtlError>
        err++;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	3301      	adds	r3, #1
 8008494:	72fb      	strb	r3, [r7, #11]
      break;
 8008496:	e11e      	b.n	80086d6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	7c12      	ldrb	r2, [r2, #16]
 80084a4:	f107 0108 	add.w	r1, r7, #8
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3
 80084ac:	60f8      	str	r0, [r7, #12]
      break;
 80084ae:	e112      	b.n	80086d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7c1b      	ldrb	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10d      	bne.n	80084d4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	f107 0208 	add.w	r2, r7, #8
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
 80084c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	2202      	movs	r2, #2
 80084d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084d2:	e100      	b.n	80086d6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	f107 0208 	add.w	r2, r7, #8
 80084e0:	4610      	mov	r0, r2
 80084e2:	4798      	blx	r3
 80084e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3301      	adds	r3, #1
 80084ea:	2202      	movs	r2, #2
 80084ec:	701a      	strb	r2, [r3, #0]
      break;
 80084ee:	e0f2      	b.n	80086d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	885b      	ldrh	r3, [r3, #2]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	f200 80ac 	bhi.w	8008654 <USBD_GetDescriptor+0x258>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <USBD_GetDescriptor+0x108>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	0800851d 	.word	0x0800851d
 8008508:	08008551 	.word	0x08008551
 800850c:	08008585 	.word	0x08008585
 8008510:	080085b9 	.word	0x080085b9
 8008514:	080085ed 	.word	0x080085ed
 8008518:	08008621 	.word	0x08008621
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	7c12      	ldrb	r2, [r2, #16]
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800853e:	e091      	b.n	8008664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fab2 	bl	8008aac <USBD_CtlError>
            err++;
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	3301      	adds	r3, #1
 800854c:	72fb      	strb	r3, [r7, #11]
          break;
 800854e:	e089      	b.n	8008664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	7c12      	ldrb	r2, [r2, #16]
 8008568:	f107 0108 	add.w	r1, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008572:	e077      	b.n	8008664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa98 	bl	8008aac <USBD_CtlError>
            err++;
 800857c:	7afb      	ldrb	r3, [r7, #11]
 800857e:	3301      	adds	r3, #1
 8008580:	72fb      	strb	r3, [r7, #11]
          break;
 8008582:	e06f      	b.n	8008664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e05d      	b.n	8008664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa7e 	bl	8008aac <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e055      	b.n	8008664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e043      	b.n	8008664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa64 	bl	8008aac <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e03b      	b.n	8008664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e029      	b.n	8008664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa4a 	bl	8008aac <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e021      	b.n	8008664 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e00f      	b.n	8008664 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa30 	bl	8008aac <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e007      	b.n	8008664 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa28 	bl	8008aac <USBD_CtlError>
          err++;
 800865c:	7afb      	ldrb	r3, [r7, #11]
 800865e:	3301      	adds	r3, #1
 8008660:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008662:	bf00      	nop
      }
      break;
 8008664:	e037      	b.n	80086d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7c1b      	ldrb	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d109      	bne.n	8008682 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008676:	f107 0208 	add.w	r2, r7, #8
 800867a:	4610      	mov	r0, r2
 800867c:	4798      	blx	r3
 800867e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008680:	e029      	b.n	80086d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fa11 	bl	8008aac <USBD_CtlError>
        err++;
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	3301      	adds	r3, #1
 800868e:	72fb      	strb	r3, [r7, #11]
      break;
 8008690:	e021      	b.n	80086d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7c1b      	ldrb	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10d      	bne.n	80086b6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f107 0208 	add.w	r2, r7, #8
 80086a6:	4610      	mov	r0, r2
 80086a8:	4798      	blx	r3
 80086aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3301      	adds	r3, #1
 80086b0:	2207      	movs	r2, #7
 80086b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086b4:	e00f      	b.n	80086d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f9f7 	bl	8008aac <USBD_CtlError>
        err++;
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	3301      	adds	r3, #1
 80086c2:	72fb      	strb	r3, [r7, #11]
      break;
 80086c4:	e007      	b.n	80086d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f9ef 	bl	8008aac <USBD_CtlError>
      err++;
 80086ce:	7afb      	ldrb	r3, [r7, #11]
 80086d0:	3301      	adds	r3, #1
 80086d2:	72fb      	strb	r3, [r7, #11]
      break;
 80086d4:	bf00      	nop
  }

  if (err != 0U)
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d11e      	bne.n	800871a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	88db      	ldrh	r3, [r3, #6]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d016      	beq.n	8008712 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80086e4:	893b      	ldrh	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00e      	beq.n	8008708 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88da      	ldrh	r2, [r3, #6]
 80086ee:	893b      	ldrh	r3, [r7, #8]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	bf28      	it	cs
 80086f4:	4613      	movcs	r3, r2
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086fa:	893b      	ldrh	r3, [r7, #8]
 80086fc:	461a      	mov	r2, r3
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fa44 	bl	8008b8e <USBD_CtlSendData>
 8008706:	e009      	b.n	800871c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f9ce 	bl	8008aac <USBD_CtlError>
 8008710:	e004      	b.n	800871c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa95 	bl	8008c42 <USBD_CtlSendStatus>
 8008718:	e000      	b.n	800871c <USBD_GetDescriptor+0x320>
    return;
 800871a:	bf00      	nop
  }
}
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop

08008724 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	889b      	ldrh	r3, [r3, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d131      	bne.n	800879a <USBD_SetAddress+0x76>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d12d      	bne.n	800879a <USBD_SetAddress+0x76>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	885b      	ldrh	r3, [r3, #2]
 8008742:	2b7f      	cmp	r3, #127	; 0x7f
 8008744:	d829      	bhi.n	800879a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	885b      	ldrh	r3, [r3, #2]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b03      	cmp	r3, #3
 800875c:	d104      	bne.n	8008768 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f9a3 	bl	8008aac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008766:	e01d      	b.n	80087a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7bfa      	ldrb	r2, [r7, #15]
 800876c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fe7c 	bl	8009472 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa61 	bl	8008c42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2202      	movs	r2, #2
 800878a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878e:	e009      	b.n	80087a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008798:	e004      	b.n	80087a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f985 	bl	8008aac <USBD_CtlError>
  }
}
 80087a2:	bf00      	nop
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	885b      	ldrh	r3, [r3, #2]
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	4b4c      	ldr	r3, [pc, #304]	; (80088f4 <USBD_SetConfig+0x148>)
 80087c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087c4:	4b4b      	ldr	r3, [pc, #300]	; (80088f4 <USBD_SetConfig+0x148>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d905      	bls.n	80087d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f96c 	bl	8008aac <USBD_CtlError>
    return USBD_FAIL;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e088      	b.n	80088ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d002      	beq.n	80087ea <USBD_SetConfig+0x3e>
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d025      	beq.n	8008834 <USBD_SetConfig+0x88>
 80087e8:	e071      	b.n	80088ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087ea:	4b42      	ldr	r3, [pc, #264]	; (80088f4 <USBD_SetConfig+0x148>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01c      	beq.n	800882c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80087f2:	4b40      	ldr	r3, [pc, #256]	; (80088f4 <USBD_SetConfig+0x148>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087fc:	4b3d      	ldr	r3, [pc, #244]	; (80088f4 <USBD_SetConfig+0x148>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff f992 	bl	8007b2c <USBD_SetClassConfig>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f949 	bl	8008aac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800881a:	e065      	b.n	80088e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fa10 	bl	8008c42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2203      	movs	r2, #3
 8008826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800882a:	e05d      	b.n	80088e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa08 	bl	8008c42 <USBD_CtlSendStatus>
      break;
 8008832:	e059      	b.n	80088e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008834:	4b2f      	ldr	r3, [pc, #188]	; (80088f4 <USBD_SetConfig+0x148>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d112      	bne.n	8008862 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008844:	4b2b      	ldr	r3, [pc, #172]	; (80088f4 <USBD_SetConfig+0x148>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800884e:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <USBD_SetConfig+0x148>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff f985 	bl	8007b64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f9f1 	bl	8008c42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008860:	e042      	b.n	80088e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008862:	4b24      	ldr	r3, [pc, #144]	; (80088f4 <USBD_SetConfig+0x148>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d02a      	beq.n	80088c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff f973 	bl	8007b64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800887e:	4b1d      	ldr	r3, [pc, #116]	; (80088f4 <USBD_SetConfig+0x148>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008888:	4b1a      	ldr	r3, [pc, #104]	; (80088f4 <USBD_SetConfig+0x148>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff f94c 	bl	8007b2c <USBD_SetClassConfig>
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00f      	beq.n	80088be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f903 	bl	8008aac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff f958 	bl	8007b64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088bc:	e014      	b.n	80088e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9bf 	bl	8008c42 <USBD_CtlSendStatus>
      break;
 80088c4:	e010      	b.n	80088e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f9bb 	bl	8008c42 <USBD_CtlSendStatus>
      break;
 80088cc:	e00c      	b.n	80088e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8eb 	bl	8008aac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088d6:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <USBD_SetConfig+0x148>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff f941 	bl	8007b64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088e2:	2303      	movs	r3, #3
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	bf00      	nop
  }

  return ret;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000328 	.word	0x20000328

080088f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	88db      	ldrh	r3, [r3, #6]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d004      	beq.n	8008914 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8cd 	bl	8008aac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008912:	e023      	b.n	800895c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	dc02      	bgt.n	8008926 <USBD_GetConfig+0x2e>
 8008920:	2b00      	cmp	r3, #0
 8008922:	dc03      	bgt.n	800892c <USBD_GetConfig+0x34>
 8008924:	e015      	b.n	8008952 <USBD_GetConfig+0x5a>
 8008926:	2b03      	cmp	r3, #3
 8008928:	d00b      	beq.n	8008942 <USBD_GetConfig+0x4a>
 800892a:	e012      	b.n	8008952 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	3308      	adds	r3, #8
 8008936:	2201      	movs	r2, #1
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f927 	bl	8008b8e <USBD_CtlSendData>
        break;
 8008940:	e00c      	b.n	800895c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3304      	adds	r3, #4
 8008946:	2201      	movs	r2, #1
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f91f 	bl	8008b8e <USBD_CtlSendData>
        break;
 8008950:	e004      	b.n	800895c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f8a9 	bl	8008aac <USBD_CtlError>
        break;
 800895a:	bf00      	nop
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008974:	b2db      	uxtb	r3, r3
 8008976:	3b01      	subs	r3, #1
 8008978:	2b02      	cmp	r3, #2
 800897a:	d81e      	bhi.n	80089ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	88db      	ldrh	r3, [r3, #6]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d004      	beq.n	800898e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f890 	bl	8008aac <USBD_CtlError>
        break;
 800898c:	e01a      	b.n	80089c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f043 0202 	orr.w	r2, r3, #2
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	330c      	adds	r3, #12
 80089ae:	2202      	movs	r2, #2
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8eb 	bl	8008b8e <USBD_CtlSendData>
      break;
 80089b8:	e004      	b.n	80089c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f875 	bl	8008aac <USBD_CtlError>
      break;
 80089c2:	bf00      	nop
  }
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	885b      	ldrh	r3, [r3, #2]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d106      	bne.n	80089ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f92b 	bl	8008c42 <USBD_CtlSendStatus>
  }
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d80b      	bhi.n	8008a24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	885b      	ldrh	r3, [r3, #2]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d10c      	bne.n	8008a2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f910 	bl	8008c42 <USBD_CtlSendStatus>
      }
      break;
 8008a22:	e004      	b.n	8008a2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f840 	bl	8008aac <USBD_CtlError>
      break;
 8008a2c:	e000      	b.n	8008a30 <USBD_ClrFeature+0x3c>
      break;
 8008a2e:	bf00      	nop
  }
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	781a      	ldrb	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7ff fa92 	bl	8007f8c <SWAPBYTE>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fa85 	bl	8007f8c <SWAPBYTE>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3301      	adds	r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7ff fa78 	bl	8007f8c <SWAPBYTE>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	80da      	strh	r2, [r3, #6]
}
 8008aa4:	bf00      	nop
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ab6:	2180      	movs	r1, #128	; 0x80
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fc6f 	bl	800939c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008abe:	2100      	movs	r1, #0
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fc6b 	bl	800939c <USBD_LL_StallEP>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b086      	sub	sp, #24
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d036      	beq.n	8008b52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ae8:	6938      	ldr	r0, [r7, #16]
 8008aea:	f000 f836 	bl	8008b5a <USBD_GetLen>
 8008aee:	4603      	mov	r3, r0
 8008af0:	3301      	adds	r3, #1
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	7812      	ldrb	r2, [r2, #0]
 8008b06:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	4413      	add	r3, r2
 8008b14:	2203      	movs	r2, #3
 8008b16:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b1e:	e013      	b.n	8008b48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	4413      	add	r3, r2
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	7812      	ldrb	r2, [r2, #0]
 8008b2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	613b      	str	r3, [r7, #16]
    idx++;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
 8008b34:	3301      	adds	r3, #1
 8008b36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	3301      	adds	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e7      	bne.n	8008b20 <USBD_GetString+0x52>
 8008b50:	e000      	b.n	8008b54 <USBD_GetString+0x86>
    return;
 8008b52:	bf00      	nop
  }
}
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b6a:	e005      	b.n	8008b78 <USBD_GetLen+0x1e>
  {
    len++;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3301      	adds	r3, #1
 8008b76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1f5      	bne.n	8008b6c <USBD_GetLen+0x12>
  }

  return len;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fc7b 	bl	80094b0 <USBD_LL_Transmit>

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fc6a 	bl	80094b0 <USBD_LL_Transmit>

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2203      	movs	r2, #3
 8008bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	2100      	movs	r1, #0
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 fc6e 	bl	80094f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	2100      	movs	r1, #0
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fc5d 	bl	80094f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c52:	2300      	movs	r3, #0
 8008c54:	2200      	movs	r2, #0
 8008c56:	2100      	movs	r1, #0
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fc29 	bl	80094b0 <USBD_LL_Transmit>

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2205      	movs	r2, #5
 8008c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c78:	2300      	movs	r3, #0
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc37 	bl	80094f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008c94:	2200      	movs	r2, #0
 8008c96:	4912      	ldr	r1, [pc, #72]	; (8008ce0 <MX_USB_Device_Init+0x50>)
 8008c98:	4812      	ldr	r0, [pc, #72]	; (8008ce4 <MX_USB_Device_Init+0x54>)
 8008c9a:	f7fe fed9 	bl	8007a50 <USBD_Init>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008ca4:	f7f7 fbfc 	bl	80004a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008ca8:	490f      	ldr	r1, [pc, #60]	; (8008ce8 <MX_USB_Device_Init+0x58>)
 8008caa:	480e      	ldr	r0, [pc, #56]	; (8008ce4 <MX_USB_Device_Init+0x54>)
 8008cac:	f7fe ff00 	bl	8007ab0 <USBD_RegisterClass>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008cb6:	f7f7 fbf3 	bl	80004a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008cba:	490c      	ldr	r1, [pc, #48]	; (8008cec <MX_USB_Device_Init+0x5c>)
 8008cbc:	4809      	ldr	r0, [pc, #36]	; (8008ce4 <MX_USB_Device_Init+0x54>)
 8008cbe:	f7fe fe51 	bl	8007964 <USBD_CDC_RegisterInterface>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008cc8:	f7f7 fbea 	bl	80004a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008ccc:	4805      	ldr	r0, [pc, #20]	; (8008ce4 <MX_USB_Device_Init+0x54>)
 8008cce:	f7fe ff16 	bl	8007afe <USBD_Start>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008cd8:	f7f7 fbe2 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008cdc:	bf00      	nop
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20000130 	.word	0x20000130
 8008ce4:	2000032c 	.word	0x2000032c
 8008ce8:	20000018 	.word	0x20000018
 8008cec:	2000011c 	.word	0x2000011c

08008cf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4905      	ldr	r1, [pc, #20]	; (8008d0c <CDC_Init_FS+0x1c>)
 8008cf8:	4805      	ldr	r0, [pc, #20]	; (8008d10 <CDC_Init_FS+0x20>)
 8008cfa:	f7fe fe48 	bl	800798e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cfe:	4905      	ldr	r1, [pc, #20]	; (8008d14 <CDC_Init_FS+0x24>)
 8008d00:	4803      	ldr	r0, [pc, #12]	; (8008d10 <CDC_Init_FS+0x20>)
 8008d02:	f7fe fe62 	bl	80079ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000dfc 	.word	0x20000dfc
 8008d10:	2000032c 	.word	0x2000032c
 8008d14:	200005fc 	.word	0x200005fc

08008d18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	6039      	str	r1, [r7, #0]
 8008d32:	71fb      	strb	r3, [r7, #7]
 8008d34:	4613      	mov	r3, r2
 8008d36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	2b23      	cmp	r3, #35	; 0x23
 8008d3c:	d84a      	bhi.n	8008dd4 <CDC_Control_FS+0xac>
 8008d3e:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <CDC_Control_FS+0x1c>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008dd5 	.word	0x08008dd5
 8008d48:	08008dd5 	.word	0x08008dd5
 8008d4c:	08008dd5 	.word	0x08008dd5
 8008d50:	08008dd5 	.word	0x08008dd5
 8008d54:	08008dd5 	.word	0x08008dd5
 8008d58:	08008dd5 	.word	0x08008dd5
 8008d5c:	08008dd5 	.word	0x08008dd5
 8008d60:	08008dd5 	.word	0x08008dd5
 8008d64:	08008dd5 	.word	0x08008dd5
 8008d68:	08008dd5 	.word	0x08008dd5
 8008d6c:	08008dd5 	.word	0x08008dd5
 8008d70:	08008dd5 	.word	0x08008dd5
 8008d74:	08008dd5 	.word	0x08008dd5
 8008d78:	08008dd5 	.word	0x08008dd5
 8008d7c:	08008dd5 	.word	0x08008dd5
 8008d80:	08008dd5 	.word	0x08008dd5
 8008d84:	08008dd5 	.word	0x08008dd5
 8008d88:	08008dd5 	.word	0x08008dd5
 8008d8c:	08008dd5 	.word	0x08008dd5
 8008d90:	08008dd5 	.word	0x08008dd5
 8008d94:	08008dd5 	.word	0x08008dd5
 8008d98:	08008dd5 	.word	0x08008dd5
 8008d9c:	08008dd5 	.word	0x08008dd5
 8008da0:	08008dd5 	.word	0x08008dd5
 8008da4:	08008dd5 	.word	0x08008dd5
 8008da8:	08008dd5 	.word	0x08008dd5
 8008dac:	08008dd5 	.word	0x08008dd5
 8008db0:	08008dd5 	.word	0x08008dd5
 8008db4:	08008dd5 	.word	0x08008dd5
 8008db8:	08008dd5 	.word	0x08008dd5
 8008dbc:	08008dd5 	.word	0x08008dd5
 8008dc0:	08008dd5 	.word	0x08008dd5
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008dd5 	.word	0x08008dd5
 8008dcc:	08008dd5 	.word	0x08008dd5
 8008dd0:	08008dd5 	.word	0x08008dd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dd4:	bf00      	nop
  }

  return (USBD_OK);
 8008dd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4805      	ldr	r0, [pc, #20]	; (8008e08 <CDC_Receive_FS+0x24>)
 8008df2:	f7fe fdea 	bl	80079ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008df6:	4804      	ldr	r0, [pc, #16]	; (8008e08 <CDC_Receive_FS+0x24>)
 8008df8:	f7fe fe00 	bl	80079fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008dfc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	2000032c 	.word	0x2000032c

08008e0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	6039      	str	r1, [r7, #0]
 8008e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2212      	movs	r2, #18
 8008e40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008e42:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	20000150 	.word	0x20000150

08008e54 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6039      	str	r1, [r7, #0]
 8008e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2204      	movs	r2, #4
 8008e64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e66:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000164 	.word	0x20000164

08008e78 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d105      	bne.n	8008e96 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	4907      	ldr	r1, [pc, #28]	; (8008eac <USBD_CDC_ProductStrDescriptor+0x34>)
 8008e8e:	4808      	ldr	r0, [pc, #32]	; (8008eb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008e90:	f7ff fe1d 	bl	8008ace <USBD_GetString>
 8008e94:	e004      	b.n	8008ea0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	4904      	ldr	r1, [pc, #16]	; (8008eac <USBD_CDC_ProductStrDescriptor+0x34>)
 8008e9a:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008e9c:	f7ff fe17 	bl	8008ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea0:	4b02      	ldr	r3, [pc, #8]	; (8008eac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	200015fc 	.word	0x200015fc
 8008eb0:	080096cc 	.word	0x080096cc

08008eb4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	4904      	ldr	r1, [pc, #16]	; (8008ed4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008ec4:	4804      	ldr	r0, [pc, #16]	; (8008ed8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008ec6:	f7ff fe02 	bl	8008ace <USBD_GetString>
  return USBD_StrDesc;
 8008eca:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	200015fc 	.word	0x200015fc
 8008ed8:	080096e4 	.word	0x080096e4

08008edc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	221a      	movs	r2, #26
 8008eec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eee:	f000 f843 	bl	8008f78 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008ef2:	4b02      	ldr	r3, [pc, #8]	; (8008efc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000168 	.word	0x20000168

08008f00 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4907      	ldr	r1, [pc, #28]	; (8008f34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f16:	4808      	ldr	r0, [pc, #32]	; (8008f38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f18:	f7ff fdd9 	bl	8008ace <USBD_GetString>
 8008f1c:	e004      	b.n	8008f28 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4904      	ldr	r1, [pc, #16]	; (8008f34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f24:	f7ff fdd3 	bl	8008ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200015fc 	.word	0x200015fc
 8008f38:	080096f8 	.word	0x080096f8

08008f3c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d105      	bne.n	8008f5a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4907      	ldr	r1, [pc, #28]	; (8008f70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008f52:	4808      	ldr	r0, [pc, #32]	; (8008f74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008f54:	f7ff fdbb 	bl	8008ace <USBD_GetString>
 8008f58:	e004      	b.n	8008f64 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	4904      	ldr	r1, [pc, #16]	; (8008f70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008f5e:	4805      	ldr	r0, [pc, #20]	; (8008f74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008f60:	f7ff fdb5 	bl	8008ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	200015fc 	.word	0x200015fc
 8008f74:	08009704 	.word	0x08009704

08008f78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <Get_SerialNum+0x44>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <Get_SerialNum+0x48>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f8a:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <Get_SerialNum+0x4c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4413      	add	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f9e:	2208      	movs	r2, #8
 8008fa0:	4909      	ldr	r1, [pc, #36]	; (8008fc8 <Get_SerialNum+0x50>)
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f814 	bl	8008fd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fa8:	2204      	movs	r2, #4
 8008faa:	4908      	ldr	r1, [pc, #32]	; (8008fcc <Get_SerialNum+0x54>)
 8008fac:	68b8      	ldr	r0, [r7, #8]
 8008fae:	f000 f80f 	bl	8008fd0 <IntToUnicode>
  }
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	1fff7590 	.word	0x1fff7590
 8008fc0:	1fff7594 	.word	0x1fff7594
 8008fc4:	1fff7598 	.word	0x1fff7598
 8008fc8:	2000016a 	.word	0x2000016a
 8008fcc:	2000017a 	.word	0x2000017a

08008fd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	75fb      	strb	r3, [r7, #23]
 8008fe6:	e027      	b.n	8009038 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0f1b      	lsrs	r3, r3, #28
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	d80b      	bhi.n	8009008 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	0f1b      	lsrs	r3, r3, #28
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	440b      	add	r3, r1
 8009000:	3230      	adds	r2, #48	; 0x30
 8009002:	b2d2      	uxtb	r2, r2
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	e00a      	b.n	800901e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	0f1b      	lsrs	r3, r3, #28
 800900c:	b2da      	uxtb	r2, r3
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4619      	mov	r1, r3
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	440b      	add	r3, r1
 8009018:	3237      	adds	r2, #55	; 0x37
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	3301      	adds	r3, #1
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4413      	add	r3, r2
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	3301      	adds	r3, #1
 8009036:	75fb      	strb	r3, [r7, #23]
 8009038:	7dfa      	ldrb	r2, [r7, #23]
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	429a      	cmp	r2, r3
 800903e:	d3d3      	bcc.n	8008fe8 <IntToUnicode+0x18>
  }
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b098      	sub	sp, #96	; 0x60
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009058:	f107 0310 	add.w	r3, r7, #16
 800905c:	2250      	movs	r2, #80	; 0x50
 800905e:	2100      	movs	r1, #0
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fb1f 	bl	80096a4 <memset>
  if(pcdHandle->Instance==USB)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a15      	ldr	r2, [pc, #84]	; (80090c0 <HAL_PCD_MspInit+0x70>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d122      	bne.n	80090b6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009074:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009076:	2300      	movs	r3, #0
 8009078:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800907a:	f107 0310 	add.w	r3, r7, #16
 800907e:	4618      	mov	r0, r3
 8009080:	f7fa fc4a 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800908a:	f7f7 fa09 	bl	80004a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <HAL_PCD_MspInit+0x74>)
 8009090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009092:	4a0c      	ldr	r2, [pc, #48]	; (80090c4 <HAL_PCD_MspInit+0x74>)
 8009094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009098:	6593      	str	r3, [r2, #88]	; 0x58
 800909a:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <HAL_PCD_MspInit+0x74>)
 800909c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	2014      	movs	r0, #20
 80090ac:	f7f7 fd9d 	bl	8000bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80090b0:	2014      	movs	r0, #20
 80090b2:	f7f7 fdb4 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090b6:	bf00      	nop
 80090b8:	3760      	adds	r7, #96	; 0x60
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	40005c00 	.word	0x40005c00
 80090c4:	40021000 	.word	0x40021000

080090c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f7fe fd58 	bl	8007b94 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	440b      	add	r3, r1
 800910c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	4619      	mov	r1, r3
 8009116:	f7fe fd92 	bl	8007c3e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009134:	78fa      	ldrb	r2, [r7, #3]
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	440b      	add	r3, r1
 8009142:	333c      	adds	r3, #60	; 0x3c
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	4619      	mov	r1, r3
 800914a:	f7fe fddb 	bl	8007d04 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe feef 	bl	8007f48 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800917a:	2301      	movs	r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d001      	beq.n	800918a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009186:	f7f7 f98b 	bl	80004a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009190:	7bfa      	ldrb	r2, [r7, #15]
 8009192:	4611      	mov	r1, r2
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe fe99 	bl	8007ecc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fe45 	bl	8007e30 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fe94 	bl	8007eec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <HAL_PCD_SuspendCallback+0x30>)
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	4a03      	ldr	r2, [pc, #12]	; (80091e0 <HAL_PCD_SuspendCallback+0x30>)
 80091d2:	f043 0306 	orr.w	r3, r3, #6
 80091d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	e000ed00 	.word	0xe000ed00

080091e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d007      	beq.n	8009204 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091f4:	4b08      	ldr	r3, [pc, #32]	; (8009218 <HAL_PCD_ResumeCallback+0x34>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4a07      	ldr	r2, [pc, #28]	; (8009218 <HAL_PCD_ResumeCallback+0x34>)
 80091fa:	f023 0306 	bic.w	r3, r3, #6
 80091fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009200:	f000 f9fa 	bl	80095f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fe84 	bl	8007f18 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	e000ed00 	.word	0xe000ed00

0800921c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009224:	4a2b      	ldr	r2, [pc, #172]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a29      	ldr	r2, [pc, #164]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009230:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009234:	4b27      	ldr	r3, [pc, #156]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009236:	4a28      	ldr	r2, [pc, #160]	; (80092d8 <USBD_LL_Init+0xbc>)
 8009238:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800923a:	4b26      	ldr	r3, [pc, #152]	; (80092d4 <USBD_LL_Init+0xb8>)
 800923c:	2208      	movs	r2, #8
 800923e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009240:	4b24      	ldr	r3, [pc, #144]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009242:	2202      	movs	r2, #2
 8009244:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009246:	4b23      	ldr	r3, [pc, #140]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009248:	2202      	movs	r2, #2
 800924a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800924c:	4b21      	ldr	r3, [pc, #132]	; (80092d4 <USBD_LL_Init+0xb8>)
 800924e:	2200      	movs	r2, #0
 8009250:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009252:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009254:	2200      	movs	r2, #0
 8009256:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009258:	4b1e      	ldr	r3, [pc, #120]	; (80092d4 <USBD_LL_Init+0xb8>)
 800925a:	2200      	movs	r2, #0
 800925c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800925e:	4b1d      	ldr	r3, [pc, #116]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009260:	2200      	movs	r2, #0
 8009262:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009264:	481b      	ldr	r0, [pc, #108]	; (80092d4 <USBD_LL_Init+0xb8>)
 8009266:	f7f8 f883 	bl	8001370 <HAL_PCD_Init>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009270:	f7f7 f916 	bl	80004a0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800927a:	2318      	movs	r3, #24
 800927c:	2200      	movs	r2, #0
 800927e:	2100      	movs	r1, #0
 8009280:	f7f9 fd3c 	bl	8002cfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800928a:	2358      	movs	r3, #88	; 0x58
 800928c:	2200      	movs	r2, #0
 800928e:	2180      	movs	r1, #128	; 0x80
 8009290:	f7f9 fd34 	bl	8002cfc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800929a:	23c0      	movs	r3, #192	; 0xc0
 800929c:	2200      	movs	r2, #0
 800929e:	2181      	movs	r1, #129	; 0x81
 80092a0:	f7f9 fd2c 	bl	8002cfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80092ae:	2200      	movs	r2, #0
 80092b0:	2101      	movs	r1, #1
 80092b2:	f7f9 fd23 	bl	8002cfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092c0:	2200      	movs	r2, #0
 80092c2:	2182      	movs	r1, #130	; 0x82
 80092c4:	f7f9 fd1a 	bl	8002cfc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200017fc 	.word	0x200017fc
 80092d8:	40005c00 	.word	0x40005c00

080092dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7f8 f921 	bl	800153a <HAL_PCD_Start>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f980 	bl	8009604 <USBD_Get_USB_Status>
 8009304:	4603      	mov	r3, r0
 8009306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009308:	7bbb      	ldrb	r3, [r7, #14]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	4608      	mov	r0, r1
 800931c:	4611      	mov	r1, r2
 800931e:	461a      	mov	r2, r3
 8009320:	4603      	mov	r3, r0
 8009322:	70fb      	strb	r3, [r7, #3]
 8009324:	460b      	mov	r3, r1
 8009326:	70bb      	strb	r3, [r7, #2]
 8009328:	4613      	mov	r3, r2
 800932a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800933a:	78bb      	ldrb	r3, [r7, #2]
 800933c:	883a      	ldrh	r2, [r7, #0]
 800933e:	78f9      	ldrb	r1, [r7, #3]
 8009340:	f7f8 fa69 	bl	8001816 <HAL_PCD_EP_Open>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f95a 	bl	8009604 <USBD_Get_USB_Status>
 8009350:	4603      	mov	r3, r0
 8009352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009354:	7bbb      	ldrb	r3, [r7, #14]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f7f8 fab0 	bl	80018e2 <HAL_PCD_EP_Close>
 8009382:	4603      	mov	r3, r0
 8009384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f93b 	bl	8009604 <USBD_Get_USB_Status>
 800938e:	4603      	mov	r3, r0
 8009390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009392:	7bbb      	ldrb	r3, [r7, #14]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f8 fb71 	bl	8001aa2 <HAL_PCD_EP_SetStall>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f91c 	bl	8009604 <USBD_Get_USB_Status>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f8 fba4 	bl	8001b46 <HAL_PCD_EP_ClrStall>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f8fd 	bl	8009604 <USBD_Get_USB_Status>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800942a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800942c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009430:	2b00      	cmp	r3, #0
 8009432:	da0c      	bge.n	800944e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	440b      	add	r3, r1
 8009448:	3302      	adds	r3, #2
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	e00b      	b.n	8009466 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009454:	68f9      	ldr	r1, [r7, #12]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	440b      	add	r3, r1
 8009460:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009464:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f7f8 f99b 	bl	80017cc <HAL_PCD_SetAddress>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f8b1 	bl	8009604 <USBD_Get_USB_Status>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	607a      	str	r2, [r7, #4]
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	460b      	mov	r3, r1
 80094be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094ce:	7af9      	ldrb	r1, [r7, #11]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	f7f8 faa2 	bl	8001a1c <HAL_PCD_EP_Transmit>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f890 	bl	8009604 <USBD_Get_USB_Status>
 80094e4:	4603      	mov	r3, r0
 80094e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b086      	sub	sp, #24
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
 80094fe:	460b      	mov	r3, r1
 8009500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009510:	7af9      	ldrb	r1, [r7, #11]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	f7f8 fa2c 	bl	8001972 <HAL_PCD_EP_Receive>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f86f 	bl	8009604 <USBD_Get_USB_Status>
 8009526:	4603      	mov	r3, r0
 8009528:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800952a:	7dbb      	ldrb	r3, [r7, #22]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	4611      	mov	r1, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f7f8 fa4e 	bl	80019ec <HAL_PCD_EP_GetRxCount>
 8009550:	4603      	mov	r3, r0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <HAL_PCDEx_LPM_Callback+0x18>
 800956e:	2b01      	cmp	r3, #1
 8009570:	d013      	beq.n	800959a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009572:	e023      	b.n	80095bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800957c:	f000 f83c 	bl	80095f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009580:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	4a0f      	ldr	r2, [pc, #60]	; (80095c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009586:	f023 0306 	bic.w	r3, r3, #6
 800958a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fcc0 	bl	8007f18 <USBD_LL_Resume>
    break;
 8009598:	e010      	b.n	80095bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fe fca3 	bl	8007eec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d005      	beq.n	80095ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	4a04      	ldr	r2, [pc, #16]	; (80095c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80095b4:	f043 0306 	orr.w	r3, r3, #6
 80095b8:	6113      	str	r3, [r2, #16]
    break;
 80095ba:	bf00      	nop
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	e000ed00 	.word	0xe000ed00

080095c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <USBD_static_malloc+0x18>)
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20001af0 	.word	0x20001af0

080095e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]

}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80095fc:	f7f6 ff05 	bl	800040a <SystemClock_Config>
}
 8009600:	bf00      	nop
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d817      	bhi.n	8009648 <USBD_Get_USB_Status+0x44>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <USBD_Get_USB_Status+0x1c>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009631 	.word	0x08009631
 8009624:	08009637 	.word	0x08009637
 8009628:	0800963d 	.word	0x0800963d
 800962c:	08009643 	.word	0x08009643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e00b      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	e008      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	e005      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	73fb      	strb	r3, [r7, #15]
    break;
 8009646:	e002      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	bf00      	nop
  }
  return usb_status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <__libc_init_array>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	4d0d      	ldr	r5, [pc, #52]	; (8009694 <__libc_init_array+0x38>)
 8009660:	4c0d      	ldr	r4, [pc, #52]	; (8009698 <__libc_init_array+0x3c>)
 8009662:	1b64      	subs	r4, r4, r5
 8009664:	10a4      	asrs	r4, r4, #2
 8009666:	2600      	movs	r6, #0
 8009668:	42a6      	cmp	r6, r4
 800966a:	d109      	bne.n	8009680 <__libc_init_array+0x24>
 800966c:	4d0b      	ldr	r5, [pc, #44]	; (800969c <__libc_init_array+0x40>)
 800966e:	4c0c      	ldr	r4, [pc, #48]	; (80096a0 <__libc_init_array+0x44>)
 8009670:	f000 f820 	bl	80096b4 <_init>
 8009674:	1b64      	subs	r4, r4, r5
 8009676:	10a4      	asrs	r4, r4, #2
 8009678:	2600      	movs	r6, #0
 800967a:	42a6      	cmp	r6, r4
 800967c:	d105      	bne.n	800968a <__libc_init_array+0x2e>
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	f855 3b04 	ldr.w	r3, [r5], #4
 8009684:	4798      	blx	r3
 8009686:	3601      	adds	r6, #1
 8009688:	e7ee      	b.n	8009668 <__libc_init_array+0xc>
 800968a:	f855 3b04 	ldr.w	r3, [r5], #4
 800968e:	4798      	blx	r3
 8009690:	3601      	adds	r6, #1
 8009692:	e7f2      	b.n	800967a <__libc_init_array+0x1e>
 8009694:	08009734 	.word	0x08009734
 8009698:	08009734 	.word	0x08009734
 800969c:	08009734 	.word	0x08009734
 80096a0:	08009738 	.word	0x08009738

080096a4 <memset>:
 80096a4:	4402      	add	r2, r0
 80096a6:	4603      	mov	r3, r0
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d100      	bne.n	80096ae <memset+0xa>
 80096ac:	4770      	bx	lr
 80096ae:	f803 1b01 	strb.w	r1, [r3], #1
 80096b2:	e7f9      	b.n	80096a8 <memset+0x4>

080096b4 <_init>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr

080096c0 <_fini>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr
